
Test_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003358  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002124  08003464  08003464  00013464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005588  08005588  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08005588  08005588  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005588  08005588  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005588  08005588  00015588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800558c  0800558c  0001558c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  2000001c  080055ac  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  080055ac  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b54c  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bf9  00000000  00000000  0002b5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d18  00000000  00000000  0002d1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a49  00000000  00000000  0002dee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000179ce  00000000  00000000  0002e931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e6df  00000000  00000000  000462ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a043  00000000  00000000  000549de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000037dc  00000000  00000000  000dea24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e2200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800344c 	.word	0x0800344c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	0800344c 	.word	0x0800344c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t LED_DutyCycle = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 febd 	bl	8000ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f8c7 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f9e3 	bl	8000528 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000162:	f000 f909 	bl	8000378 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000166:	f000 f935 	bl	80003d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800016a:	f000 f985 	bl	8000478 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800016e:	213c      	movs	r1, #60	; 0x3c
 8000170:	4854      	ldr	r0, [pc, #336]	; (80002c4 <main+0x178>)
 8000172:	f002 fd27 	bl	8002bc4 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000176:	2100      	movs	r1, #0
 8000178:	4853      	ldr	r0, [pc, #332]	; (80002c8 <main+0x17c>)
 800017a:	f002 fbdf 	bl	800293c <HAL_TIM_PWM_Start>

  SSD1306_Init (); // initialize the display
 800017e:	f000 faa3 	bl	80006c8 <SSD1306_Init>
//
//  SSD1306_Stopscroll();

//  TestLines(1);
  char string[5];
  int num = 0, pastI = 0;
 8000182:	2300      	movs	r3, #0
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	2300      	movs	r3, #0
 8000188:	60bb      	str	r3, [r7, #8]


     SSD1306_GotoXY (0,0);
 800018a:	2100      	movs	r1, #0
 800018c:	2000      	movs	r0, #0
 800018e:	f000 fc03 	bl	8000998 <SSD1306_GotoXY>
     SSD1306_Puts ("SSD1306", &Font_11x18, 1);
 8000192:	2201      	movs	r2, #1
 8000194:	494d      	ldr	r1, [pc, #308]	; (80002cc <main+0x180>)
 8000196:	484e      	ldr	r0, [pc, #312]	; (80002d0 <main+0x184>)
 8000198:	f000 fc94 	bl	8000ac4 <SSD1306_Puts>
     SSD1306_GotoXY (0, 30);
 800019c:	211e      	movs	r1, #30
 800019e:	2000      	movs	r0, #0
 80001a0:	f000 fbfa 	bl	8000998 <SSD1306_GotoXY>
     SSD1306_Puts ("OLED DEMO", &Font_11x18, 1);
 80001a4:	2201      	movs	r2, #1
 80001a6:	4949      	ldr	r1, [pc, #292]	; (80002cc <main+0x180>)
 80001a8:	484a      	ldr	r0, [pc, #296]	; (80002d4 <main+0x188>)
 80001aa:	f000 fc8b 	bl	8000ac4 <SSD1306_Puts>
     SSD1306_UpdateScreen();
 80001ae:	f000 fb4f 	bl	8000850 <SSD1306_UpdateScreen>
     HAL_Delay (1000);
 80001b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b6:	f000 feef 	bl	8000f98 <HAL_Delay>

     SSD1306_ScrollRight(0,5);
 80001ba:	2105      	movs	r1, #5
 80001bc:	2000      	movs	r0, #0
 80001be:	f000 fa0e 	bl	80005de <SSD1306_ScrollRight>
     HAL_Delay(3000);
 80001c2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80001c6:	f000 fee7 	bl	8000f98 <HAL_Delay>
     SSD1306_ScrollLeft(0,5);
 80001ca:	2105      	movs	r1, #5
 80001cc:	2000      	movs	r0, #0
 80001ce:	f000 fa3c 	bl	800064a <SSD1306_ScrollLeft>
     HAL_Delay(3000);
 80001d2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80001d6:	f000 fedf 	bl	8000f98 <HAL_Delay>
     SSD1306_Stopscroll();
 80001da:	f000 fa6c 	bl	80006b6 <SSD1306_Stopscroll>
     SSD1306_Clear();
 80001de:	f000 fc96 	bl	8000b0e <SSD1306_Clear>

     SSD1306_GotoXY (30,0);
 80001e2:	2100      	movs	r1, #0
 80001e4:	201e      	movs	r0, #30
 80001e6:	f000 fbd7 	bl	8000998 <SSD1306_GotoXY>
     SSD1306_Puts ("Value", &Font_11x18, 1);
 80001ea:	2201      	movs	r2, #1
 80001ec:	4937      	ldr	r1, [pc, #220]	; (80002cc <main+0x180>)
 80001ee:	483a      	ldr	r0, [pc, #232]	; (80002d8 <main+0x18c>)
 80001f0:	f000 fc68 	bl	8000ac4 <SSD1306_Puts>

     itoa(num,string, 10);
 80001f4:	463b      	mov	r3, r7
 80001f6:	220a      	movs	r2, #10
 80001f8:	4619      	mov	r1, r3
 80001fa:	68f8      	ldr	r0, [r7, #12]
 80001fc:	f003 f8b6 	bl	800336c <itoa>
     SSD1306_GotoXY (0, 30);
 8000200:	211e      	movs	r1, #30
 8000202:	2000      	movs	r0, #0
 8000204:	f000 fbc8 	bl	8000998 <SSD1306_GotoXY>
     SSD1306_Puts ("             ", &Font_16x26, 1);
 8000208:	2201      	movs	r2, #1
 800020a:	4934      	ldr	r1, [pc, #208]	; (80002dc <main+0x190>)
 800020c:	4834      	ldr	r0, [pc, #208]	; (80002e0 <main+0x194>)
 800020e:	f000 fc59 	bl	8000ac4 <SSD1306_Puts>
     SSD1306_UpdateScreen();
 8000212:	f000 fb1d 	bl	8000850 <SSD1306_UpdateScreen>
     SSD1306_GotoXY (53, 30);  // 1 DIGIT
 8000216:	211e      	movs	r1, #30
 8000218:	2035      	movs	r0, #53	; 0x35
 800021a:	f000 fbbd 	bl	8000998 <SSD1306_GotoXY>
     SSD1306_Puts (string, &Font_16x26, 1);
 800021e:	463b      	mov	r3, r7
 8000220:	2201      	movs	r2, #1
 8000222:	492e      	ldr	r1, [pc, #184]	; (80002dc <main+0x190>)
 8000224:	4618      	mov	r0, r3
 8000226:	f000 fc4d 	bl	8000ac4 <SSD1306_Puts>
     SSD1306_UpdateScreen();
 800022a:	f000 fb11 	bl	8000850 <SSD1306_UpdateScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LED_DutyCycle = (TIM2->CNT);
 800022e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000234:	80fb      	strh	r3, [r7, #6]
	  TIM3->CCR1 = LED_DutyCycle;
 8000236:	4a2b      	ldr	r2, [pc, #172]	; (80002e4 <main+0x198>)
 8000238:	88fb      	ldrh	r3, [r7, #6]
 800023a:	6353      	str	r3, [r2, #52]	; 0x34
	  if(num != pastI)
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	429a      	cmp	r2, r3
 8000242:	d02c      	beq.n	800029e <main+0x152>
	  		{

	  			itoa(num,string, 10);
 8000244:	463b      	mov	r3, r7
 8000246:	220a      	movs	r2, #10
 8000248:	4619      	mov	r1, r3
 800024a:	68f8      	ldr	r0, [r7, #12]
 800024c:	f003 f88e 	bl	800336c <itoa>
	  			SSD1306_GotoXY (0, 30);
 8000250:	211e      	movs	r1, #30
 8000252:	2000      	movs	r0, #0
 8000254:	f000 fba0 	bl	8000998 <SSD1306_GotoXY>
	  			SSD1306_Puts ("             ", &Font_16x26, 1);
 8000258:	2201      	movs	r2, #1
 800025a:	4920      	ldr	r1, [pc, #128]	; (80002dc <main+0x190>)
 800025c:	4820      	ldr	r0, [pc, #128]	; (80002e0 <main+0x194>)
 800025e:	f000 fc31 	bl	8000ac4 <SSD1306_Puts>
	  			SSD1306_UpdateScreen();
 8000262:	f000 faf5 	bl	8000850 <SSD1306_UpdateScreen>
	  			if(num<10) {
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	2b09      	cmp	r3, #9
 800026a:	dc04      	bgt.n	8000276 <main+0x12a>
	  				SSD1306_GotoXY (53, 30);  // 1 DIGIT
 800026c:	211e      	movs	r1, #30
 800026e:	2035      	movs	r0, #53	; 0x35
 8000270:	f000 fb92 	bl	8000998 <SSD1306_GotoXY>
 8000274:	e00b      	b.n	800028e <main+0x142>
	  			}
	  			else if (num<100) {
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	2b63      	cmp	r3, #99	; 0x63
 800027a:	dc04      	bgt.n	8000286 <main+0x13a>
	  				SSD1306_GotoXY (45, 30);  // 2 DIGITS
 800027c:	211e      	movs	r1, #30
 800027e:	202d      	movs	r0, #45	; 0x2d
 8000280:	f000 fb8a 	bl	8000998 <SSD1306_GotoXY>
 8000284:	e003      	b.n	800028e <main+0x142>
	  			}
	  			else  {
	  				SSD1306_GotoXY (37, 30);  // 3 DIGITS
 8000286:	211e      	movs	r1, #30
 8000288:	2025      	movs	r0, #37	; 0x25
 800028a:	f000 fb85 	bl	8000998 <SSD1306_GotoXY>
	  			}
	  			SSD1306_Puts (string, &Font_16x26, 1);
 800028e:	463b      	mov	r3, r7
 8000290:	2201      	movs	r2, #1
 8000292:	4912      	ldr	r1, [pc, #72]	; (80002dc <main+0x190>)
 8000294:	4618      	mov	r0, r3
 8000296:	f000 fc15 	bl	8000ac4 <SSD1306_Puts>
	  			SSD1306_UpdateScreen();
 800029a:	f000 fad9 	bl	8000850 <SSD1306_UpdateScreen>
//	  			HAL_Delay (500);
	  		}
	  pastI = num;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	60bb      	str	r3, [r7, #8]
	  num = TIM2->CNT;
 80002a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a8:	60fb      	str	r3, [r7, #12]

	  if(HAL_GPIO_ReadPin(Enc_button_GPIO_Port, Enc_button_Pin)==GPIO_PIN_RESET){
 80002aa:	2104      	movs	r1, #4
 80002ac:	480e      	ldr	r0, [pc, #56]	; (80002e8 <main+0x19c>)
 80002ae:	f001 f8ff 	bl	80014b0 <HAL_GPIO_ReadPin>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d0ba      	beq.n	800022e <main+0xe2>

	  }else{
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002b8:	2200      	movs	r2, #0
 80002ba:	2108      	movs	r1, #8
 80002bc:	480a      	ldr	r0, [pc, #40]	; (80002e8 <main+0x19c>)
 80002be:	f001 f90e 	bl	80014de <HAL_GPIO_WritePin>
	  LED_DutyCycle = (TIM2->CNT);
 80002c2:	e7b4      	b.n	800022e <main+0xe2>
 80002c4:	2000008c 	.word	0x2000008c
 80002c8:	200000d4 	.word	0x200000d4
 80002cc:	20000000 	.word	0x20000000
 80002d0:	08003464 	.word	0x08003464
 80002d4:	0800346c 	.word	0x0800346c
 80002d8:	08003478 	.word	0x08003478
 80002dc:	20000008 	.word	0x20000008
 80002e0:	08003480 	.word	0x08003480
 80002e4:	40000400 	.word	0x40000400
 80002e8:	40010800 	.word	0x40010800

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b090      	sub	sp, #64	; 0x40
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	2228      	movs	r2, #40	; 0x28
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f003 f87a 	bl	80033f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030e:	2301      	movs	r3, #1
 8000310:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000316:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031c:	2301      	movs	r3, #1
 800031e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000320:	2302      	movs	r3, #2
 8000322:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800032a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800032e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000330:	f107 0318 	add.w	r3, r7, #24
 8000334:	4618      	mov	r0, r3
 8000336:	f001 feb5 	bl	80020a4 <HAL_RCC_OscConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000340:	f000 f948 	bl	80005d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000344:	230f      	movs	r3, #15
 8000346:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000348:	2302      	movs	r3, #2
 800034a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000354:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2102      	movs	r1, #2
 800035e:	4618      	mov	r0, r3
 8000360:	f002 f922 	bl	80025a8 <HAL_RCC_ClockConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800036a:	f000 f933 	bl	80005d4 <Error_Handler>
  }
}
 800036e:	bf00      	nop
 8000370:	3740      	adds	r7, #64	; 0x40
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800037c:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <MX_I2C2_Init+0x50>)
 800037e:	4a13      	ldr	r2, [pc, #76]	; (80003cc <MX_I2C2_Init+0x54>)
 8000380:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000382:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <MX_I2C2_Init+0x50>)
 8000384:	4a12      	ldr	r2, [pc, #72]	; (80003d0 <MX_I2C2_Init+0x58>)
 8000386:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000388:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <MX_I2C2_Init+0x50>)
 800038a:	2200      	movs	r2, #0
 800038c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <MX_I2C2_Init+0x50>)
 8000390:	2200      	movs	r2, #0
 8000392:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <MX_I2C2_Init+0x50>)
 8000396:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800039a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800039c:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <MX_I2C2_Init+0x50>)
 800039e:	2200      	movs	r2, #0
 80003a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <MX_I2C2_Init+0x50>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003a8:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <MX_I2C2_Init+0x50>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ae:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <MX_I2C2_Init+0x50>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003b4:	4804      	ldr	r0, [pc, #16]	; (80003c8 <MX_I2C2_Init+0x50>)
 80003b6:	f001 f8ab 	bl	8001510 <HAL_I2C_Init>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80003c0:	f000 f908 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20000038 	.word	0x20000038
 80003cc:	40005800 	.word	0x40005800
 80003d0:	00061a80 	.word	0x00061a80

080003d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08c      	sub	sp, #48	; 0x30
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80003da:	f107 030c 	add.w	r3, r7, #12
 80003de:	2224      	movs	r2, #36	; 0x24
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f003 f806 	bl	80033f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003f0:	4b20      	ldr	r3, [pc, #128]	; (8000474 <MX_TIM2_Init+0xa0>)
 80003f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003f8:	4b1e      	ldr	r3, [pc, #120]	; (8000474 <MX_TIM2_Init+0xa0>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003fe:	4b1d      	ldr	r3, [pc, #116]	; (8000474 <MX_TIM2_Init+0xa0>)
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000404:	4b1b      	ldr	r3, [pc, #108]	; (8000474 <MX_TIM2_Init+0xa0>)
 8000406:	2264      	movs	r2, #100	; 0x64
 8000408:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800040a:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <MX_TIM2_Init+0xa0>)
 800040c:	2200      	movs	r2, #0
 800040e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000410:	4b18      	ldr	r3, [pc, #96]	; (8000474 <MX_TIM2_Init+0xa0>)
 8000412:	2200      	movs	r2, #0
 8000414:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000416:	2301      	movs	r3, #1
 8000418:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800041a:	2300      	movs	r3, #0
 800041c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800041e:	2301      	movs	r3, #1
 8000420:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000422:	2300      	movs	r3, #0
 8000424:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000426:	230f      	movs	r3, #15
 8000428:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800042a:	2300      	movs	r3, #0
 800042c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800042e:	2301      	movs	r3, #1
 8000430:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000436:	230f      	movs	r3, #15
 8000438:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800043a:	f107 030c 	add.w	r3, r7, #12
 800043e:	4619      	mov	r1, r3
 8000440:	480c      	ldr	r0, [pc, #48]	; (8000474 <MX_TIM2_Init+0xa0>)
 8000442:	f002 fb1d 	bl	8002a80 <HAL_TIM_Encoder_Init>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800044c:	f000 f8c2 	bl	80005d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000450:	2300      	movs	r3, #0
 8000452:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000454:	2300      	movs	r3, #0
 8000456:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	4619      	mov	r1, r3
 800045c:	4805      	ldr	r0, [pc, #20]	; (8000474 <MX_TIM2_Init+0xa0>)
 800045e:	f002 ff0f 	bl	8003280 <HAL_TIMEx_MasterConfigSynchronization>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000468:	f000 f8b4 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800046c:	bf00      	nop
 800046e:	3730      	adds	r7, #48	; 0x30
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	2000008c 	.word	0x2000008c

08000478 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08a      	sub	sp, #40	; 0x28
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800047e:	f107 0320 	add.w	r3, r7, #32
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]
 8000494:	611a      	str	r2, [r3, #16]
 8000496:	615a      	str	r2, [r3, #20]
 8000498:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800049a:	4b21      	ldr	r3, [pc, #132]	; (8000520 <MX_TIM3_Init+0xa8>)
 800049c:	4a21      	ldr	r2, [pc, #132]	; (8000524 <MX_TIM3_Init+0xac>)
 800049e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004a0:	4b1f      	ldr	r3, [pc, #124]	; (8000520 <MX_TIM3_Init+0xa8>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a6:	4b1e      	ldr	r3, [pc, #120]	; (8000520 <MX_TIM3_Init+0xa8>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80004ac:	4b1c      	ldr	r3, [pc, #112]	; (8000520 <MX_TIM3_Init+0xa8>)
 80004ae:	2264      	movs	r2, #100	; 0x64
 80004b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b2:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <MX_TIM3_Init+0xa8>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b8:	4b19      	ldr	r3, [pc, #100]	; (8000520 <MX_TIM3_Init+0xa8>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80004be:	4818      	ldr	r0, [pc, #96]	; (8000520 <MX_TIM3_Init+0xa8>)
 80004c0:	f002 f9ec 	bl	800289c <HAL_TIM_PWM_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80004ca:	f000 f883 	bl	80005d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ce:	2300      	movs	r3, #0
 80004d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004d6:	f107 0320 	add.w	r3, r7, #32
 80004da:	4619      	mov	r1, r3
 80004dc:	4810      	ldr	r0, [pc, #64]	; (8000520 <MX_TIM3_Init+0xa8>)
 80004de:	f002 fecf 	bl	8003280 <HAL_TIMEx_MasterConfigSynchronization>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80004e8:	f000 f874 	bl	80005d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ec:	2360      	movs	r3, #96	; 0x60
 80004ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2200      	movs	r2, #0
 8000500:	4619      	mov	r1, r3
 8000502:	4807      	ldr	r0, [pc, #28]	; (8000520 <MX_TIM3_Init+0xa8>)
 8000504:	f002 fbec 	bl	8002ce0 <HAL_TIM_PWM_ConfigChannel>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800050e:	f000 f861 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000512:	4803      	ldr	r0, [pc, #12]	; (8000520 <MX_TIM3_Init+0xa8>)
 8000514:	f000 fc58 	bl	8000dc8 <HAL_TIM_MspPostInit>

}
 8000518:	bf00      	nop
 800051a:	3728      	adds	r7, #40	; 0x28
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	200000d4 	.word	0x200000d4
 8000524:	40000400 	.word	0x40000400

08000528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 0310 	add.w	r3, r7, #16
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800053c:	4b23      	ldr	r3, [pc, #140]	; (80005cc <MX_GPIO_Init+0xa4>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a22      	ldr	r2, [pc, #136]	; (80005cc <MX_GPIO_Init+0xa4>)
 8000542:	f043 0320 	orr.w	r3, r3, #32
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b20      	ldr	r3, [pc, #128]	; (80005cc <MX_GPIO_Init+0xa4>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0320 	and.w	r3, r3, #32
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000554:	4b1d      	ldr	r3, [pc, #116]	; (80005cc <MX_GPIO_Init+0xa4>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a1c      	ldr	r2, [pc, #112]	; (80005cc <MX_GPIO_Init+0xa4>)
 800055a:	f043 0304 	orr.w	r3, r3, #4
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <MX_GPIO_Init+0xa4>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0304 	and.w	r3, r3, #4
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_GPIO_Init+0xa4>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a16      	ldr	r2, [pc, #88]	; (80005cc <MX_GPIO_Init+0xa4>)
 8000572:	f043 0308 	orr.w	r3, r3, #8
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_GPIO_Init+0xa4>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0308 	and.w	r3, r3, #8
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2108      	movs	r1, #8
 8000588:	4811      	ldr	r0, [pc, #68]	; (80005d0 <MX_GPIO_Init+0xa8>)
 800058a:	f000 ffa8 	bl	80014de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Enc_button_Pin */
  GPIO_InitStruct.Pin = Enc_button_Pin;
 800058e:	2304      	movs	r3, #4
 8000590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Enc_button_GPIO_Port, &GPIO_InitStruct);
 800059a:	f107 0310 	add.w	r3, r7, #16
 800059e:	4619      	mov	r1, r3
 80005a0:	480b      	ldr	r0, [pc, #44]	; (80005d0 <MX_GPIO_Init+0xa8>)
 80005a2:	f000 fe01 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005a6:	2308      	movs	r3, #8
 80005a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	2302      	movs	r3, #2
 80005b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	4619      	mov	r1, r3
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <MX_GPIO_Init+0xa8>)
 80005be:	f000 fdf3 	bl	80011a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005c2:	bf00      	nop
 80005c4:	3720      	adds	r7, #32
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40021000 	.word	0x40021000
 80005d0:	40010800 	.word	0x40010800

080005d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d8:	b672      	cpsid	i
}
 80005da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005dc:	e7fe      	b.n	80005dc <Error_Handler+0x8>

080005de <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	4603      	mov	r3, r0
 80005e6:	460a      	mov	r2, r1
 80005e8:	71fb      	strb	r3, [r7, #7]
 80005ea:	4613      	mov	r3, r2
 80005ec:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 80005ee:	2226      	movs	r2, #38	; 0x26
 80005f0:	2100      	movs	r1, #0
 80005f2:	2078      	movs	r0, #120	; 0x78
 80005f4:	f000 fb0e 	bl	8000c14 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80005f8:	2200      	movs	r2, #0
 80005fa:	2100      	movs	r1, #0
 80005fc:	2078      	movs	r0, #120	; 0x78
 80005fe:	f000 fb09 	bl	8000c14 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	461a      	mov	r2, r3
 8000606:	2100      	movs	r1, #0
 8000608:	2078      	movs	r0, #120	; 0x78
 800060a:	f000 fb03 	bl	8000c14 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	2078      	movs	r0, #120	; 0x78
 8000614:	f000 fafe 	bl	8000c14 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000618:	79bb      	ldrb	r3, [r7, #6]
 800061a:	461a      	mov	r2, r3
 800061c:	2100      	movs	r1, #0
 800061e:	2078      	movs	r0, #120	; 0x78
 8000620:	f000 faf8 	bl	8000c14 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8000624:	2200      	movs	r2, #0
 8000626:	2100      	movs	r1, #0
 8000628:	2078      	movs	r0, #120	; 0x78
 800062a:	f000 faf3 	bl	8000c14 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 800062e:	22ff      	movs	r2, #255	; 0xff
 8000630:	2100      	movs	r1, #0
 8000632:	2078      	movs	r0, #120	; 0x78
 8000634:	f000 faee 	bl	8000c14 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000638:	222f      	movs	r2, #47	; 0x2f
 800063a:	2100      	movs	r1, #0
 800063c:	2078      	movs	r0, #120	; 0x78
 800063e:	f000 fae9 	bl	8000c14 <ssd1306_I2C_Write>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af00      	add	r7, sp, #0
 8000650:	4603      	mov	r3, r0
 8000652:	460a      	mov	r2, r1
 8000654:	71fb      	strb	r3, [r7, #7]
 8000656:	4613      	mov	r3, r2
 8000658:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 800065a:	2227      	movs	r2, #39	; 0x27
 800065c:	2100      	movs	r1, #0
 800065e:	2078      	movs	r0, #120	; 0x78
 8000660:	f000 fad8 	bl	8000c14 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	2078      	movs	r0, #120	; 0x78
 800066a:	f000 fad3 	bl	8000c14 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	461a      	mov	r2, r3
 8000672:	2100      	movs	r1, #0
 8000674:	2078      	movs	r0, #120	; 0x78
 8000676:	f000 facd 	bl	8000c14 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	2078      	movs	r0, #120	; 0x78
 8000680:	f000 fac8 	bl	8000c14 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000684:	79bb      	ldrb	r3, [r7, #6]
 8000686:	461a      	mov	r2, r3
 8000688:	2100      	movs	r1, #0
 800068a:	2078      	movs	r0, #120	; 0x78
 800068c:	f000 fac2 	bl	8000c14 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	2078      	movs	r0, #120	; 0x78
 8000696:	f000 fabd 	bl	8000c14 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 800069a:	22ff      	movs	r2, #255	; 0xff
 800069c:	2100      	movs	r1, #0
 800069e:	2078      	movs	r0, #120	; 0x78
 80006a0:	f000 fab8 	bl	8000c14 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80006a4:	222f      	movs	r2, #47	; 0x2f
 80006a6:	2100      	movs	r1, #0
 80006a8:	2078      	movs	r0, #120	; 0x78
 80006aa:	f000 fab3 	bl	8000c14 <ssd1306_I2C_Write>
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80006ba:	222e      	movs	r2, #46	; 0x2e
 80006bc:	2100      	movs	r1, #0
 80006be:	2078      	movs	r0, #120	; 0x78
 80006c0:	f000 faa8 	bl	8000c14 <ssd1306_I2C_Write>
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80006ce:	f000 fa27 	bl	8000b20 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80006d2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80006d6:	2201      	movs	r2, #1
 80006d8:	2178      	movs	r1, #120	; 0x78
 80006da:	485b      	ldr	r0, [pc, #364]	; (8000848 <SSD1306_Init+0x180>)
 80006dc:	f001 f95a 	bl	8001994 <HAL_I2C_IsDeviceReady>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	e0a9      	b.n	800083e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80006ea:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80006ee:	607b      	str	r3, [r7, #4]
	while(p>0)
 80006f0:	e002      	b.n	80006f8 <SSD1306_Init+0x30>
		p--;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3b01      	subs	r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d1f9      	bne.n	80006f2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80006fe:	22ae      	movs	r2, #174	; 0xae
 8000700:	2100      	movs	r1, #0
 8000702:	2078      	movs	r0, #120	; 0x78
 8000704:	f000 fa86 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000708:	2220      	movs	r2, #32
 800070a:	2100      	movs	r1, #0
 800070c:	2078      	movs	r0, #120	; 0x78
 800070e:	f000 fa81 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000712:	2210      	movs	r2, #16
 8000714:	2100      	movs	r1, #0
 8000716:	2078      	movs	r0, #120	; 0x78
 8000718:	f000 fa7c 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800071c:	22b0      	movs	r2, #176	; 0xb0
 800071e:	2100      	movs	r1, #0
 8000720:	2078      	movs	r0, #120	; 0x78
 8000722:	f000 fa77 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000726:	22c8      	movs	r2, #200	; 0xc8
 8000728:	2100      	movs	r1, #0
 800072a:	2078      	movs	r0, #120	; 0x78
 800072c:	f000 fa72 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2078      	movs	r0, #120	; 0x78
 8000736:	f000 fa6d 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800073a:	2210      	movs	r2, #16
 800073c:	2100      	movs	r1, #0
 800073e:	2078      	movs	r0, #120	; 0x78
 8000740:	f000 fa68 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000744:	2240      	movs	r2, #64	; 0x40
 8000746:	2100      	movs	r1, #0
 8000748:	2078      	movs	r0, #120	; 0x78
 800074a:	f000 fa63 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800074e:	2281      	movs	r2, #129	; 0x81
 8000750:	2100      	movs	r1, #0
 8000752:	2078      	movs	r0, #120	; 0x78
 8000754:	f000 fa5e 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000758:	22ff      	movs	r2, #255	; 0xff
 800075a:	2100      	movs	r1, #0
 800075c:	2078      	movs	r0, #120	; 0x78
 800075e:	f000 fa59 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000762:	22a1      	movs	r2, #161	; 0xa1
 8000764:	2100      	movs	r1, #0
 8000766:	2078      	movs	r0, #120	; 0x78
 8000768:	f000 fa54 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800076c:	22a6      	movs	r2, #166	; 0xa6
 800076e:	2100      	movs	r1, #0
 8000770:	2078      	movs	r0, #120	; 0x78
 8000772:	f000 fa4f 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000776:	22a8      	movs	r2, #168	; 0xa8
 8000778:	2100      	movs	r1, #0
 800077a:	2078      	movs	r0, #120	; 0x78
 800077c:	f000 fa4a 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000780:	223f      	movs	r2, #63	; 0x3f
 8000782:	2100      	movs	r1, #0
 8000784:	2078      	movs	r0, #120	; 0x78
 8000786:	f000 fa45 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800078a:	22a4      	movs	r2, #164	; 0xa4
 800078c:	2100      	movs	r1, #0
 800078e:	2078      	movs	r0, #120	; 0x78
 8000790:	f000 fa40 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000794:	22d3      	movs	r2, #211	; 0xd3
 8000796:	2100      	movs	r1, #0
 8000798:	2078      	movs	r0, #120	; 0x78
 800079a:	f000 fa3b 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	2078      	movs	r0, #120	; 0x78
 80007a4:	f000 fa36 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80007a8:	22d5      	movs	r2, #213	; 0xd5
 80007aa:	2100      	movs	r1, #0
 80007ac:	2078      	movs	r0, #120	; 0x78
 80007ae:	f000 fa31 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80007b2:	22f0      	movs	r2, #240	; 0xf0
 80007b4:	2100      	movs	r1, #0
 80007b6:	2078      	movs	r0, #120	; 0x78
 80007b8:	f000 fa2c 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80007bc:	22d9      	movs	r2, #217	; 0xd9
 80007be:	2100      	movs	r1, #0
 80007c0:	2078      	movs	r0, #120	; 0x78
 80007c2:	f000 fa27 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80007c6:	2222      	movs	r2, #34	; 0x22
 80007c8:	2100      	movs	r1, #0
 80007ca:	2078      	movs	r0, #120	; 0x78
 80007cc:	f000 fa22 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80007d0:	22da      	movs	r2, #218	; 0xda
 80007d2:	2100      	movs	r1, #0
 80007d4:	2078      	movs	r0, #120	; 0x78
 80007d6:	f000 fa1d 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80007da:	2212      	movs	r2, #18
 80007dc:	2100      	movs	r1, #0
 80007de:	2078      	movs	r0, #120	; 0x78
 80007e0:	f000 fa18 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80007e4:	22db      	movs	r2, #219	; 0xdb
 80007e6:	2100      	movs	r1, #0
 80007e8:	2078      	movs	r0, #120	; 0x78
 80007ea:	f000 fa13 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80007ee:	2220      	movs	r2, #32
 80007f0:	2100      	movs	r1, #0
 80007f2:	2078      	movs	r0, #120	; 0x78
 80007f4:	f000 fa0e 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80007f8:	228d      	movs	r2, #141	; 0x8d
 80007fa:	2100      	movs	r1, #0
 80007fc:	2078      	movs	r0, #120	; 0x78
 80007fe:	f000 fa09 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000802:	2214      	movs	r2, #20
 8000804:	2100      	movs	r1, #0
 8000806:	2078      	movs	r0, #120	; 0x78
 8000808:	f000 fa04 	bl	8000c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800080c:	22af      	movs	r2, #175	; 0xaf
 800080e:	2100      	movs	r1, #0
 8000810:	2078      	movs	r0, #120	; 0x78
 8000812:	f000 f9ff 	bl	8000c14 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000816:	222e      	movs	r2, #46	; 0x2e
 8000818:	2100      	movs	r1, #0
 800081a:	2078      	movs	r0, #120	; 0x78
 800081c:	f000 f9fa 	bl	8000c14 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000820:	2000      	movs	r0, #0
 8000822:	f000 f843 	bl	80008ac <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000826:	f000 f813 	bl	8000850 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <SSD1306_Init+0x184>)
 800082c:	2200      	movs	r2, #0
 800082e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <SSD1306_Init+0x184>)
 8000832:	2200      	movs	r2, #0
 8000834:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <SSD1306_Init+0x184>)
 8000838:	2201      	movs	r2, #1
 800083a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800083c:	2301      	movs	r3, #1
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000038 	.word	0x20000038
 800084c:	2000051c 	.word	0x2000051c

08000850 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000856:	2300      	movs	r3, #0
 8000858:	71fb      	strb	r3, [r7, #7]
 800085a:	e01d      	b.n	8000898 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	3b50      	subs	r3, #80	; 0x50
 8000860:	b2db      	uxtb	r3, r3
 8000862:	461a      	mov	r2, r3
 8000864:	2100      	movs	r1, #0
 8000866:	2078      	movs	r0, #120	; 0x78
 8000868:	f000 f9d4 	bl	8000c14 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800086c:	2200      	movs	r2, #0
 800086e:	2100      	movs	r1, #0
 8000870:	2078      	movs	r0, #120	; 0x78
 8000872:	f000 f9cf 	bl	8000c14 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000876:	2210      	movs	r2, #16
 8000878:	2100      	movs	r1, #0
 800087a:	2078      	movs	r0, #120	; 0x78
 800087c:	f000 f9ca 	bl	8000c14 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	01db      	lsls	r3, r3, #7
 8000884:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <SSD1306_UpdateScreen+0x58>)
 8000886:	441a      	add	r2, r3
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	2140      	movs	r1, #64	; 0x40
 800088c:	2078      	movs	r0, #120	; 0x78
 800088e:	f000 f95b 	bl	8000b48 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	3301      	adds	r3, #1
 8000896:	71fb      	strb	r3, [r7, #7]
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2b07      	cmp	r3, #7
 800089c:	d9de      	bls.n	800085c <SSD1306_UpdateScreen+0xc>
	}
}
 800089e:	bf00      	nop
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2000011c 	.word	0x2000011c

080008ac <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d101      	bne.n	80008c0 <SSD1306_Fill+0x14>
 80008bc:	2300      	movs	r3, #0
 80008be:	e000      	b.n	80008c2 <SSD1306_Fill+0x16>
 80008c0:	23ff      	movs	r3, #255	; 0xff
 80008c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008c6:	4619      	mov	r1, r3
 80008c8:	4803      	ldr	r0, [pc, #12]	; (80008d8 <SSD1306_Fill+0x2c>)
 80008ca:	f002 fd93 	bl	80033f4 <memset>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	2000011c 	.word	0x2000011c

080008dc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	80fb      	strh	r3, [r7, #6]
 80008e6:	460b      	mov	r3, r1
 80008e8:	80bb      	strh	r3, [r7, #4]
 80008ea:	4613      	mov	r3, r2
 80008ec:	70fb      	strb	r3, [r7, #3]
	if (
 80008ee:	88fb      	ldrh	r3, [r7, #6]
 80008f0:	2b7f      	cmp	r3, #127	; 0x7f
 80008f2:	d848      	bhi.n	8000986 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80008f4:	88bb      	ldrh	r3, [r7, #4]
 80008f6:	2b3f      	cmp	r3, #63	; 0x3f
 80008f8:	d845      	bhi.n	8000986 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80008fa:	4b25      	ldr	r3, [pc, #148]	; (8000990 <SSD1306_DrawPixel+0xb4>)
 80008fc:	791b      	ldrb	r3, [r3, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d006      	beq.n	8000910 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000902:	78fb      	ldrb	r3, [r7, #3]
 8000904:	2b00      	cmp	r3, #0
 8000906:	bf0c      	ite	eq
 8000908:	2301      	moveq	r3, #1
 800090a:	2300      	movne	r3, #0
 800090c:	b2db      	uxtb	r3, r3
 800090e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d11a      	bne.n	800094c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000916:	88fa      	ldrh	r2, [r7, #6]
 8000918:	88bb      	ldrh	r3, [r7, #4]
 800091a:	08db      	lsrs	r3, r3, #3
 800091c:	b298      	uxth	r0, r3
 800091e:	4603      	mov	r3, r0
 8000920:	01db      	lsls	r3, r3, #7
 8000922:	4413      	add	r3, r2
 8000924:	4a1b      	ldr	r2, [pc, #108]	; (8000994 <SSD1306_DrawPixel+0xb8>)
 8000926:	5cd3      	ldrb	r3, [r2, r3]
 8000928:	b25a      	sxtb	r2, r3
 800092a:	88bb      	ldrh	r3, [r7, #4]
 800092c:	f003 0307 	and.w	r3, r3, #7
 8000930:	2101      	movs	r1, #1
 8000932:	fa01 f303 	lsl.w	r3, r1, r3
 8000936:	b25b      	sxtb	r3, r3
 8000938:	4313      	orrs	r3, r2
 800093a:	b259      	sxtb	r1, r3
 800093c:	88fa      	ldrh	r2, [r7, #6]
 800093e:	4603      	mov	r3, r0
 8000940:	01db      	lsls	r3, r3, #7
 8000942:	4413      	add	r3, r2
 8000944:	b2c9      	uxtb	r1, r1
 8000946:	4a13      	ldr	r2, [pc, #76]	; (8000994 <SSD1306_DrawPixel+0xb8>)
 8000948:	54d1      	strb	r1, [r2, r3]
 800094a:	e01d      	b.n	8000988 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800094c:	88fa      	ldrh	r2, [r7, #6]
 800094e:	88bb      	ldrh	r3, [r7, #4]
 8000950:	08db      	lsrs	r3, r3, #3
 8000952:	b298      	uxth	r0, r3
 8000954:	4603      	mov	r3, r0
 8000956:	01db      	lsls	r3, r3, #7
 8000958:	4413      	add	r3, r2
 800095a:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <SSD1306_DrawPixel+0xb8>)
 800095c:	5cd3      	ldrb	r3, [r2, r3]
 800095e:	b25a      	sxtb	r2, r3
 8000960:	88bb      	ldrh	r3, [r7, #4]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	2101      	movs	r1, #1
 8000968:	fa01 f303 	lsl.w	r3, r1, r3
 800096c:	b25b      	sxtb	r3, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	b25b      	sxtb	r3, r3
 8000972:	4013      	ands	r3, r2
 8000974:	b259      	sxtb	r1, r3
 8000976:	88fa      	ldrh	r2, [r7, #6]
 8000978:	4603      	mov	r3, r0
 800097a:	01db      	lsls	r3, r3, #7
 800097c:	4413      	add	r3, r2
 800097e:	b2c9      	uxtb	r1, r1
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <SSD1306_DrawPixel+0xb8>)
 8000982:	54d1      	strb	r1, [r2, r3]
 8000984:	e000      	b.n	8000988 <SSD1306_DrawPixel+0xac>
		return;
 8000986:	bf00      	nop
	}
}
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	2000051c 	.word	0x2000051c
 8000994:	2000011c 	.word	0x2000011c

08000998 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	460a      	mov	r2, r1
 80009a2:	80fb      	strh	r3, [r7, #6]
 80009a4:	4613      	mov	r3, r2
 80009a6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80009a8:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <SSD1306_GotoXY+0x28>)
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80009ae:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <SSD1306_GotoXY+0x28>)
 80009b0:	88bb      	ldrh	r3, [r7, #4]
 80009b2:	8053      	strh	r3, [r2, #2]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	2000051c 	.word	0x2000051c

080009c4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	6039      	str	r1, [r7, #0]
 80009ce:	71fb      	strb	r3, [r7, #7]
 80009d0:	4613      	mov	r3, r2
 80009d2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80009d4:	4b3a      	ldr	r3, [pc, #232]	; (8000ac0 <SSD1306_Putc+0xfc>)
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	4413      	add	r3, r2
	if (
 80009e0:	2b7f      	cmp	r3, #127	; 0x7f
 80009e2:	dc07      	bgt.n	80009f4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80009e4:	4b36      	ldr	r3, [pc, #216]	; (8000ac0 <SSD1306_Putc+0xfc>)
 80009e6:	885b      	ldrh	r3, [r3, #2]
 80009e8:	461a      	mov	r2, r3
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	785b      	ldrb	r3, [r3, #1]
 80009ee:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80009f0:	2b3f      	cmp	r3, #63	; 0x3f
 80009f2:	dd01      	ble.n	80009f8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	e05e      	b.n	8000ab6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	e04b      	b.n	8000a96 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685a      	ldr	r2, [r3, #4]
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	3b20      	subs	r3, #32
 8000a06:	6839      	ldr	r1, [r7, #0]
 8000a08:	7849      	ldrb	r1, [r1, #1]
 8000a0a:	fb01 f303 	mul.w	r3, r1, r3
 8000a0e:	4619      	mov	r1, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	440b      	add	r3, r1
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	e030      	b.n	8000a84 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d010      	beq.n	8000a54 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000a32:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <SSD1306_Putc+0xfc>)
 8000a34:	881a      	ldrh	r2, [r3, #0]
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	4413      	add	r3, r2
 8000a3c:	b298      	uxth	r0, r3
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <SSD1306_Putc+0xfc>)
 8000a40:	885a      	ldrh	r2, [r3, #2]
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	4413      	add	r3, r2
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	79ba      	ldrb	r2, [r7, #6]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f7ff ff45 	bl	80008dc <SSD1306_DrawPixel>
 8000a52:	e014      	b.n	8000a7e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000a54:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <SSD1306_Putc+0xfc>)
 8000a56:	881a      	ldrh	r2, [r3, #0]
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	4413      	add	r3, r2
 8000a5e:	b298      	uxth	r0, r3
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <SSD1306_Putc+0xfc>)
 8000a62:	885a      	ldrh	r2, [r3, #2]
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	4413      	add	r3, r2
 8000a6a:	b299      	uxth	r1, r3
 8000a6c:	79bb      	ldrb	r3, [r7, #6]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	bf0c      	ite	eq
 8000a72:	2301      	moveq	r3, #1
 8000a74:	2300      	movne	r3, #0
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	461a      	mov	r2, r3
 8000a7a:	f7ff ff2f 	bl	80008dc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	3301      	adds	r3, #1
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d3c8      	bcc.n	8000a22 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	3301      	adds	r3, #1
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	785b      	ldrb	r3, [r3, #1]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d3ad      	bcc.n	80009fe <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <SSD1306_Putc+0xfc>)
 8000aa4:	881a      	ldrh	r2, [r3, #0]
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	4413      	add	r3, r2
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <SSD1306_Putc+0xfc>)
 8000ab2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2000051c 	.word	0x2000051c

08000ac4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000ad2:	e012      	b.n	8000afa <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	79fa      	ldrb	r2, [r7, #7]
 8000ada:	68b9      	ldr	r1, [r7, #8]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff71 	bl	80009c4 <SSD1306_Putc>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d002      	beq.n	8000af4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	e008      	b.n	8000b06 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	3301      	adds	r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d1e8      	bne.n	8000ad4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	781b      	ldrb	r3, [r3, #0]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000b12:	2000      	movs	r0, #0
 8000b14:	f7ff feca 	bl	80008ac <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000b18:	f7ff fe9a 	bl	8000850 <SSD1306_UpdateScreen>
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <ssd1306_I2C_Init+0x24>)
 8000b28:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b2a:	e002      	b.n	8000b32 <ssd1306_I2C_Init+0x12>
		p--;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1f9      	bne.n	8000b2c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	0003d090 	.word	0x0003d090

08000b48 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b0c7      	sub	sp, #284	; 0x11c
 8000b4c:	af02      	add	r7, sp, #8
 8000b4e:	4604      	mov	r4, r0
 8000b50:	4608      	mov	r0, r1
 8000b52:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000b56:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000b5a:	600a      	str	r2, [r1, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b62:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000b66:	4622      	mov	r2, r4
 8000b68:	701a      	strb	r2, [r3, #0]
 8000b6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b6e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000b72:	4602      	mov	r2, r0
 8000b74:	701a      	strb	r2, [r3, #0]
 8000b76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b7e:	460a      	mov	r2, r1
 8000b80:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000b82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000b8a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b8e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000b92:	7812      	ldrb	r2, [r2, #0]
 8000b94:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000b9c:	e015      	b.n	8000bca <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000b9e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ba2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ba6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000baa:	6812      	ldr	r2, [r2, #0]
 8000bac:	441a      	add	r2, r3
 8000bae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	7811      	ldrb	r1, [r2, #0]
 8000bb6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000bba:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000bbe:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000bc0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000bca:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000bd4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000bd8:	8812      	ldrh	r2, [r2, #0]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d8df      	bhi.n	8000b9e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8000bde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000be2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	b299      	uxth	r1, r3
 8000bea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000bee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	f107 020c 	add.w	r2, r7, #12
 8000bfc:	200a      	movs	r0, #10
 8000bfe:	9000      	str	r0, [sp, #0]
 8000c00:	4803      	ldr	r0, [pc, #12]	; (8000c10 <ssd1306_I2C_WriteMulti+0xc8>)
 8000c02:	f000 fdc9 	bl	8001798 <HAL_I2C_Master_Transmit>
}
 8000c06:	bf00      	nop
 8000c08:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd90      	pop	{r4, r7, pc}
 8000c10:	20000038 	.word	0x20000038

08000c14 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af02      	add	r7, sp, #8
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
 8000c1e:	460b      	mov	r3, r1
 8000c20:	71bb      	strb	r3, [r7, #6]
 8000c22:	4613      	mov	r3, r2
 8000c24:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000c26:	79bb      	ldrb	r3, [r7, #6]
 8000c28:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000c2a:	797b      	ldrb	r3, [r7, #5]
 8000c2c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	b299      	uxth	r1, r3
 8000c32:	f107 020c 	add.w	r2, r7, #12
 8000c36:	230a      	movs	r3, #10
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <ssd1306_I2C_Write+0x38>)
 8000c3e:	f000 fdab 	bl	8001798 <HAL_I2C_Master_Transmit>
}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000038 	.word	0x20000038

08000c50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_MspInit+0x40>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <HAL_MspInit+0x40>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6193      	str	r3, [r2, #24]
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <HAL_MspInit+0x40>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <HAL_MspInit+0x40>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <HAL_MspInit+0x40>)
 8000c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c78:	61d3      	str	r3, [r2, #28]
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_MspInit+0x40>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	40021000 	.word	0x40021000

08000c94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a16      	ldr	r2, [pc, #88]	; (8000d08 <HAL_I2C_MspInit+0x74>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d124      	bne.n	8000cfe <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_I2C_MspInit+0x78>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <HAL_I2C_MspInit+0x78>)
 8000cba:	f043 0308 	orr.w	r3, r3, #8
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_I2C_MspInit+0x78>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0308 	and.w	r3, r3, #8
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ccc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cd2:	2312      	movs	r3, #18
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480b      	ldr	r0, [pc, #44]	; (8000d10 <HAL_I2C_MspInit+0x7c>)
 8000ce2:	f000 fa61 	bl	80011a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_I2C_MspInit+0x78>)
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <HAL_I2C_MspInit+0x78>)
 8000cec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cf0:	61d3      	str	r3, [r2, #28]
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_I2C_MspInit+0x78>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3720      	adds	r7, #32
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40005800 	.word	0x40005800
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010c00 	.word	0x40010c00

08000d14 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d32:	d123      	bne.n	8000d7c <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d36:	69db      	ldr	r3, [r3, #28]
 8000d38:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	61d3      	str	r3, [r2, #28]
 8000d40:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d64:	2303      	movs	r3, #3
 8000d66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	4619      	mov	r1, r3
 8000d76:	4804      	ldr	r0, [pc, #16]	; (8000d88 <HAL_TIM_Encoder_MspInit+0x74>)
 8000d78:	f000 fa16 	bl	80011a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d7c:	bf00      	nop
 8000d7e:	3720      	adds	r7, #32
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40010800 	.word	0x40010800

08000d8c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <HAL_TIM_PWM_MspInit+0x34>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d10b      	bne.n	8000db6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_TIM_PWM_MspInit+0x38>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_TIM_PWM_MspInit+0x38>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	61d3      	str	r3, [r2, #28]
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_TIM_PWM_MspInit+0x38>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	40000400 	.word	0x40000400
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a0f      	ldr	r2, [pc, #60]	; (8000e20 <HAL_TIM_MspPostInit+0x58>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d117      	bne.n	8000e18 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_TIM_MspPostInit+0x5c>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <HAL_TIM_MspPostInit+0x5c>)
 8000dee:	f043 0304 	orr.w	r3, r3, #4
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <HAL_TIM_MspPostInit+0x5c>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0304 	and.w	r3, r3, #4
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e00:	2340      	movs	r3, #64	; 0x40
 8000e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4619      	mov	r1, r3
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <HAL_TIM_MspPostInit+0x60>)
 8000e14:	f000 f9c8 	bl	80011a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e18:	bf00      	nop
 8000e1a:	3720      	adds	r7, #32
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40000400 	.word	0x40000400
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010800 	.word	0x40010800

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <NMI_Handler+0x4>

08000e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <HardFault_Handler+0x4>

08000e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <MemManage_Handler+0x4>

08000e3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <BusFault_Handler+0x4>

08000e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <UsageFault_Handler+0x4>

08000e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr

08000e56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr

08000e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr

08000e6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e72:	f000 f875 	bl	8000f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
	...

08000e88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e88:	f7ff fff7 	bl	8000e7a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e8c:	480b      	ldr	r0, [pc, #44]	; (8000ebc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e8e:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e90:	4a0c      	ldr	r2, [pc, #48]	; (8000ec4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a09      	ldr	r2, [pc, #36]	; (8000ec8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ea4:	4c09      	ldr	r4, [pc, #36]	; (8000ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f002 faa7 	bl	8003404 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eb6:	f7ff f949 	bl	800014c <main>
  bx lr
 8000eba:	4770      	bx	lr
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000ec4:	08005590 	.word	0x08005590
  ldr r2, =_sbss
 8000ec8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000ecc:	20000528 	.word	0x20000528

08000ed0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC1_2_IRQHandler>
	...

08000ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HAL_Init+0x28>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a07      	ldr	r2, [pc, #28]	; (8000efc <HAL_Init+0x28>)
 8000ede:	f043 0310 	orr.w	r3, r3, #16
 8000ee2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f000 f92b 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eea:	200f      	movs	r0, #15
 8000eec:	f000 f808 	bl	8000f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef0:	f7ff feae 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40022000 	.word	0x40022000

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_InitTick+0x54>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x58>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f935 	bl	800118e <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00e      	b.n	8000f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d80a      	bhi.n	8000f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f3c:	f000 f90b 	bl	8001156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <HAL_InitTick+0x5c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000010 	.word	0x20000010
 8000f58:	20000018 	.word	0x20000018
 8000f5c:	20000014 	.word	0x20000014

08000f60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <HAL_IncTick+0x1c>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_IncTick+0x20>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a03      	ldr	r2, [pc, #12]	; (8000f80 <HAL_IncTick+0x20>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	20000018 	.word	0x20000018
 8000f80:	20000524 	.word	0x20000524

08000f84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return uwTick;
 8000f88:	4b02      	ldr	r3, [pc, #8]	; (8000f94 <HAL_GetTick+0x10>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	20000524 	.word	0x20000524

08000f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff fff0 	bl	8000f84 <HAL_GetTick>
 8000fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fb0:	d005      	beq.n	8000fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_Delay+0x44>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4413      	add	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fbe:	bf00      	nop
 8000fc0:	f7ff ffe0 	bl	8000f84 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d8f7      	bhi.n	8000fc0 <HAL_Delay+0x28>
  {
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000018 	.word	0x20000018

08000fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800100c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001012:	4a04      	ldr	r2, [pc, #16]	; (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	60d3      	str	r3, [r2, #12]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <__NVIC_GetPriorityGrouping+0x18>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	f003 0307 	and.w	r3, r3, #7
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db0a      	blt.n	800106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	490c      	ldr	r1, [pc, #48]	; (8001090 <__NVIC_SetPriority+0x4c>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106c:	e00a      	b.n	8001084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4908      	ldr	r1, [pc, #32]	; (8001094 <__NVIC_SetPriority+0x50>)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	3b04      	subs	r3, #4
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	440b      	add	r3, r1
 8001082:	761a      	strb	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43da      	mvns	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	401a      	ands	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	4313      	orrs	r3, r2
         );
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3724      	adds	r7, #36	; 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800110c:	d301      	bcc.n	8001112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110e:	2301      	movs	r3, #1
 8001110:	e00f      	b.n	8001132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <SysTick_Config+0x40>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111a:	210f      	movs	r1, #15
 800111c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001120:	f7ff ff90 	bl	8001044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <SysTick_Config+0x40>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <SysTick_Config+0x40>)
 800112c:	2207      	movs	r2, #7
 800112e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	e000e010 	.word	0xe000e010

08001140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff49 	bl	8000fe0 <__NVIC_SetPriorityGrouping>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001168:	f7ff ff5e 	bl	8001028 <__NVIC_GetPriorityGrouping>
 800116c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	6978      	ldr	r0, [r7, #20]
 8001174:	f7ff ff90 	bl	8001098 <NVIC_EncodePriority>
 8001178:	4602      	mov	r2, r0
 800117a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff5f 	bl	8001044 <__NVIC_SetPriority>
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ffb0 	bl	80010fc <SysTick_Config>
 800119c:	4603      	mov	r3, r0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b08b      	sub	sp, #44	; 0x2c
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ba:	e169      	b.n	8001490 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011bc:	2201      	movs	r2, #1
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	69fa      	ldr	r2, [r7, #28]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	f040 8158 	bne.w	800148a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	4a9a      	ldr	r2, [pc, #616]	; (8001448 <HAL_GPIO_Init+0x2a0>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d05e      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
 80011e4:	4a98      	ldr	r2, [pc, #608]	; (8001448 <HAL_GPIO_Init+0x2a0>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d875      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 80011ea:	4a98      	ldr	r2, [pc, #608]	; (800144c <HAL_GPIO_Init+0x2a4>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d058      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
 80011f0:	4a96      	ldr	r2, [pc, #600]	; (800144c <HAL_GPIO_Init+0x2a4>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d86f      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 80011f6:	4a96      	ldr	r2, [pc, #600]	; (8001450 <HAL_GPIO_Init+0x2a8>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d052      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
 80011fc:	4a94      	ldr	r2, [pc, #592]	; (8001450 <HAL_GPIO_Init+0x2a8>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d869      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 8001202:	4a94      	ldr	r2, [pc, #592]	; (8001454 <HAL_GPIO_Init+0x2ac>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d04c      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
 8001208:	4a92      	ldr	r2, [pc, #584]	; (8001454 <HAL_GPIO_Init+0x2ac>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d863      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 800120e:	4a92      	ldr	r2, [pc, #584]	; (8001458 <HAL_GPIO_Init+0x2b0>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d046      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
 8001214:	4a90      	ldr	r2, [pc, #576]	; (8001458 <HAL_GPIO_Init+0x2b0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d85d      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 800121a:	2b12      	cmp	r3, #18
 800121c:	d82a      	bhi.n	8001274 <HAL_GPIO_Init+0xcc>
 800121e:	2b12      	cmp	r3, #18
 8001220:	d859      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 8001222:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <HAL_GPIO_Init+0x80>)
 8001224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001228:	080012a3 	.word	0x080012a3
 800122c:	0800127d 	.word	0x0800127d
 8001230:	0800128f 	.word	0x0800128f
 8001234:	080012d1 	.word	0x080012d1
 8001238:	080012d7 	.word	0x080012d7
 800123c:	080012d7 	.word	0x080012d7
 8001240:	080012d7 	.word	0x080012d7
 8001244:	080012d7 	.word	0x080012d7
 8001248:	080012d7 	.word	0x080012d7
 800124c:	080012d7 	.word	0x080012d7
 8001250:	080012d7 	.word	0x080012d7
 8001254:	080012d7 	.word	0x080012d7
 8001258:	080012d7 	.word	0x080012d7
 800125c:	080012d7 	.word	0x080012d7
 8001260:	080012d7 	.word	0x080012d7
 8001264:	080012d7 	.word	0x080012d7
 8001268:	080012d7 	.word	0x080012d7
 800126c:	08001285 	.word	0x08001285
 8001270:	08001299 	.word	0x08001299
 8001274:	4a79      	ldr	r2, [pc, #484]	; (800145c <HAL_GPIO_Init+0x2b4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d013      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800127a:	e02c      	b.n	80012d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	623b      	str	r3, [r7, #32]
          break;
 8001282:	e029      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	3304      	adds	r3, #4
 800128a:	623b      	str	r3, [r7, #32]
          break;
 800128c:	e024      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	3308      	adds	r3, #8
 8001294:	623b      	str	r3, [r7, #32]
          break;
 8001296:	e01f      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	330c      	adds	r3, #12
 800129e:	623b      	str	r3, [r7, #32]
          break;
 80012a0:	e01a      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d102      	bne.n	80012b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012aa:	2304      	movs	r3, #4
 80012ac:	623b      	str	r3, [r7, #32]
          break;
 80012ae:	e013      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d105      	bne.n	80012c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012b8:	2308      	movs	r3, #8
 80012ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69fa      	ldr	r2, [r7, #28]
 80012c0:	611a      	str	r2, [r3, #16]
          break;
 80012c2:	e009      	b.n	80012d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012c4:	2308      	movs	r3, #8
 80012c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69fa      	ldr	r2, [r7, #28]
 80012cc:	615a      	str	r2, [r3, #20]
          break;
 80012ce:	e003      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
          break;
 80012d4:	e000      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          break;
 80012d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2bff      	cmp	r3, #255	; 0xff
 80012dc:	d801      	bhi.n	80012e2 <HAL_GPIO_Init+0x13a>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	e001      	b.n	80012e6 <HAL_GPIO_Init+0x13e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3304      	adds	r3, #4
 80012e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	2bff      	cmp	r3, #255	; 0xff
 80012ec:	d802      	bhi.n	80012f4 <HAL_GPIO_Init+0x14c>
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	e002      	b.n	80012fa <HAL_GPIO_Init+0x152>
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	3b08      	subs	r3, #8
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	210f      	movs	r1, #15
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	401a      	ands	r2, r3
 800130c:	6a39      	ldr	r1, [r7, #32]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	431a      	orrs	r2, r3
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	f000 80b1 	beq.w	800148a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001328:	4b4d      	ldr	r3, [pc, #308]	; (8001460 <HAL_GPIO_Init+0x2b8>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a4c      	ldr	r2, [pc, #304]	; (8001460 <HAL_GPIO_Init+0x2b8>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b4a      	ldr	r3, [pc, #296]	; (8001460 <HAL_GPIO_Init+0x2b8>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001340:	4a48      	ldr	r2, [pc, #288]	; (8001464 <HAL_GPIO_Init+0x2bc>)
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	089b      	lsrs	r3, r3, #2
 8001346:	3302      	adds	r3, #2
 8001348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	220f      	movs	r2, #15
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	4013      	ands	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a40      	ldr	r2, [pc, #256]	; (8001468 <HAL_GPIO_Init+0x2c0>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d013      	beq.n	8001394 <HAL_GPIO_Init+0x1ec>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a3f      	ldr	r2, [pc, #252]	; (800146c <HAL_GPIO_Init+0x2c4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d00d      	beq.n	8001390 <HAL_GPIO_Init+0x1e8>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a3e      	ldr	r2, [pc, #248]	; (8001470 <HAL_GPIO_Init+0x2c8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d007      	beq.n	800138c <HAL_GPIO_Init+0x1e4>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a3d      	ldr	r2, [pc, #244]	; (8001474 <HAL_GPIO_Init+0x2cc>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d101      	bne.n	8001388 <HAL_GPIO_Init+0x1e0>
 8001384:	2303      	movs	r3, #3
 8001386:	e006      	b.n	8001396 <HAL_GPIO_Init+0x1ee>
 8001388:	2304      	movs	r3, #4
 800138a:	e004      	b.n	8001396 <HAL_GPIO_Init+0x1ee>
 800138c:	2302      	movs	r3, #2
 800138e:	e002      	b.n	8001396 <HAL_GPIO_Init+0x1ee>
 8001390:	2301      	movs	r3, #1
 8001392:	e000      	b.n	8001396 <HAL_GPIO_Init+0x1ee>
 8001394:	2300      	movs	r3, #0
 8001396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001398:	f002 0203 	and.w	r2, r2, #3
 800139c:	0092      	lsls	r2, r2, #2
 800139e:	4093      	lsls	r3, r2
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013a6:	492f      	ldr	r1, [pc, #188]	; (8001464 <HAL_GPIO_Init+0x2bc>)
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3302      	adds	r3, #2
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d006      	beq.n	80013ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013c0:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	492c      	ldr	r1, [pc, #176]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	608b      	str	r3, [r1, #8]
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013ce:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	4928      	ldr	r1, [pc, #160]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 80013d8:	4013      	ands	r3, r2
 80013da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d006      	beq.n	80013f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013e8:	4b23      	ldr	r3, [pc, #140]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	4922      	ldr	r1, [pc, #136]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	60cb      	str	r3, [r1, #12]
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	491e      	ldr	r1, [pc, #120]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 8001400:	4013      	ands	r3, r2
 8001402:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d006      	beq.n	800141e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	4918      	ldr	r1, [pc, #96]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	604b      	str	r3, [r1, #4]
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	43db      	mvns	r3, r3
 8001426:	4914      	ldr	r1, [pc, #80]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 8001428:	4013      	ands	r3, r2
 800142a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d021      	beq.n	800147c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	490e      	ldr	r1, [pc, #56]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	600b      	str	r3, [r1, #0]
 8001444:	e021      	b.n	800148a <HAL_GPIO_Init+0x2e2>
 8001446:	bf00      	nop
 8001448:	10320000 	.word	0x10320000
 800144c:	10310000 	.word	0x10310000
 8001450:	10220000 	.word	0x10220000
 8001454:	10210000 	.word	0x10210000
 8001458:	10120000 	.word	0x10120000
 800145c:	10110000 	.word	0x10110000
 8001460:	40021000 	.word	0x40021000
 8001464:	40010000 	.word	0x40010000
 8001468:	40010800 	.word	0x40010800
 800146c:	40010c00 	.word	0x40010c00
 8001470:	40011000 	.word	0x40011000
 8001474:	40011400 	.word	0x40011400
 8001478:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <HAL_GPIO_Init+0x304>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	43db      	mvns	r3, r3
 8001484:	4909      	ldr	r1, [pc, #36]	; (80014ac <HAL_GPIO_Init+0x304>)
 8001486:	4013      	ands	r3, r2
 8001488:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	3301      	adds	r3, #1
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	fa22 f303 	lsr.w	r3, r2, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	f47f ae8e 	bne.w	80011bc <HAL_GPIO_Init+0x14>
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	372c      	adds	r7, #44	; 0x2c
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	40010400 	.word	0x40010400

080014b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	4013      	ands	r3, r2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d002      	beq.n	80014ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014c8:	2301      	movs	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e001      	b.n	80014d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr

080014de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	807b      	strh	r3, [r7, #2]
 80014ea:	4613      	mov	r3, r2
 80014ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014ee:	787b      	ldrb	r3, [r7, #1]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f4:	887a      	ldrh	r2, [r7, #2]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014fa:	e003      	b.n	8001504 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014fc:	887b      	ldrh	r3, [r7, #2]
 80014fe:	041a      	lsls	r2, r3, #16
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	611a      	str	r2, [r3, #16]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
	...

08001510 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e12b      	b.n	800177a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d106      	bne.n	800153c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fbac 	bl	8000c94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2224      	movs	r2, #36	; 0x24
 8001540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0201 	bic.w	r2, r2, #1
 8001552:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001562:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001572:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001574:	f001 f960 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 8001578:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	4a81      	ldr	r2, [pc, #516]	; (8001784 <HAL_I2C_Init+0x274>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d807      	bhi.n	8001594 <HAL_I2C_Init+0x84>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4a80      	ldr	r2, [pc, #512]	; (8001788 <HAL_I2C_Init+0x278>)
 8001588:	4293      	cmp	r3, r2
 800158a:	bf94      	ite	ls
 800158c:	2301      	movls	r3, #1
 800158e:	2300      	movhi	r3, #0
 8001590:	b2db      	uxtb	r3, r3
 8001592:	e006      	b.n	80015a2 <HAL_I2C_Init+0x92>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4a7d      	ldr	r2, [pc, #500]	; (800178c <HAL_I2C_Init+0x27c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	bf94      	ite	ls
 800159c:	2301      	movls	r3, #1
 800159e:	2300      	movhi	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0e7      	b.n	800177a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4a78      	ldr	r2, [pc, #480]	; (8001790 <HAL_I2C_Init+0x280>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0c9b      	lsrs	r3, r3, #18
 80015b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	4a6a      	ldr	r2, [pc, #424]	; (8001784 <HAL_I2C_Init+0x274>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d802      	bhi.n	80015e4 <HAL_I2C_Init+0xd4>
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	3301      	adds	r3, #1
 80015e2:	e009      	b.n	80015f8 <HAL_I2C_Init+0xe8>
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015ea:	fb02 f303 	mul.w	r3, r2, r3
 80015ee:	4a69      	ldr	r2, [pc, #420]	; (8001794 <HAL_I2C_Init+0x284>)
 80015f0:	fba2 2303 	umull	r2, r3, r2, r3
 80015f4:	099b      	lsrs	r3, r3, #6
 80015f6:	3301      	adds	r3, #1
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	430b      	orrs	r3, r1
 80015fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800160a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	495c      	ldr	r1, [pc, #368]	; (8001784 <HAL_I2C_Init+0x274>)
 8001614:	428b      	cmp	r3, r1
 8001616:	d819      	bhi.n	800164c <HAL_I2C_Init+0x13c>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	1e59      	subs	r1, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	fbb1 f3f3 	udiv	r3, r1, r3
 8001626:	1c59      	adds	r1, r3, #1
 8001628:	f640 73fc 	movw	r3, #4092	; 0xffc
 800162c:	400b      	ands	r3, r1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00a      	beq.n	8001648 <HAL_I2C_Init+0x138>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1e59      	subs	r1, r3, #1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001640:	3301      	adds	r3, #1
 8001642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001646:	e051      	b.n	80016ec <HAL_I2C_Init+0x1dc>
 8001648:	2304      	movs	r3, #4
 800164a:	e04f      	b.n	80016ec <HAL_I2C_Init+0x1dc>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d111      	bne.n	8001678 <HAL_I2C_Init+0x168>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	1e58      	subs	r0, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6859      	ldr	r1, [r3, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	440b      	add	r3, r1
 8001662:	fbb0 f3f3 	udiv	r3, r0, r3
 8001666:	3301      	adds	r3, #1
 8001668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800166c:	2b00      	cmp	r3, #0
 800166e:	bf0c      	ite	eq
 8001670:	2301      	moveq	r3, #1
 8001672:	2300      	movne	r3, #0
 8001674:	b2db      	uxtb	r3, r3
 8001676:	e012      	b.n	800169e <HAL_I2C_Init+0x18e>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1e58      	subs	r0, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6859      	ldr	r1, [r3, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	0099      	lsls	r1, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	fbb0 f3f3 	udiv	r3, r0, r3
 800168e:	3301      	adds	r3, #1
 8001690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf0c      	ite	eq
 8001698:	2301      	moveq	r3, #1
 800169a:	2300      	movne	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_I2C_Init+0x196>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e022      	b.n	80016ec <HAL_I2C_Init+0x1dc>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10e      	bne.n	80016cc <HAL_I2C_Init+0x1bc>
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1e58      	subs	r0, r3, #1
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6859      	ldr	r1, [r3, #4]
 80016b6:	460b      	mov	r3, r1
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	440b      	add	r3, r1
 80016bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c0:	3301      	adds	r3, #1
 80016c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ca:	e00f      	b.n	80016ec <HAL_I2C_Init+0x1dc>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	1e58      	subs	r0, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6859      	ldr	r1, [r3, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	0099      	lsls	r1, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	fbb0 f3f3 	udiv	r3, r0, r3
 80016e2:	3301      	adds	r3, #1
 80016e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	6809      	ldr	r1, [r1, #0]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69da      	ldr	r2, [r3, #28]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800171a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6911      	ldr	r1, [r2, #16]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68d2      	ldr	r2, [r2, #12]
 8001726:	4311      	orrs	r1, r2
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	430b      	orrs	r3, r1
 800172e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695a      	ldr	r2, [r3, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0201 	orr.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2220      	movs	r2, #32
 8001766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	000186a0 	.word	0x000186a0
 8001788:	001e847f 	.word	0x001e847f
 800178c:	003d08ff 	.word	0x003d08ff
 8001790:	431bde83 	.word	0x431bde83
 8001794:	10624dd3 	.word	0x10624dd3

08001798 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af02      	add	r7, sp, #8
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	461a      	mov	r2, r3
 80017a4:	460b      	mov	r3, r1
 80017a6:	817b      	strh	r3, [r7, #10]
 80017a8:	4613      	mov	r3, r2
 80017aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017ac:	f7ff fbea 	bl	8000f84 <HAL_GetTick>
 80017b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b20      	cmp	r3, #32
 80017bc:	f040 80e0 	bne.w	8001980 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2319      	movs	r3, #25
 80017c6:	2201      	movs	r2, #1
 80017c8:	4970      	ldr	r1, [pc, #448]	; (800198c <HAL_I2C_Master_Transmit+0x1f4>)
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 fa92 	bl	8001cf4 <I2C_WaitOnFlagUntilTimeout>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80017d6:	2302      	movs	r3, #2
 80017d8:	e0d3      	b.n	8001982 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d101      	bne.n	80017e8 <HAL_I2C_Master_Transmit+0x50>
 80017e4:	2302      	movs	r3, #2
 80017e6:	e0cc      	b.n	8001982 <HAL_I2C_Master_Transmit+0x1ea>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d007      	beq.n	800180e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f042 0201 	orr.w	r2, r2, #1
 800180c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800181c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2221      	movs	r2, #33	; 0x21
 8001822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2210      	movs	r2, #16
 800182a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	893a      	ldrh	r2, [r7, #8]
 800183e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001844:	b29a      	uxth	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4a50      	ldr	r2, [pc, #320]	; (8001990 <HAL_I2C_Master_Transmit+0x1f8>)
 800184e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001850:	8979      	ldrh	r1, [r7, #10]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	6a3a      	ldr	r2, [r7, #32]
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 f9ca 	bl	8001bf0 <I2C_MasterRequestWrite>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e08d      	b.n	8001982 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800187c:	e066      	b.n	800194c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	6a39      	ldr	r1, [r7, #32]
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 fb50 	bl	8001f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00d      	beq.n	80018aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	2b04      	cmp	r3, #4
 8001894:	d107      	bne.n	80018a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e06b      	b.n	8001982 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	781a      	ldrb	r2, [r3, #0]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	3b01      	subs	r3, #1
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d2:	3b01      	subs	r3, #1
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d11b      	bne.n	8001920 <HAL_I2C_Master_Transmit+0x188>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d017      	beq.n	8001920 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800190a:	b29b      	uxth	r3, r3
 800190c:	3b01      	subs	r3, #1
 800190e:	b29a      	uxth	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001918:	3b01      	subs	r3, #1
 800191a:	b29a      	uxth	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	6a39      	ldr	r1, [r7, #32]
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f000 fb47 	bl	8001fb8 <I2C_WaitOnBTFFlagUntilTimeout>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00d      	beq.n	800194c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	2b04      	cmp	r3, #4
 8001936:	d107      	bne.n	8001948 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001946:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e01a      	b.n	8001982 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001950:	2b00      	cmp	r3, #0
 8001952:	d194      	bne.n	800187e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2220      	movs	r2, #32
 8001968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	e000      	b.n	8001982 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001980:	2302      	movs	r3, #2
  }
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	00100002 	.word	0x00100002
 8001990:	ffff0000 	.word	0xffff0000

08001994 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	; 0x28
 8001998:	af02      	add	r7, sp, #8
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	460b      	mov	r3, r1
 80019a2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80019a4:	f7ff faee 	bl	8000f84 <HAL_GetTick>
 80019a8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b20      	cmp	r3, #32
 80019b8:	f040 8111 	bne.w	8001bde <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	2319      	movs	r3, #25
 80019c2:	2201      	movs	r2, #1
 80019c4:	4988      	ldr	r1, [pc, #544]	; (8001be8 <HAL_I2C_IsDeviceReady+0x254>)
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 f994 	bl	8001cf4 <I2C_WaitOnFlagUntilTimeout>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80019d2:	2302      	movs	r3, #2
 80019d4:	e104      	b.n	8001be0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <HAL_I2C_IsDeviceReady+0x50>
 80019e0:	2302      	movs	r3, #2
 80019e2:	e0fd      	b.n	8001be0 <HAL_I2C_IsDeviceReady+0x24c>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d007      	beq.n	8001a0a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 0201 	orr.w	r2, r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2224      	movs	r2, #36	; 0x24
 8001a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4a70      	ldr	r2, [pc, #448]	; (8001bec <HAL_I2C_IsDeviceReady+0x258>)
 8001a2c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a3c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 f952 	bl	8001cf4 <I2C_WaitOnFlagUntilTimeout>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00d      	beq.n	8001a72 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a64:	d103      	bne.n	8001a6e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e0b6      	b.n	8001be0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a72:	897b      	ldrh	r3, [r7, #10]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a80:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001a82:	f7ff fa7f 	bl	8000f84 <HAL_GetTick>
 8001a86:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	bf0c      	ite	eq
 8001a96:	2301      	moveq	r3, #1
 8001a98:	2300      	movne	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aac:	bf0c      	ite	eq
 8001aae:	2301      	moveq	r3, #1
 8001ab0:	2300      	movne	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ab6:	e025      	b.n	8001b04 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ab8:	f7ff fa64 	bl	8000f84 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d302      	bcc.n	8001ace <HAL_I2C_IsDeviceReady+0x13a>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d103      	bne.n	8001ad6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	22a0      	movs	r2, #160	; 0xa0
 8001ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2301      	moveq	r3, #1
 8001ae6:	2300      	movne	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001afa:	bf0c      	ite	eq
 8001afc:	2301      	moveq	r3, #1
 8001afe:	2300      	movne	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2ba0      	cmp	r3, #160	; 0xa0
 8001b0e:	d005      	beq.n	8001b1c <HAL_I2C_IsDeviceReady+0x188>
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d102      	bne.n	8001b1c <HAL_I2C_IsDeviceReady+0x188>
 8001b16:	7dbb      	ldrb	r3, [r7, #22]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0cd      	beq.n	8001ab8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d129      	bne.n	8001b86 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b40:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2319      	movs	r3, #25
 8001b5e:	2201      	movs	r2, #1
 8001b60:	4921      	ldr	r1, [pc, #132]	; (8001be8 <HAL_I2C_IsDeviceReady+0x254>)
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f000 f8c6 	bl	8001cf4 <I2C_WaitOnFlagUntilTimeout>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e036      	b.n	8001be0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2220      	movs	r2, #32
 8001b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e02c      	b.n	8001be0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b94:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b9e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	2319      	movs	r3, #25
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	490f      	ldr	r1, [pc, #60]	; (8001be8 <HAL_I2C_IsDeviceReady+0x254>)
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 f8a2 	bl	8001cf4 <I2C_WaitOnFlagUntilTimeout>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e012      	b.n	8001be0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	f4ff af32 	bcc.w	8001a2e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2220      	movs	r2, #32
 8001bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001bde:	2302      	movs	r3, #2
  }
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	00100002 	.word	0x00100002
 8001bec:	ffff0000 	.word	0xffff0000

08001bf0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d006      	beq.n	8001c1a <I2C_MasterRequestWrite+0x2a>
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d003      	beq.n	8001c1a <I2C_MasterRequestWrite+0x2a>
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c18:	d108      	bne.n	8001c2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	e00b      	b.n	8001c44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	2b12      	cmp	r3, #18
 8001c32:	d107      	bne.n	8001c44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f000 f84f 	bl	8001cf4 <I2C_WaitOnFlagUntilTimeout>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00d      	beq.n	8001c78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c6a:	d103      	bne.n	8001c74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e035      	b.n	8001ce4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c80:	d108      	bne.n	8001c94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c82:	897b      	ldrh	r3, [r7, #10]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c90:	611a      	str	r2, [r3, #16]
 8001c92:	e01b      	b.n	8001ccc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c94:	897b      	ldrh	r3, [r7, #10]
 8001c96:	11db      	asrs	r3, r3, #7
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	f003 0306 	and.w	r3, r3, #6
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	f063 030f 	orn	r3, r3, #15
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	490e      	ldr	r1, [pc, #56]	; (8001cec <I2C_MasterRequestWrite+0xfc>)
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f898 	bl	8001de8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e010      	b.n	8001ce4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001cc2:	897b      	ldrh	r3, [r7, #10]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	4907      	ldr	r1, [pc, #28]	; (8001cf0 <I2C_MasterRequestWrite+0x100>)
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 f888 	bl	8001de8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	00010008 	.word	0x00010008
 8001cf0:	00010002 	.word	0x00010002

08001cf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	4613      	mov	r3, r2
 8001d02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d04:	e048      	b.n	8001d98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d0c:	d044      	beq.n	8001d98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d0e:	f7ff f939 	bl	8000f84 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d302      	bcc.n	8001d24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d139      	bne.n	8001d98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	0c1b      	lsrs	r3, r3, #16
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d10d      	bne.n	8001d4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	43da      	mvns	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf0c      	ite	eq
 8001d40:	2301      	moveq	r3, #1
 8001d42:	2300      	movne	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	e00c      	b.n	8001d64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	43da      	mvns	r2, r3
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	4013      	ands	r3, r2
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	bf0c      	ite	eq
 8001d5c:	2301      	moveq	r3, #1
 8001d5e:	2300      	movne	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d116      	bne.n	8001d98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2220      	movs	r2, #32
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f043 0220 	orr.w	r2, r3, #32
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e023      	b.n	8001de0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	0c1b      	lsrs	r3, r3, #16
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d10d      	bne.n	8001dbe <I2C_WaitOnFlagUntilTimeout+0xca>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	43da      	mvns	r2, r3
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	4013      	ands	r3, r2
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bf0c      	ite	eq
 8001db4:	2301      	moveq	r3, #1
 8001db6:	2300      	movne	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	461a      	mov	r2, r3
 8001dbc:	e00c      	b.n	8001dd8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	43da      	mvns	r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bf0c      	ite	eq
 8001dd0:	2301      	moveq	r3, #1
 8001dd2:	2300      	movne	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d093      	beq.n	8001d06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001df6:	e071      	b.n	8001edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e06:	d123      	bne.n	8001e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	f043 0204 	orr.w	r2, r3, #4
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e067      	b.n	8001f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e56:	d041      	beq.n	8001edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e58:	f7ff f894 	bl	8000f84 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d302      	bcc.n	8001e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d136      	bne.n	8001edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	0c1b      	lsrs	r3, r3, #16
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d10c      	bne.n	8001e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	4013      	ands	r3, r2
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	bf14      	ite	ne
 8001e8a:	2301      	movne	r3, #1
 8001e8c:	2300      	moveq	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	e00b      	b.n	8001eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	43da      	mvns	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bf14      	ite	ne
 8001ea4:	2301      	movne	r3, #1
 8001ea6:	2300      	moveq	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d016      	beq.n	8001edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f043 0220 	orr.w	r2, r3, #32
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e021      	b.n	8001f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	0c1b      	lsrs	r3, r3, #16
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d10c      	bne.n	8001f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	43da      	mvns	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	bf14      	ite	ne
 8001ef8:	2301      	movne	r3, #1
 8001efa:	2300      	moveq	r3, #0
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	e00b      	b.n	8001f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	43da      	mvns	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	bf14      	ite	ne
 8001f12:	2301      	movne	r3, #1
 8001f14:	2300      	moveq	r3, #0
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f47f af6d 	bne.w	8001df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f34:	e034      	b.n	8001fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f886 	bl	8002048 <I2C_IsAcknowledgeFailed>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e034      	b.n	8001fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f4c:	d028      	beq.n	8001fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4e:	f7ff f819 	bl	8000f84 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d302      	bcc.n	8001f64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d11d      	bne.n	8001fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	2b80      	cmp	r3, #128	; 0x80
 8001f70:	d016      	beq.n	8001fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	f043 0220 	orr.w	r2, r3, #32
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e007      	b.n	8001fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001faa:	2b80      	cmp	r3, #128	; 0x80
 8001fac:	d1c3      	bne.n	8001f36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fc4:	e034      	b.n	8002030 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f83e 	bl	8002048 <I2C_IsAcknowledgeFailed>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e034      	b.n	8002040 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fdc:	d028      	beq.n	8002030 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fde:	f7fe ffd1 	bl	8000f84 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d302      	bcc.n	8001ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d11d      	bne.n	8002030 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d016      	beq.n	8002030 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	f043 0220 	orr.w	r2, r3, #32
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e007      	b.n	8002040 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	2b04      	cmp	r3, #4
 800203c:	d1c3      	bne.n	8001fc6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800205e:	d11b      	bne.n	8002098 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002068:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2220      	movs	r2, #32
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f043 0204 	orr.w	r2, r3, #4
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e272      	b.n	800259c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 8087 	beq.w	80021d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c4:	4b92      	ldr	r3, [pc, #584]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 030c 	and.w	r3, r3, #12
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d00c      	beq.n	80020ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020d0:	4b8f      	ldr	r3, [pc, #572]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d112      	bne.n	8002102 <HAL_RCC_OscConfig+0x5e>
 80020dc:	4b8c      	ldr	r3, [pc, #560]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e8:	d10b      	bne.n	8002102 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ea:	4b89      	ldr	r3, [pc, #548]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d06c      	beq.n	80021d0 <HAL_RCC_OscConfig+0x12c>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d168      	bne.n	80021d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e24c      	b.n	800259c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800210a:	d106      	bne.n	800211a <HAL_RCC_OscConfig+0x76>
 800210c:	4b80      	ldr	r3, [pc, #512]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a7f      	ldr	r2, [pc, #508]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	e02e      	b.n	8002178 <HAL_RCC_OscConfig+0xd4>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0x98>
 8002122:	4b7b      	ldr	r3, [pc, #492]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a7a      	ldr	r2, [pc, #488]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	4b78      	ldr	r3, [pc, #480]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a77      	ldr	r2, [pc, #476]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	e01d      	b.n	8002178 <HAL_RCC_OscConfig+0xd4>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002144:	d10c      	bne.n	8002160 <HAL_RCC_OscConfig+0xbc>
 8002146:	4b72      	ldr	r3, [pc, #456]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a71      	ldr	r2, [pc, #452]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800214c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	4b6f      	ldr	r3, [pc, #444]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a6e      	ldr	r2, [pc, #440]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	e00b      	b.n	8002178 <HAL_RCC_OscConfig+0xd4>
 8002160:	4b6b      	ldr	r3, [pc, #428]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a6a      	ldr	r2, [pc, #424]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	4b68      	ldr	r3, [pc, #416]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a67      	ldr	r2, [pc, #412]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002176:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d013      	beq.n	80021a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7fe ff00 	bl	8000f84 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002188:	f7fe fefc 	bl	8000f84 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	; 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e200      	b.n	800259c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219a:	4b5d      	ldr	r3, [pc, #372]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0xe4>
 80021a6:	e014      	b.n	80021d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7fe feec 	bl	8000f84 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b0:	f7fe fee8 	bl	8000f84 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	; 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e1ec      	b.n	800259c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c2:	4b53      	ldr	r3, [pc, #332]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x10c>
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d063      	beq.n	80022a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021de:	4b4c      	ldr	r3, [pc, #304]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00b      	beq.n	8002202 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021ea:	4b49      	ldr	r3, [pc, #292]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d11c      	bne.n	8002230 <HAL_RCC_OscConfig+0x18c>
 80021f6:	4b46      	ldr	r3, [pc, #280]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d116      	bne.n	8002230 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002202:	4b43      	ldr	r3, [pc, #268]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d005      	beq.n	800221a <HAL_RCC_OscConfig+0x176>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d001      	beq.n	800221a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e1c0      	b.n	800259c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221a:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4939      	ldr	r1, [pc, #228]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800222a:	4313      	orrs	r3, r2
 800222c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222e:	e03a      	b.n	80022a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d020      	beq.n	800227a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002238:	4b36      	ldr	r3, [pc, #216]	; (8002314 <HAL_RCC_OscConfig+0x270>)
 800223a:	2201      	movs	r2, #1
 800223c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223e:	f7fe fea1 	bl	8000f84 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002246:	f7fe fe9d 	bl	8000f84 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e1a1      	b.n	800259c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002258:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002264:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4927      	ldr	r1, [pc, #156]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002274:	4313      	orrs	r3, r2
 8002276:	600b      	str	r3, [r1, #0]
 8002278:	e015      	b.n	80022a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800227a:	4b26      	ldr	r3, [pc, #152]	; (8002314 <HAL_RCC_OscConfig+0x270>)
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7fe fe80 	bl	8000f84 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002288:	f7fe fe7c 	bl	8000f84 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e180      	b.n	800259c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229a:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d03a      	beq.n	8002328 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d019      	beq.n	80022ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ba:	4b17      	ldr	r3, [pc, #92]	; (8002318 <HAL_RCC_OscConfig+0x274>)
 80022bc:	2201      	movs	r2, #1
 80022be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c0:	f7fe fe60 	bl	8000f84 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c8:	f7fe fe5c 	bl	8000f84 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e160      	b.n	800259c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022e6:	2001      	movs	r0, #1
 80022e8:	f000 faba 	bl	8002860 <RCC_Delay>
 80022ec:	e01c      	b.n	8002328 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_RCC_OscConfig+0x274>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f4:	f7fe fe46 	bl	8000f84 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fa:	e00f      	b.n	800231c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022fc:	f7fe fe42 	bl	8000f84 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d908      	bls.n	800231c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e146      	b.n	800259c <HAL_RCC_OscConfig+0x4f8>
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000
 8002314:	42420000 	.word	0x42420000
 8002318:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800231c:	4b92      	ldr	r3, [pc, #584]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1e9      	bne.n	80022fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 80a6 	beq.w	8002482 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002336:	2300      	movs	r3, #0
 8002338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800233a:	4b8b      	ldr	r3, [pc, #556]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10d      	bne.n	8002362 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002346:	4b88      	ldr	r3, [pc, #544]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	4a87      	ldr	r2, [pc, #540]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002350:	61d3      	str	r3, [r2, #28]
 8002352:	4b85      	ldr	r3, [pc, #532]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235e:	2301      	movs	r3, #1
 8002360:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002362:	4b82      	ldr	r3, [pc, #520]	; (800256c <HAL_RCC_OscConfig+0x4c8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d118      	bne.n	80023a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236e:	4b7f      	ldr	r3, [pc, #508]	; (800256c <HAL_RCC_OscConfig+0x4c8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a7e      	ldr	r2, [pc, #504]	; (800256c <HAL_RCC_OscConfig+0x4c8>)
 8002374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237a:	f7fe fe03 	bl	8000f84 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002382:	f7fe fdff 	bl	8000f84 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b64      	cmp	r3, #100	; 0x64
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e103      	b.n	800259c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	4b75      	ldr	r3, [pc, #468]	; (800256c <HAL_RCC_OscConfig+0x4c8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d106      	bne.n	80023b6 <HAL_RCC_OscConfig+0x312>
 80023a8:	4b6f      	ldr	r3, [pc, #444]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	4a6e      	ldr	r2, [pc, #440]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6213      	str	r3, [r2, #32]
 80023b4:	e02d      	b.n	8002412 <HAL_RCC_OscConfig+0x36e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x334>
 80023be:	4b6a      	ldr	r3, [pc, #424]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	4a69      	ldr	r2, [pc, #420]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	6213      	str	r3, [r2, #32]
 80023ca:	4b67      	ldr	r3, [pc, #412]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	4a66      	ldr	r2, [pc, #408]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	f023 0304 	bic.w	r3, r3, #4
 80023d4:	6213      	str	r3, [r2, #32]
 80023d6:	e01c      	b.n	8002412 <HAL_RCC_OscConfig+0x36e>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2b05      	cmp	r3, #5
 80023de:	d10c      	bne.n	80023fa <HAL_RCC_OscConfig+0x356>
 80023e0:	4b61      	ldr	r3, [pc, #388]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4a60      	ldr	r2, [pc, #384]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 80023e6:	f043 0304 	orr.w	r3, r3, #4
 80023ea:	6213      	str	r3, [r2, #32]
 80023ec:	4b5e      	ldr	r3, [pc, #376]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4a5d      	ldr	r2, [pc, #372]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6213      	str	r3, [r2, #32]
 80023f8:	e00b      	b.n	8002412 <HAL_RCC_OscConfig+0x36e>
 80023fa:	4b5b      	ldr	r3, [pc, #364]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	4a5a      	ldr	r2, [pc, #360]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6213      	str	r3, [r2, #32]
 8002406:	4b58      	ldr	r3, [pc, #352]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4a57      	ldr	r2, [pc, #348]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d015      	beq.n	8002446 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241a:	f7fe fdb3 	bl	8000f84 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002420:	e00a      	b.n	8002438 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002422:	f7fe fdaf 	bl	8000f84 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002430:	4293      	cmp	r3, r2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e0b1      	b.n	800259c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002438:	4b4b      	ldr	r3, [pc, #300]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0ee      	beq.n	8002422 <HAL_RCC_OscConfig+0x37e>
 8002444:	e014      	b.n	8002470 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7fe fd9d 	bl	8000f84 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7fe fd99 	bl	8000f84 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	; 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e09b      	b.n	800259c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002464:	4b40      	ldr	r3, [pc, #256]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1ee      	bne.n	800244e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002470:	7dfb      	ldrb	r3, [r7, #23]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d105      	bne.n	8002482 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002476:	4b3c      	ldr	r3, [pc, #240]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	4a3b      	ldr	r2, [pc, #236]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 800247c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002480:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 8087 	beq.w	800259a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800248c:	4b36      	ldr	r3, [pc, #216]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 030c 	and.w	r3, r3, #12
 8002494:	2b08      	cmp	r3, #8
 8002496:	d061      	beq.n	800255c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d146      	bne.n	800252e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a0:	4b33      	ldr	r3, [pc, #204]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a6:	f7fe fd6d 	bl	8000f84 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ae:	f7fe fd69 	bl	8000f84 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e06d      	b.n	800259c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c0:	4b29      	ldr	r3, [pc, #164]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1f0      	bne.n	80024ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d4:	d108      	bne.n	80024e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024d6:	4b24      	ldr	r3, [pc, #144]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	4921      	ldr	r1, [pc, #132]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e8:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a19      	ldr	r1, [r3, #32]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	430b      	orrs	r3, r1
 80024fa:	491b      	ldr	r1, [pc, #108]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002500:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 8002502:	2201      	movs	r2, #1
 8002504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002506:	f7fe fd3d 	bl	8000f84 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250e:	f7fe fd39 	bl	8000f84 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e03d      	b.n	800259c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x46a>
 800252c:	e035      	b.n	800259a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7fe fd26 	bl	8000f84 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253c:	f7fe fd22 	bl	8000f84 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e026      	b.n	800259c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_RCC_OscConfig+0x4c4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x498>
 800255a:	e01e      	b.n	800259a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d107      	bne.n	8002574 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e019      	b.n	800259c <HAL_RCC_OscConfig+0x4f8>
 8002568:	40021000 	.word	0x40021000
 800256c:	40007000 	.word	0x40007000
 8002570:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_RCC_OscConfig+0x500>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	429a      	cmp	r2, r3
 8002586:	d106      	bne.n	8002596 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002592:	429a      	cmp	r2, r3
 8002594:	d001      	beq.n	800259a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021000 	.word	0x40021000

080025a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0d0      	b.n	800275e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025bc:	4b6a      	ldr	r3, [pc, #424]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d910      	bls.n	80025ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b67      	ldr	r3, [pc, #412]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 0207 	bic.w	r2, r3, #7
 80025d2:	4965      	ldr	r1, [pc, #404]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025da:	4b63      	ldr	r3, [pc, #396]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d001      	beq.n	80025ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0b8      	b.n	800275e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d020      	beq.n	800263a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002604:	4b59      	ldr	r3, [pc, #356]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	4a58      	ldr	r2, [pc, #352]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800260e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800261c:	4b53      	ldr	r3, [pc, #332]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4a52      	ldr	r2, [pc, #328]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002626:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002628:	4b50      	ldr	r3, [pc, #320]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	494d      	ldr	r1, [pc, #308]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d040      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d107      	bne.n	800265e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264e:	4b47      	ldr	r3, [pc, #284]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d115      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e07f      	b.n	800275e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002666:	4b41      	ldr	r3, [pc, #260]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e073      	b.n	800275e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002676:	4b3d      	ldr	r3, [pc, #244]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e06b      	b.n	800275e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002686:	4b39      	ldr	r3, [pc, #228]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f023 0203 	bic.w	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4936      	ldr	r1, [pc, #216]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002698:	f7fe fc74 	bl	8000f84 <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a0:	f7fe fc70 	bl	8000f84 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e053      	b.n	800275e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	4b2d      	ldr	r3, [pc, #180]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 020c 	and.w	r2, r3, #12
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d1eb      	bne.n	80026a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026c8:	4b27      	ldr	r3, [pc, #156]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d210      	bcs.n	80026f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b24      	ldr	r3, [pc, #144]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 0207 	bic.w	r2, r3, #7
 80026de:	4922      	ldr	r1, [pc, #136]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	4b20      	ldr	r3, [pc, #128]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e032      	b.n	800275e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002704:	4b19      	ldr	r3, [pc, #100]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4916      	ldr	r1, [pc, #88]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002722:	4b12      	ldr	r3, [pc, #72]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	490e      	ldr	r1, [pc, #56]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	4313      	orrs	r3, r2
 8002734:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002736:	f000 f821 	bl	800277c <HAL_RCC_GetSysClockFreq>
 800273a:	4602      	mov	r2, r0
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	490a      	ldr	r1, [pc, #40]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 8002748:	5ccb      	ldrb	r3, [r1, r3]
 800274a:	fa22 f303 	lsr.w	r3, r2, r3
 800274e:	4a09      	ldr	r2, [pc, #36]	; (8002774 <HAL_RCC_ClockConfig+0x1cc>)
 8002750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <HAL_RCC_ClockConfig+0x1d0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fbd2 	bl	8000f00 <HAL_InitTick>

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40022000 	.word	0x40022000
 800276c:	40021000 	.word	0x40021000
 8002770:	08005538 	.word	0x08005538
 8002774:	20000010 	.word	0x20000010
 8002778:	20000014 	.word	0x20000014

0800277c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	2300      	movs	r3, #0
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	2300      	movs	r3, #0
 8002790:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002796:	4b1e      	ldr	r3, [pc, #120]	; (8002810 <HAL_RCC_GetSysClockFreq+0x94>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d002      	beq.n	80027ac <HAL_RCC_GetSysClockFreq+0x30>
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d003      	beq.n	80027b2 <HAL_RCC_GetSysClockFreq+0x36>
 80027aa:	e027      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027ac:	4b19      	ldr	r3, [pc, #100]	; (8002814 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ae:	613b      	str	r3, [r7, #16]
      break;
 80027b0:	e027      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	0c9b      	lsrs	r3, r3, #18
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	4a17      	ldr	r2, [pc, #92]	; (8002818 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027bc:	5cd3      	ldrb	r3, [r2, r3]
 80027be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d010      	beq.n	80027ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027ca:	4b11      	ldr	r3, [pc, #68]	; (8002810 <HAL_RCC_GetSysClockFreq+0x94>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	0c5b      	lsrs	r3, r3, #17
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	4a11      	ldr	r2, [pc, #68]	; (800281c <HAL_RCC_GetSysClockFreq+0xa0>)
 80027d6:	5cd3      	ldrb	r3, [r2, r3]
 80027d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a0d      	ldr	r2, [pc, #52]	; (8002814 <HAL_RCC_GetSysClockFreq+0x98>)
 80027de:	fb03 f202 	mul.w	r2, r3, r2
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	e004      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a0c      	ldr	r2, [pc, #48]	; (8002820 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027f0:	fb02 f303 	mul.w	r3, r2, r3
 80027f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	613b      	str	r3, [r7, #16]
      break;
 80027fa:	e002      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_RCC_GetSysClockFreq+0x98>)
 80027fe:	613b      	str	r3, [r7, #16]
      break;
 8002800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002802:	693b      	ldr	r3, [r7, #16]
}
 8002804:	4618      	mov	r0, r3
 8002806:	371c      	adds	r7, #28
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40021000 	.word	0x40021000
 8002814:	007a1200 	.word	0x007a1200
 8002818:	08005550 	.word	0x08005550
 800281c:	08005560 	.word	0x08005560
 8002820:	003d0900 	.word	0x003d0900

08002824 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002828:	4b02      	ldr	r3, [pc, #8]	; (8002834 <HAL_RCC_GetHCLKFreq+0x10>)
 800282a:	681b      	ldr	r3, [r3, #0]
}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	20000010 	.word	0x20000010

08002838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800283c:	f7ff fff2 	bl	8002824 <HAL_RCC_GetHCLKFreq>
 8002840:	4602      	mov	r2, r0
 8002842:	4b05      	ldr	r3, [pc, #20]	; (8002858 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	0a1b      	lsrs	r3, r3, #8
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	4903      	ldr	r1, [pc, #12]	; (800285c <HAL_RCC_GetPCLK1Freq+0x24>)
 800284e:	5ccb      	ldrb	r3, [r1, r3]
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002854:	4618      	mov	r0, r3
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000
 800285c:	08005548 	.word	0x08005548

08002860 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <RCC_Delay+0x34>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <RCC_Delay+0x38>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	0a5b      	lsrs	r3, r3, #9
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800287c:	bf00      	nop
  }
  while (Delay --);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1e5a      	subs	r2, r3, #1
 8002882:	60fa      	str	r2, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f9      	bne.n	800287c <RCC_Delay+0x1c>
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	20000010 	.word	0x20000010
 8002898:	10624dd3 	.word	0x10624dd3

0800289c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e041      	b.n	8002932 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe fa62 	bl	8000d8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3304      	adds	r3, #4
 80028d8:	4619      	mov	r1, r3
 80028da:	4610      	mov	r0, r2
 80028dc:	f000 fac2 	bl	8002e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <HAL_TIM_PWM_Start+0x24>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b01      	cmp	r3, #1
 8002956:	bf14      	ite	ne
 8002958:	2301      	movne	r3, #1
 800295a:	2300      	moveq	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	e022      	b.n	80029a6 <HAL_TIM_PWM_Start+0x6a>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b04      	cmp	r3, #4
 8002964:	d109      	bne.n	800297a <HAL_TIM_PWM_Start+0x3e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b01      	cmp	r3, #1
 8002970:	bf14      	ite	ne
 8002972:	2301      	movne	r3, #1
 8002974:	2300      	moveq	r3, #0
 8002976:	b2db      	uxtb	r3, r3
 8002978:	e015      	b.n	80029a6 <HAL_TIM_PWM_Start+0x6a>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b08      	cmp	r3, #8
 800297e:	d109      	bne.n	8002994 <HAL_TIM_PWM_Start+0x58>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b01      	cmp	r3, #1
 800298a:	bf14      	ite	ne
 800298c:	2301      	movne	r3, #1
 800298e:	2300      	moveq	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	e008      	b.n	80029a6 <HAL_TIM_PWM_Start+0x6a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b01      	cmp	r3, #1
 800299e:	bf14      	ite	ne
 80029a0:	2301      	movne	r3, #1
 80029a2:	2300      	moveq	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e05e      	b.n	8002a6c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d104      	bne.n	80029be <HAL_TIM_PWM_Start+0x82>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029bc:	e013      	b.n	80029e6 <HAL_TIM_PWM_Start+0xaa>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d104      	bne.n	80029ce <HAL_TIM_PWM_Start+0x92>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029cc:	e00b      	b.n	80029e6 <HAL_TIM_PWM_Start+0xaa>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d104      	bne.n	80029de <HAL_TIM_PWM_Start+0xa2>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029dc:	e003      	b.n	80029e6 <HAL_TIM_PWM_Start+0xaa>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2202      	movs	r2, #2
 80029e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2201      	movs	r2, #1
 80029ec:	6839      	ldr	r1, [r7, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fc22 	bl	8003238 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a1e      	ldr	r2, [pc, #120]	; (8002a74 <HAL_TIM_PWM_Start+0x138>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d107      	bne.n	8002a0e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a18      	ldr	r2, [pc, #96]	; (8002a74 <HAL_TIM_PWM_Start+0x138>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00e      	beq.n	8002a36 <HAL_TIM_PWM_Start+0xfa>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a20:	d009      	beq.n	8002a36 <HAL_TIM_PWM_Start+0xfa>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a14      	ldr	r2, [pc, #80]	; (8002a78 <HAL_TIM_PWM_Start+0x13c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d004      	beq.n	8002a36 <HAL_TIM_PWM_Start+0xfa>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a12      	ldr	r2, [pc, #72]	; (8002a7c <HAL_TIM_PWM_Start+0x140>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d111      	bne.n	8002a5a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b06      	cmp	r3, #6
 8002a46:	d010      	beq.n	8002a6a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a58:	e007      	b.n	8002a6a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0201 	orr.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40012c00 	.word	0x40012c00
 8002a78:	40000400 	.word	0x40000400
 8002a7c:	40000800 	.word	0x40000800

08002a80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e093      	b.n	8002bbc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d106      	bne.n	8002aae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7fe f933 	bl	8000d14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ac4:	f023 0307 	bic.w	r3, r3, #7
 8002ac8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	f000 f9c5 	bl	8002e64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b02:	f023 0303 	bic.w	r3, r3, #3
 8002b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	4313      	orrs	r3, r2
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002b20:	f023 030c 	bic.w	r3, r3, #12
 8002b24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	011a      	lsls	r2, r3, #4
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	031b      	lsls	r3, r3, #12
 8002b50:	4313      	orrs	r3, r2
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002b5e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bd4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bdc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002be4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002bec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d110      	bne.n	8002c16 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d102      	bne.n	8002c00 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002bfa:	7b7b      	ldrb	r3, [r7, #13]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d001      	beq.n	8002c04 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e069      	b.n	8002cd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c14:	e031      	b.n	8002c7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d110      	bne.n	8002c3e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c1c:	7bbb      	ldrb	r3, [r7, #14]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d102      	bne.n	8002c28 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c22:	7b3b      	ldrb	r3, [r7, #12]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d001      	beq.n	8002c2c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e055      	b.n	8002cd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c3c:	e01d      	b.n	8002c7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d108      	bne.n	8002c56 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c44:	7bbb      	ldrb	r3, [r7, #14]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d105      	bne.n	8002c56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c4a:	7b7b      	ldrb	r3, [r7, #13]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d102      	bne.n	8002c56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c50:	7b3b      	ldrb	r3, [r7, #12]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d001      	beq.n	8002c5a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e03e      	b.n	8002cd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2202      	movs	r2, #2
 8002c66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2202      	movs	r2, #2
 8002c76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_TIM_Encoder_Start+0xc4>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d008      	beq.n	8002c98 <HAL_TIM_Encoder_Start+0xd4>
 8002c86:	e00f      	b.n	8002ca8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fad1 	bl	8003238 <TIM_CCxChannelCmd>
      break;
 8002c96:	e016      	b.n	8002cc6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	2104      	movs	r1, #4
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fac9 	bl	8003238 <TIM_CCxChannelCmd>
      break;
 8002ca6:	e00e      	b.n	8002cc6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2201      	movs	r2, #1
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fac1 	bl	8003238 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	2104      	movs	r1, #4
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 faba 	bl	8003238 <TIM_CCxChannelCmd>
      break;
 8002cc4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e0ae      	b.n	8002e5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b0c      	cmp	r3, #12
 8002d0a:	f200 809f 	bhi.w	8002e4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d0e:	a201      	add	r2, pc, #4	; (adr r2, 8002d14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d14:	08002d49 	.word	0x08002d49
 8002d18:	08002e4d 	.word	0x08002e4d
 8002d1c:	08002e4d 	.word	0x08002e4d
 8002d20:	08002e4d 	.word	0x08002e4d
 8002d24:	08002d89 	.word	0x08002d89
 8002d28:	08002e4d 	.word	0x08002e4d
 8002d2c:	08002e4d 	.word	0x08002e4d
 8002d30:	08002e4d 	.word	0x08002e4d
 8002d34:	08002dcb 	.word	0x08002dcb
 8002d38:	08002e4d 	.word	0x08002e4d
 8002d3c:	08002e4d 	.word	0x08002e4d
 8002d40:	08002e4d 	.word	0x08002e4d
 8002d44:	08002e0b 	.word	0x08002e0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68b9      	ldr	r1, [r7, #8]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f8ea 	bl	8002f28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0208 	orr.w	r2, r2, #8
 8002d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0204 	bic.w	r2, r2, #4
 8002d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6999      	ldr	r1, [r3, #24]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	619a      	str	r2, [r3, #24]
      break;
 8002d86:	e064      	b.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f930 	bl	8002ff4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6999      	ldr	r1, [r3, #24]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	021a      	lsls	r2, r3, #8
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	619a      	str	r2, [r3, #24]
      break;
 8002dc8:	e043      	b.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 f979 	bl	80030c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69da      	ldr	r2, [r3, #28]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0208 	orr.w	r2, r2, #8
 8002de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	69da      	ldr	r2, [r3, #28]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0204 	bic.w	r2, r2, #4
 8002df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69d9      	ldr	r1, [r3, #28]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	61da      	str	r2, [r3, #28]
      break;
 8002e08:	e023      	b.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 f9c3 	bl	800319c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69da      	ldr	r2, [r3, #28]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69d9      	ldr	r1, [r3, #28]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	021a      	lsls	r2, r3, #8
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	61da      	str	r2, [r3, #28]
      break;
 8002e4a:	e002      	b.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a29      	ldr	r2, [pc, #164]	; (8002f1c <TIM_Base_SetConfig+0xb8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d00b      	beq.n	8002e94 <TIM_Base_SetConfig+0x30>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e82:	d007      	beq.n	8002e94 <TIM_Base_SetConfig+0x30>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a26      	ldr	r2, [pc, #152]	; (8002f20 <TIM_Base_SetConfig+0xbc>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d003      	beq.n	8002e94 <TIM_Base_SetConfig+0x30>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a25      	ldr	r2, [pc, #148]	; (8002f24 <TIM_Base_SetConfig+0xc0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d108      	bne.n	8002ea6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a1c      	ldr	r2, [pc, #112]	; (8002f1c <TIM_Base_SetConfig+0xb8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00b      	beq.n	8002ec6 <TIM_Base_SetConfig+0x62>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb4:	d007      	beq.n	8002ec6 <TIM_Base_SetConfig+0x62>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a19      	ldr	r2, [pc, #100]	; (8002f20 <TIM_Base_SetConfig+0xbc>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d003      	beq.n	8002ec6 <TIM_Base_SetConfig+0x62>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a18      	ldr	r2, [pc, #96]	; (8002f24 <TIM_Base_SetConfig+0xc0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d108      	bne.n	8002ed8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a07      	ldr	r2, [pc, #28]	; (8002f1c <TIM_Base_SetConfig+0xb8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d103      	bne.n	8002f0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	615a      	str	r2, [r3, #20]
}
 8002f12:	bf00      	nop
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr
 8002f1c:	40012c00 	.word	0x40012c00
 8002f20:	40000400 	.word	0x40000400
 8002f24:	40000800 	.word	0x40000800

08002f28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f023 0201 	bic.w	r2, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f023 0303 	bic.w	r3, r3, #3
 8002f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f023 0302 	bic.w	r3, r3, #2
 8002f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a1c      	ldr	r2, [pc, #112]	; (8002ff0 <TIM_OC1_SetConfig+0xc8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d10c      	bne.n	8002f9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f023 0308 	bic.w	r3, r3, #8
 8002f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f023 0304 	bic.w	r3, r3, #4
 8002f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a13      	ldr	r2, [pc, #76]	; (8002ff0 <TIM_OC1_SetConfig+0xc8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d111      	bne.n	8002fca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	621a      	str	r2, [r3, #32]
}
 8002fe4:	bf00      	nop
 8002fe6:	371c      	adds	r7, #28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40012c00 	.word	0x40012c00

08002ff4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	f023 0210 	bic.w	r2, r3, #16
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800302a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	021b      	lsls	r3, r3, #8
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4313      	orrs	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f023 0320 	bic.w	r3, r3, #32
 800303e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a1d      	ldr	r2, [pc, #116]	; (80030c4 <TIM_OC2_SetConfig+0xd0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d10d      	bne.n	8003070 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800305a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800306e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a14      	ldr	r2, [pc, #80]	; (80030c4 <TIM_OC2_SetConfig+0xd0>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d113      	bne.n	80030a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800307e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003086:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	621a      	str	r2, [r3, #32]
}
 80030ba:	bf00      	nop
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	40012c00 	.word	0x40012c00

080030c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0303 	bic.w	r3, r3, #3
 80030fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a1d      	ldr	r2, [pc, #116]	; (8003198 <TIM_OC3_SetConfig+0xd0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d10d      	bne.n	8003142 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800312c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	021b      	lsls	r3, r3, #8
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	4313      	orrs	r3, r2
 8003138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a14      	ldr	r2, [pc, #80]	; (8003198 <TIM_OC3_SetConfig+0xd0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d113      	bne.n	8003172 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	621a      	str	r2, [r3, #32]
}
 800318c:	bf00      	nop
 800318e:	371c      	adds	r7, #28
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40012c00 	.word	0x40012c00

0800319c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	031b      	lsls	r3, r3, #12
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a0f      	ldr	r2, [pc, #60]	; (8003234 <TIM_OC4_SetConfig+0x98>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d109      	bne.n	8003210 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003202:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	019b      	lsls	r3, r3, #6
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	4313      	orrs	r3, r2
 800320e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	621a      	str	r2, [r3, #32]
}
 800322a:	bf00      	nop
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr
 8003234:	40012c00 	.word	0x40012c00

08003238 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f003 031f 	and.w	r3, r3, #31
 800324a:	2201      	movs	r2, #1
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a1a      	ldr	r2, [r3, #32]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	43db      	mvns	r3, r3
 800325a:	401a      	ands	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a1a      	ldr	r2, [r3, #32]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	fa01 f303 	lsl.w	r3, r1, r3
 8003270:	431a      	orrs	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	621a      	str	r2, [r3, #32]
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003294:	2302      	movs	r3, #2
 8003296:	e046      	b.n	8003326 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a16      	ldr	r2, [pc, #88]	; (8003330 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00e      	beq.n	80032fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e4:	d009      	beq.n	80032fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a12      	ldr	r2, [pc, #72]	; (8003334 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d004      	beq.n	80032fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a10      	ldr	r2, [pc, #64]	; (8003338 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d10c      	bne.n	8003314 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003300:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	4313      	orrs	r3, r2
 800330a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40000400 	.word	0x40000400
 8003338:	40000800 	.word	0x40000800

0800333c <__itoa>:
 800333c:	1e93      	subs	r3, r2, #2
 800333e:	2b22      	cmp	r3, #34	; 0x22
 8003340:	b510      	push	{r4, lr}
 8003342:	460c      	mov	r4, r1
 8003344:	d904      	bls.n	8003350 <__itoa+0x14>
 8003346:	2300      	movs	r3, #0
 8003348:	461c      	mov	r4, r3
 800334a:	700b      	strb	r3, [r1, #0]
 800334c:	4620      	mov	r0, r4
 800334e:	bd10      	pop	{r4, pc}
 8003350:	2a0a      	cmp	r2, #10
 8003352:	d109      	bne.n	8003368 <__itoa+0x2c>
 8003354:	2800      	cmp	r0, #0
 8003356:	da07      	bge.n	8003368 <__itoa+0x2c>
 8003358:	232d      	movs	r3, #45	; 0x2d
 800335a:	700b      	strb	r3, [r1, #0]
 800335c:	2101      	movs	r1, #1
 800335e:	4240      	negs	r0, r0
 8003360:	4421      	add	r1, r4
 8003362:	f000 f805 	bl	8003370 <__utoa>
 8003366:	e7f1      	b.n	800334c <__itoa+0x10>
 8003368:	2100      	movs	r1, #0
 800336a:	e7f9      	b.n	8003360 <__itoa+0x24>

0800336c <itoa>:
 800336c:	f7ff bfe6 	b.w	800333c <__itoa>

08003370 <__utoa>:
 8003370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003372:	b08b      	sub	sp, #44	; 0x2c
 8003374:	4605      	mov	r5, r0
 8003376:	460b      	mov	r3, r1
 8003378:	466e      	mov	r6, sp
 800337a:	4c1d      	ldr	r4, [pc, #116]	; (80033f0 <__utoa+0x80>)
 800337c:	f104 0c20 	add.w	ip, r4, #32
 8003380:	4637      	mov	r7, r6
 8003382:	6820      	ldr	r0, [r4, #0]
 8003384:	6861      	ldr	r1, [r4, #4]
 8003386:	3408      	adds	r4, #8
 8003388:	c703      	stmia	r7!, {r0, r1}
 800338a:	4564      	cmp	r4, ip
 800338c:	463e      	mov	r6, r7
 800338e:	d1f7      	bne.n	8003380 <__utoa+0x10>
 8003390:	7921      	ldrb	r1, [r4, #4]
 8003392:	6820      	ldr	r0, [r4, #0]
 8003394:	7139      	strb	r1, [r7, #4]
 8003396:	1e91      	subs	r1, r2, #2
 8003398:	2922      	cmp	r1, #34	; 0x22
 800339a:	6038      	str	r0, [r7, #0]
 800339c:	f04f 0100 	mov.w	r1, #0
 80033a0:	d904      	bls.n	80033ac <__utoa+0x3c>
 80033a2:	7019      	strb	r1, [r3, #0]
 80033a4:	460b      	mov	r3, r1
 80033a6:	4618      	mov	r0, r3
 80033a8:	b00b      	add	sp, #44	; 0x2c
 80033aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ac:	1e58      	subs	r0, r3, #1
 80033ae:	4684      	mov	ip, r0
 80033b0:	fbb5 f7f2 	udiv	r7, r5, r2
 80033b4:	fb02 5617 	mls	r6, r2, r7, r5
 80033b8:	3628      	adds	r6, #40	; 0x28
 80033ba:	446e      	add	r6, sp
 80033bc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80033c0:	460c      	mov	r4, r1
 80033c2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80033c6:	462e      	mov	r6, r5
 80033c8:	42b2      	cmp	r2, r6
 80033ca:	463d      	mov	r5, r7
 80033cc:	f101 0101 	add.w	r1, r1, #1
 80033d0:	d9ee      	bls.n	80033b0 <__utoa+0x40>
 80033d2:	2200      	movs	r2, #0
 80033d4:	545a      	strb	r2, [r3, r1]
 80033d6:	1919      	adds	r1, r3, r4
 80033d8:	1aa5      	subs	r5, r4, r2
 80033da:	42aa      	cmp	r2, r5
 80033dc:	dae3      	bge.n	80033a6 <__utoa+0x36>
 80033de:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80033e2:	780e      	ldrb	r6, [r1, #0]
 80033e4:	3201      	adds	r2, #1
 80033e6:	7006      	strb	r6, [r0, #0]
 80033e8:	f801 5901 	strb.w	r5, [r1], #-1
 80033ec:	e7f4      	b.n	80033d8 <__utoa+0x68>
 80033ee:	bf00      	nop
 80033f0:	08005562 	.word	0x08005562

080033f4 <memset>:
 80033f4:	4603      	mov	r3, r0
 80033f6:	4402      	add	r2, r0
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d100      	bne.n	80033fe <memset+0xa>
 80033fc:	4770      	bx	lr
 80033fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003402:	e7f9      	b.n	80033f8 <memset+0x4>

08003404 <__libc_init_array>:
 8003404:	b570      	push	{r4, r5, r6, lr}
 8003406:	2600      	movs	r6, #0
 8003408:	4d0c      	ldr	r5, [pc, #48]	; (800343c <__libc_init_array+0x38>)
 800340a:	4c0d      	ldr	r4, [pc, #52]	; (8003440 <__libc_init_array+0x3c>)
 800340c:	1b64      	subs	r4, r4, r5
 800340e:	10a4      	asrs	r4, r4, #2
 8003410:	42a6      	cmp	r6, r4
 8003412:	d109      	bne.n	8003428 <__libc_init_array+0x24>
 8003414:	f000 f81a 	bl	800344c <_init>
 8003418:	2600      	movs	r6, #0
 800341a:	4d0a      	ldr	r5, [pc, #40]	; (8003444 <__libc_init_array+0x40>)
 800341c:	4c0a      	ldr	r4, [pc, #40]	; (8003448 <__libc_init_array+0x44>)
 800341e:	1b64      	subs	r4, r4, r5
 8003420:	10a4      	asrs	r4, r4, #2
 8003422:	42a6      	cmp	r6, r4
 8003424:	d105      	bne.n	8003432 <__libc_init_array+0x2e>
 8003426:	bd70      	pop	{r4, r5, r6, pc}
 8003428:	f855 3b04 	ldr.w	r3, [r5], #4
 800342c:	4798      	blx	r3
 800342e:	3601      	adds	r6, #1
 8003430:	e7ee      	b.n	8003410 <__libc_init_array+0xc>
 8003432:	f855 3b04 	ldr.w	r3, [r5], #4
 8003436:	4798      	blx	r3
 8003438:	3601      	adds	r6, #1
 800343a:	e7f2      	b.n	8003422 <__libc_init_array+0x1e>
 800343c:	08005588 	.word	0x08005588
 8003440:	08005588 	.word	0x08005588
 8003444:	08005588 	.word	0x08005588
 8003448:	0800558c 	.word	0x0800558c

0800344c <_init>:
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344e:	bf00      	nop
 8003450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003452:	bc08      	pop	{r3}
 8003454:	469e      	mov	lr, r3
 8003456:	4770      	bx	lr

08003458 <_fini>:
 8003458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345a:	bf00      	nop
 800345c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800345e:	bc08      	pop	{r3}
 8003460:	469e      	mov	lr, r3
 8003462:	4770      	bx	lr

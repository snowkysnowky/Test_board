
Test_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a34  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002548  08008b48  08008b48  00018b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b090  0800b090  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b090  0800b090  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b090  0800b090  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b090  0800b090  0001b090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b094  0800b094  0001b094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a4  200001e4  0800b27c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000888  0800b27c  00020888  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bebb  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e88  00000000  00000000  0002c10b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df8  00000000  00000000  0002df98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae8  00000000  00000000  0002ed90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b27  00000000  00000000  0002f878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f40a  00000000  00000000  0004839f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c715  00000000  00000000  000577a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005028  00000000  00000000  000e3ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e8ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008b2c 	.word	0x08008b2c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08008b2c 	.word	0x08008b2c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t LED_DutyCycle = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be2:	f000 ffc5 	bl	8001b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be6:	f000 f8a1 	bl	8000d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bea:	f000 fa0d 	bl	8001008 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000bee:	f000 f8e3 	bl	8000db8 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000bf2:	f000 f95f 	bl	8000eb4 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000bf6:	f000 f90d 	bl	8000e14 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000bfa:	f000 f9ad 	bl	8000f58 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000bfe:	213c      	movs	r1, #60	; 0x3c
 8000c00:	4841      	ldr	r0, [pc, #260]	; (8000d08 <main+0x130>)
 8000c02:	f002 fe7b 	bl	80038fc <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c06:	2100      	movs	r1, #0
 8000c08:	4840      	ldr	r0, [pc, #256]	; (8000d0c <main+0x134>)
 8000c0a:	f002 fd33 	bl	8003674 <HAL_TIM_PWM_Start>

  SSD1306_Init (); // initialize the display
 8000c0e:	f000 facb 	bl	80011a8 <SSD1306_Init>



  char string[5];
  int num = 0, pastI = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]


     SSD1306_GotoXY (0,0);
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f000 fc2b 	bl	8001478 <SSD1306_GotoXY>
     SSD1306_Puts ("SSD1306", &Font_11x18, 1);
 8000c22:	2201      	movs	r2, #1
 8000c24:	493a      	ldr	r1, [pc, #232]	; (8000d10 <main+0x138>)
 8000c26:	483b      	ldr	r0, [pc, #236]	; (8000d14 <main+0x13c>)
 8000c28:	f000 fcbc 	bl	80015a4 <SSD1306_Puts>
     SSD1306_GotoXY (0, 30);
 8000c2c:	211e      	movs	r1, #30
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f000 fc22 	bl	8001478 <SSD1306_GotoXY>
     SSD1306_Puts ("OLED DEMO", &Font_11x18, 1);
 8000c34:	2201      	movs	r2, #1
 8000c36:	4936      	ldr	r1, [pc, #216]	; (8000d10 <main+0x138>)
 8000c38:	4837      	ldr	r0, [pc, #220]	; (8000d18 <main+0x140>)
 8000c3a:	f000 fcb3 	bl	80015a4 <SSD1306_Puts>
     SSD1306_UpdateScreen();
 8000c3e:	f000 fb77 	bl	8001330 <SSD1306_UpdateScreen>
     HAL_Delay (1000);
 8000c42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c46:	f000 fff5 	bl	8001c34 <HAL_Delay>

     SSD1306_ScrollRight(0,5);
 8000c4a:	2105      	movs	r1, #5
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f000 fa36 	bl	80010be <SSD1306_ScrollRight>
     HAL_Delay(3000);
 8000c52:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c56:	f000 ffed 	bl	8001c34 <HAL_Delay>
     SSD1306_ScrollLeft(0,5);
 8000c5a:	2105      	movs	r1, #5
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f000 fa64 	bl	800112a <SSD1306_ScrollLeft>
     HAL_Delay(3000);
 8000c62:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c66:	f000 ffe5 	bl	8001c34 <HAL_Delay>
     SSD1306_Stopscroll();
 8000c6a:	f000 fa94 	bl	8001196 <SSD1306_Stopscroll>
     SSD1306_Clear();
 8000c6e:	f000 fcbe 	bl	80015ee <SSD1306_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LED_DutyCycle = (TIM2->CNT);
 8000c72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c78:	80fb      	strh	r3, [r7, #6]
	  TIM3->CCR1 = LED_DutyCycle;
 8000c7a:	4a28      	ldr	r2, [pc, #160]	; (8000d1c <main+0x144>)
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	6353      	str	r3, [r2, #52]	; 0x34
	  if(num != pastI)
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d02c      	beq.n	8000ce2 <main+0x10a>
  		{

  			itoa(num,string, 10);
 8000c88:	463b      	mov	r3, r7
 8000c8a:	220a      	movs	r2, #10
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f003 fb66 	bl	8004360 <itoa>
  			SSD1306_GotoXY (0, 30);
 8000c94:	211e      	movs	r1, #30
 8000c96:	2000      	movs	r0, #0
 8000c98:	f000 fbee 	bl	8001478 <SSD1306_GotoXY>
  			SSD1306_Puts ("             ", &Font_16x26, 1);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4920      	ldr	r1, [pc, #128]	; (8000d20 <main+0x148>)
 8000ca0:	4820      	ldr	r0, [pc, #128]	; (8000d24 <main+0x14c>)
 8000ca2:	f000 fc7f 	bl	80015a4 <SSD1306_Puts>
  			SSD1306_UpdateScreen();
 8000ca6:	f000 fb43 	bl	8001330 <SSD1306_UpdateScreen>
  			if(num<10) {
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2b09      	cmp	r3, #9
 8000cae:	dc04      	bgt.n	8000cba <main+0xe2>
  				SSD1306_GotoXY (53, 30);  // 1 DIGIT
 8000cb0:	211e      	movs	r1, #30
 8000cb2:	2035      	movs	r0, #53	; 0x35
 8000cb4:	f000 fbe0 	bl	8001478 <SSD1306_GotoXY>
 8000cb8:	e00b      	b.n	8000cd2 <main+0xfa>
  			}
  			else if (num<100) {
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2b63      	cmp	r3, #99	; 0x63
 8000cbe:	dc04      	bgt.n	8000cca <main+0xf2>
  				SSD1306_GotoXY (45, 30);  // 2 DIGITS
 8000cc0:	211e      	movs	r1, #30
 8000cc2:	202d      	movs	r0, #45	; 0x2d
 8000cc4:	f000 fbd8 	bl	8001478 <SSD1306_GotoXY>
 8000cc8:	e003      	b.n	8000cd2 <main+0xfa>
  			}
  			else  {
  				SSD1306_GotoXY (37, 30);  // 3 DIGITS
 8000cca:	211e      	movs	r1, #30
 8000ccc:	2025      	movs	r0, #37	; 0x25
 8000cce:	f000 fbd3 	bl	8001478 <SSD1306_GotoXY>
  			}
  			SSD1306_Puts (string, &Font_16x26, 1);
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	4912      	ldr	r1, [pc, #72]	; (8000d20 <main+0x148>)
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fc63 	bl	80015a4 <SSD1306_Puts>
  			SSD1306_UpdateScreen();
 8000cde:	f000 fb27 	bl	8001330 <SSD1306_UpdateScreen>
//	  			HAL_Delay (500);
  		}
	  pastI = num;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
	  num = TIM2->CNT;
 8000ce6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cec:	60fb      	str	r3, [r7, #12]

	  if(HAL_GPIO_ReadPin(rot_sw_GPIO_Port, rot_sw_Pin)==GPIO_PIN_RESET){
 8000cee:	2104      	movs	r1, #4
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <main+0x150>)
 8000cf2:	f001 fa2b 	bl	800214c <HAL_GPIO_ReadPin>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d0ba      	beq.n	8000c72 <main+0x9a>

	  }else{
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2108      	movs	r1, #8
 8000d00:	4809      	ldr	r0, [pc, #36]	; (8000d28 <main+0x150>)
 8000d02:	f001 fa3a 	bl	800217a <HAL_GPIO_WritePin>
	  LED_DutyCycle = (TIM2->CNT);
 8000d06:	e7b4      	b.n	8000c72 <main+0x9a>
 8000d08:	2000029c 	.word	0x2000029c
 8000d0c:	200002e4 	.word	0x200002e4
 8000d10:	20000000 	.word	0x20000000
 8000d14:	08008b48 	.word	0x08008b48
 8000d18:	08008b50 	.word	0x08008b50
 8000d1c:	40000400 	.word	0x40000400
 8000d20:	20000008 	.word	0x20000008
 8000d24:	08008b5c 	.word	0x08008b5c
 8000d28:	40010800 	.word	0x40010800

08000d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b090      	sub	sp, #64	; 0x40
 8000d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d32:	f107 0318 	add.w	r3, r7, #24
 8000d36:	2228      	movs	r2, #40	; 0x28
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f004 fad3 	bl	80052e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d60:	2302      	movs	r3, #2
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d6a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d70:	f107 0318 	add.w	r3, r7, #24
 8000d74:	4618      	mov	r0, r3
 8000d76:	f001 ffe3 	bl	8002d40 <HAL_RCC_OscConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d80:	f000 f998 	bl	80010b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d84:	230f      	movs	r3, #15
 8000d86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 fa50 	bl	8003244 <HAL_RCC_ClockConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000daa:	f000 f983 	bl	80010b4 <Error_Handler>
  }
}
 8000dae:	bf00      	nop
 8000db0:	3740      	adds	r7, #64	; 0x40
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_I2C2_Init+0x50>)
 8000dbe:	4a13      	ldr	r2, [pc, #76]	; (8000e0c <MX_I2C2_Init+0x54>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_I2C2_Init+0x50>)
 8000dc4:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <MX_I2C2_Init+0x58>)
 8000dc6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_I2C2_Init+0x50>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MX_I2C2_Init+0x50>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_I2C2_Init+0x50>)
 8000dd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dda:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <MX_I2C2_Init+0x50>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_I2C2_Init+0x50>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <MX_I2C2_Init+0x50>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_I2C2_Init+0x50>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <MX_I2C2_Init+0x50>)
 8000df6:	f001 f9d9 	bl	80021ac <HAL_I2C_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e00:	f000 f958 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000200 	.word	0x20000200
 8000e0c:	40005800 	.word	0x40005800
 8000e10:	00061a80 	.word	0x00061a80

08000e14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1a:	f107 0308 	add.w	r3, r7, #8
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e28:	463b      	mov	r3, r7
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e30:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <MX_TIM1_Init+0x98>)
 8000e32:	4a1f      	ldr	r2, [pc, #124]	; (8000eb0 <MX_TIM1_Init+0x9c>)
 8000e34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8000e36:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <MX_TIM1_Init+0x98>)
 8000e38:	223f      	movs	r2, #63	; 0x3f
 8000e3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <MX_TIM1_Init+0x98>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <MX_TIM1_Init+0x98>)
 8000e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <MX_TIM1_Init+0x98>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e50:	4b16      	ldr	r3, [pc, #88]	; (8000eac <MX_TIM1_Init+0x98>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <MX_TIM1_Init+0x98>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e5c:	4813      	ldr	r0, [pc, #76]	; (8000eac <MX_TIM1_Init+0x98>)
 8000e5e:	f002 fb6b 	bl	8003538 <HAL_TIM_Base_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000e68:	f000 f924 	bl	80010b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4619      	mov	r1, r3
 8000e78:	480c      	ldr	r0, [pc, #48]	; (8000eac <MX_TIM1_Init+0x98>)
 8000e7a:	f002 fe8f 	bl	8003b9c <HAL_TIM_ConfigClockSource>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000e84:	f000 f916 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e90:	463b      	mov	r3, r7
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_TIM1_Init+0x98>)
 8000e96:	f003 f9ed 	bl	8004274 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ea0:	f000 f908 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000254 	.word	0x20000254
 8000eb0:	40012c00 	.word	0x40012c00

08000eb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08c      	sub	sp, #48	; 0x30
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000eba:	f107 030c 	add.w	r3, r7, #12
 8000ebe:	2224      	movs	r2, #36	; 0x24
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f004 fa0f 	bl	80052e6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ed0:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <MX_TIM2_Init+0xa0>)
 8000ed2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <MX_TIM2_Init+0xa0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <MX_TIM2_Init+0xa0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <MX_TIM2_Init+0xa0>)
 8000ee6:	2264      	movs	r2, #100	; 0x64
 8000ee8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eea:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <MX_TIM2_Init+0xa0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <MX_TIM2_Init+0xa0>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000efe:	2301      	movs	r3, #1
 8000f00:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000f06:	230f      	movs	r3, #15
 8000f08:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000f16:	230f      	movs	r3, #15
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480c      	ldr	r0, [pc, #48]	; (8000f54 <MX_TIM2_Init+0xa0>)
 8000f22:	f002 fc49 	bl	80037b8 <HAL_TIM_Encoder_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000f2c:	f000 f8c2 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_TIM2_Init+0xa0>)
 8000f3e:	f003 f999 	bl	8004274 <HAL_TIMEx_MasterConfigSynchronization>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000f48:	f000 f8b4 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	3730      	adds	r7, #48	; 0x30
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	2000029c 	.word	0x2000029c

08000f58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5e:	f107 0320 	add.w	r3, r7, #32
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]
 8000f76:	615a      	str	r2, [r3, #20]
 8000f78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f7a:	4b21      	ldr	r3, [pc, #132]	; (8001000 <MX_TIM3_Init+0xa8>)
 8000f7c:	4a21      	ldr	r2, [pc, #132]	; (8001004 <MX_TIM3_Init+0xac>)
 8000f7e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <MX_TIM3_Init+0xa8>)
 8000f82:	2248      	movs	r2, #72	; 0x48
 8000f84:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f86:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <MX_TIM3_Init+0xa8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <MX_TIM3_Init+0xa8>)
 8000f8e:	2264      	movs	r2, #100	; 0x64
 8000f90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f92:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_TIM3_Init+0xa8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <MX_TIM3_Init+0xa8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f9e:	4818      	ldr	r0, [pc, #96]	; (8001000 <MX_TIM3_Init+0xa8>)
 8000fa0:	f002 fb19 	bl	80035d6 <HAL_TIM_PWM_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000faa:	f000 f883 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fb6:	f107 0320 	add.w	r3, r7, #32
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4810      	ldr	r0, [pc, #64]	; (8001000 <MX_TIM3_Init+0xa8>)
 8000fbe:	f003 f959 	bl	8004274 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000fc8:	f000 f874 	bl	80010b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fcc:	2360      	movs	r3, #96	; 0x60
 8000fce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4807      	ldr	r0, [pc, #28]	; (8001000 <MX_TIM3_Init+0xa8>)
 8000fe4:	f002 fd18 	bl	8003a18 <HAL_TIM_PWM_ConfigChannel>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000fee:	f000 f861 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ff2:	4803      	ldr	r0, [pc, #12]	; (8001000 <MX_TIM3_Init+0xa8>)
 8000ff4:	f000 fc76 	bl	80018e4 <HAL_TIM_MspPostInit>

}
 8000ff8:	bf00      	nop
 8000ffa:	3728      	adds	r7, #40	; 0x28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200002e4 	.word	0x200002e4
 8001004:	40000400 	.word	0x40000400

08001008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100e:	f107 0310 	add.w	r3, r7, #16
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800101c:	4b23      	ldr	r3, [pc, #140]	; (80010ac <MX_GPIO_Init+0xa4>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a22      	ldr	r2, [pc, #136]	; (80010ac <MX_GPIO_Init+0xa4>)
 8001022:	f043 0320 	orr.w	r3, r3, #32
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b20      	ldr	r3, [pc, #128]	; (80010ac <MX_GPIO_Init+0xa4>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0320 	and.w	r3, r3, #32
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <MX_GPIO_Init+0xa4>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <MX_GPIO_Init+0xa4>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <MX_GPIO_Init+0xa4>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <MX_GPIO_Init+0xa4>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a16      	ldr	r2, [pc, #88]	; (80010ac <MX_GPIO_Init+0xa4>)
 8001052:	f043 0308 	orr.w	r3, r3, #8
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_GPIO_Init+0xa4>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0308 	and.w	r3, r3, #8
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2108      	movs	r1, #8
 8001068:	4811      	ldr	r0, [pc, #68]	; (80010b0 <MX_GPIO_Init+0xa8>)
 800106a:	f001 f886 	bl	800217a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : rot_sw_Pin */
  GPIO_InitStruct.Pin = rot_sw_Pin;
 800106e:	2304      	movs	r3, #4
 8001070:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(rot_sw_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	4619      	mov	r1, r3
 8001080:	480b      	ldr	r0, [pc, #44]	; (80010b0 <MX_GPIO_Init+0xa8>)
 8001082:	f000 fedf 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001086:	2308      	movs	r3, #8
 8001088:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2302      	movs	r3, #2
 8001094:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	4619      	mov	r1, r3
 800109c:	4804      	ldr	r0, [pc, #16]	; (80010b0 <MX_GPIO_Init+0xa8>)
 800109e:	f000 fed1 	bl	8001e44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a2:	bf00      	nop
 80010a4:	3720      	adds	r7, #32
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010800 	.word	0x40010800

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010bc:	e7fe      	b.n	80010bc <Error_Handler+0x8>

080010be <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	460a      	mov	r2, r1
 80010c8:	71fb      	strb	r3, [r7, #7]
 80010ca:	4613      	mov	r3, r2
 80010cc:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 80010ce:	2226      	movs	r2, #38	; 0x26
 80010d0:	2100      	movs	r1, #0
 80010d2:	2078      	movs	r0, #120	; 0x78
 80010d4:	f000 fb0e 	bl	80016f4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2078      	movs	r0, #120	; 0x78
 80010de:	f000 fb09 	bl	80016f4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	461a      	mov	r2, r3
 80010e6:	2100      	movs	r1, #0
 80010e8:	2078      	movs	r0, #120	; 0x78
 80010ea:	f000 fb03 	bl	80016f4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	2078      	movs	r0, #120	; 0x78
 80010f4:	f000 fafe 	bl	80016f4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 80010f8:	79bb      	ldrb	r3, [r7, #6]
 80010fa:	461a      	mov	r2, r3
 80010fc:	2100      	movs	r1, #0
 80010fe:	2078      	movs	r0, #120	; 0x78
 8001100:	f000 faf8 	bl	80016f4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8001104:	2200      	movs	r2, #0
 8001106:	2100      	movs	r1, #0
 8001108:	2078      	movs	r0, #120	; 0x78
 800110a:	f000 faf3 	bl	80016f4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 800110e:	22ff      	movs	r2, #255	; 0xff
 8001110:	2100      	movs	r1, #0
 8001112:	2078      	movs	r0, #120	; 0x78
 8001114:	f000 faee 	bl	80016f4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8001118:	222f      	movs	r2, #47	; 0x2f
 800111a:	2100      	movs	r1, #0
 800111c:	2078      	movs	r0, #120	; 0x78
 800111e:	f000 fae9 	bl	80016f4 <ssd1306_I2C_Write>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	460a      	mov	r2, r1
 8001134:	71fb      	strb	r3, [r7, #7]
 8001136:	4613      	mov	r3, r2
 8001138:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 800113a:	2227      	movs	r2, #39	; 0x27
 800113c:	2100      	movs	r1, #0
 800113e:	2078      	movs	r0, #120	; 0x78
 8001140:	f000 fad8 	bl	80016f4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8001144:	2200      	movs	r2, #0
 8001146:	2100      	movs	r1, #0
 8001148:	2078      	movs	r0, #120	; 0x78
 800114a:	f000 fad3 	bl	80016f4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	461a      	mov	r2, r3
 8001152:	2100      	movs	r1, #0
 8001154:	2078      	movs	r0, #120	; 0x78
 8001156:	f000 facd 	bl	80016f4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	2078      	movs	r0, #120	; 0x78
 8001160:	f000 fac8 	bl	80016f4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8001164:	79bb      	ldrb	r3, [r7, #6]
 8001166:	461a      	mov	r2, r3
 8001168:	2100      	movs	r1, #0
 800116a:	2078      	movs	r0, #120	; 0x78
 800116c:	f000 fac2 	bl	80016f4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	2078      	movs	r0, #120	; 0x78
 8001176:	f000 fabd 	bl	80016f4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 800117a:	22ff      	movs	r2, #255	; 0xff
 800117c:	2100      	movs	r1, #0
 800117e:	2078      	movs	r0, #120	; 0x78
 8001180:	f000 fab8 	bl	80016f4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8001184:	222f      	movs	r2, #47	; 0x2f
 8001186:	2100      	movs	r1, #0
 8001188:	2078      	movs	r0, #120	; 0x78
 800118a:	f000 fab3 	bl	80016f4 <ssd1306_I2C_Write>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800119a:	222e      	movs	r2, #46	; 0x2e
 800119c:	2100      	movs	r1, #0
 800119e:	2078      	movs	r0, #120	; 0x78
 80011a0:	f000 faa8 	bl	80016f4 <ssd1306_I2C_Write>
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80011ae:	f000 fa27 	bl	8001600 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80011b2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80011b6:	2201      	movs	r2, #1
 80011b8:	2178      	movs	r1, #120	; 0x78
 80011ba:	485b      	ldr	r0, [pc, #364]	; (8001328 <SSD1306_Init+0x180>)
 80011bc:	f001 fa38 	bl	8002630 <HAL_I2C_IsDeviceReady>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e0a9      	b.n	800131e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80011ca:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80011ce:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011d0:	e002      	b.n	80011d8 <SSD1306_Init+0x30>
		p--;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f9      	bne.n	80011d2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80011de:	22ae      	movs	r2, #174	; 0xae
 80011e0:	2100      	movs	r1, #0
 80011e2:	2078      	movs	r0, #120	; 0x78
 80011e4:	f000 fa86 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80011e8:	2220      	movs	r2, #32
 80011ea:	2100      	movs	r1, #0
 80011ec:	2078      	movs	r0, #120	; 0x78
 80011ee:	f000 fa81 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80011f2:	2210      	movs	r2, #16
 80011f4:	2100      	movs	r1, #0
 80011f6:	2078      	movs	r0, #120	; 0x78
 80011f8:	f000 fa7c 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80011fc:	22b0      	movs	r2, #176	; 0xb0
 80011fe:	2100      	movs	r1, #0
 8001200:	2078      	movs	r0, #120	; 0x78
 8001202:	f000 fa77 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001206:	22c8      	movs	r2, #200	; 0xc8
 8001208:	2100      	movs	r1, #0
 800120a:	2078      	movs	r0, #120	; 0x78
 800120c:	f000 fa72 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	2078      	movs	r0, #120	; 0x78
 8001216:	f000 fa6d 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800121a:	2210      	movs	r2, #16
 800121c:	2100      	movs	r1, #0
 800121e:	2078      	movs	r0, #120	; 0x78
 8001220:	f000 fa68 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001224:	2240      	movs	r2, #64	; 0x40
 8001226:	2100      	movs	r1, #0
 8001228:	2078      	movs	r0, #120	; 0x78
 800122a:	f000 fa63 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800122e:	2281      	movs	r2, #129	; 0x81
 8001230:	2100      	movs	r1, #0
 8001232:	2078      	movs	r0, #120	; 0x78
 8001234:	f000 fa5e 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001238:	22ff      	movs	r2, #255	; 0xff
 800123a:	2100      	movs	r1, #0
 800123c:	2078      	movs	r0, #120	; 0x78
 800123e:	f000 fa59 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001242:	22a1      	movs	r2, #161	; 0xa1
 8001244:	2100      	movs	r1, #0
 8001246:	2078      	movs	r0, #120	; 0x78
 8001248:	f000 fa54 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800124c:	22a6      	movs	r2, #166	; 0xa6
 800124e:	2100      	movs	r1, #0
 8001250:	2078      	movs	r0, #120	; 0x78
 8001252:	f000 fa4f 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001256:	22a8      	movs	r2, #168	; 0xa8
 8001258:	2100      	movs	r1, #0
 800125a:	2078      	movs	r0, #120	; 0x78
 800125c:	f000 fa4a 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001260:	223f      	movs	r2, #63	; 0x3f
 8001262:	2100      	movs	r1, #0
 8001264:	2078      	movs	r0, #120	; 0x78
 8001266:	f000 fa45 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800126a:	22a4      	movs	r2, #164	; 0xa4
 800126c:	2100      	movs	r1, #0
 800126e:	2078      	movs	r0, #120	; 0x78
 8001270:	f000 fa40 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001274:	22d3      	movs	r2, #211	; 0xd3
 8001276:	2100      	movs	r1, #0
 8001278:	2078      	movs	r0, #120	; 0x78
 800127a:	f000 fa3b 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	2078      	movs	r0, #120	; 0x78
 8001284:	f000 fa36 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001288:	22d5      	movs	r2, #213	; 0xd5
 800128a:	2100      	movs	r1, #0
 800128c:	2078      	movs	r0, #120	; 0x78
 800128e:	f000 fa31 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001292:	22f0      	movs	r2, #240	; 0xf0
 8001294:	2100      	movs	r1, #0
 8001296:	2078      	movs	r0, #120	; 0x78
 8001298:	f000 fa2c 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800129c:	22d9      	movs	r2, #217	; 0xd9
 800129e:	2100      	movs	r1, #0
 80012a0:	2078      	movs	r0, #120	; 0x78
 80012a2:	f000 fa27 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80012a6:	2222      	movs	r2, #34	; 0x22
 80012a8:	2100      	movs	r1, #0
 80012aa:	2078      	movs	r0, #120	; 0x78
 80012ac:	f000 fa22 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80012b0:	22da      	movs	r2, #218	; 0xda
 80012b2:	2100      	movs	r1, #0
 80012b4:	2078      	movs	r0, #120	; 0x78
 80012b6:	f000 fa1d 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80012ba:	2212      	movs	r2, #18
 80012bc:	2100      	movs	r1, #0
 80012be:	2078      	movs	r0, #120	; 0x78
 80012c0:	f000 fa18 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80012c4:	22db      	movs	r2, #219	; 0xdb
 80012c6:	2100      	movs	r1, #0
 80012c8:	2078      	movs	r0, #120	; 0x78
 80012ca:	f000 fa13 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80012ce:	2220      	movs	r2, #32
 80012d0:	2100      	movs	r1, #0
 80012d2:	2078      	movs	r0, #120	; 0x78
 80012d4:	f000 fa0e 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80012d8:	228d      	movs	r2, #141	; 0x8d
 80012da:	2100      	movs	r1, #0
 80012dc:	2078      	movs	r0, #120	; 0x78
 80012de:	f000 fa09 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80012e2:	2214      	movs	r2, #20
 80012e4:	2100      	movs	r1, #0
 80012e6:	2078      	movs	r0, #120	; 0x78
 80012e8:	f000 fa04 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80012ec:	22af      	movs	r2, #175	; 0xaf
 80012ee:	2100      	movs	r1, #0
 80012f0:	2078      	movs	r0, #120	; 0x78
 80012f2:	f000 f9ff 	bl	80016f4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80012f6:	222e      	movs	r2, #46	; 0x2e
 80012f8:	2100      	movs	r1, #0
 80012fa:	2078      	movs	r0, #120	; 0x78
 80012fc:	f000 f9fa 	bl	80016f4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001300:	2000      	movs	r0, #0
 8001302:	f000 f843 	bl	800138c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001306:	f000 f813 	bl	8001330 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <SSD1306_Init+0x184>)
 800130c:	2200      	movs	r2, #0
 800130e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <SSD1306_Init+0x184>)
 8001312:	2200      	movs	r2, #0
 8001314:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <SSD1306_Init+0x184>)
 8001318:	2201      	movs	r2, #1
 800131a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800131c:	2301      	movs	r3, #1
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000200 	.word	0x20000200
 800132c:	2000072c 	.word	0x2000072c

08001330 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001336:	2300      	movs	r3, #0
 8001338:	71fb      	strb	r3, [r7, #7]
 800133a:	e01d      	b.n	8001378 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	3b50      	subs	r3, #80	; 0x50
 8001340:	b2db      	uxtb	r3, r3
 8001342:	461a      	mov	r2, r3
 8001344:	2100      	movs	r1, #0
 8001346:	2078      	movs	r0, #120	; 0x78
 8001348:	f000 f9d4 	bl	80016f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800134c:	2200      	movs	r2, #0
 800134e:	2100      	movs	r1, #0
 8001350:	2078      	movs	r0, #120	; 0x78
 8001352:	f000 f9cf 	bl	80016f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001356:	2210      	movs	r2, #16
 8001358:	2100      	movs	r1, #0
 800135a:	2078      	movs	r0, #120	; 0x78
 800135c:	f000 f9ca 	bl	80016f4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	01db      	lsls	r3, r3, #7
 8001364:	4a08      	ldr	r2, [pc, #32]	; (8001388 <SSD1306_UpdateScreen+0x58>)
 8001366:	441a      	add	r2, r3
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	2140      	movs	r1, #64	; 0x40
 800136c:	2078      	movs	r0, #120	; 0x78
 800136e:	f000 f95b 	bl	8001628 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	3301      	adds	r3, #1
 8001376:	71fb      	strb	r3, [r7, #7]
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	2b07      	cmp	r3, #7
 800137c:	d9de      	bls.n	800133c <SSD1306_UpdateScreen+0xc>
	}
}
 800137e:	bf00      	nop
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2000032c 	.word	0x2000032c

0800138c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <SSD1306_Fill+0x14>
 800139c:	2300      	movs	r3, #0
 800139e:	e000      	b.n	80013a2 <SSD1306_Fill+0x16>
 80013a0:	23ff      	movs	r3, #255	; 0xff
 80013a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a6:	4619      	mov	r1, r3
 80013a8:	4803      	ldr	r0, [pc, #12]	; (80013b8 <SSD1306_Fill+0x2c>)
 80013aa:	f003 ff9c 	bl	80052e6 <memset>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000032c 	.word	0x2000032c

080013bc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	80fb      	strh	r3, [r7, #6]
 80013c6:	460b      	mov	r3, r1
 80013c8:	80bb      	strh	r3, [r7, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	70fb      	strb	r3, [r7, #3]
	if (
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	2b7f      	cmp	r3, #127	; 0x7f
 80013d2:	d848      	bhi.n	8001466 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80013d4:	88bb      	ldrh	r3, [r7, #4]
 80013d6:	2b3f      	cmp	r3, #63	; 0x3f
 80013d8:	d845      	bhi.n	8001466 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80013da:	4b25      	ldr	r3, [pc, #148]	; (8001470 <SSD1306_DrawPixel+0xb4>)
 80013dc:	791b      	ldrb	r3, [r3, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	bf0c      	ite	eq
 80013e8:	2301      	moveq	r3, #1
 80013ea:	2300      	movne	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d11a      	bne.n	800142c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80013f6:	88fa      	ldrh	r2, [r7, #6]
 80013f8:	88bb      	ldrh	r3, [r7, #4]
 80013fa:	08db      	lsrs	r3, r3, #3
 80013fc:	b298      	uxth	r0, r3
 80013fe:	4603      	mov	r3, r0
 8001400:	01db      	lsls	r3, r3, #7
 8001402:	4413      	add	r3, r2
 8001404:	4a1b      	ldr	r2, [pc, #108]	; (8001474 <SSD1306_DrawPixel+0xb8>)
 8001406:	5cd3      	ldrb	r3, [r2, r3]
 8001408:	b25a      	sxtb	r2, r3
 800140a:	88bb      	ldrh	r3, [r7, #4]
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	2101      	movs	r1, #1
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	b25b      	sxtb	r3, r3
 8001418:	4313      	orrs	r3, r2
 800141a:	b259      	sxtb	r1, r3
 800141c:	88fa      	ldrh	r2, [r7, #6]
 800141e:	4603      	mov	r3, r0
 8001420:	01db      	lsls	r3, r3, #7
 8001422:	4413      	add	r3, r2
 8001424:	b2c9      	uxtb	r1, r1
 8001426:	4a13      	ldr	r2, [pc, #76]	; (8001474 <SSD1306_DrawPixel+0xb8>)
 8001428:	54d1      	strb	r1, [r2, r3]
 800142a:	e01d      	b.n	8001468 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800142c:	88fa      	ldrh	r2, [r7, #6]
 800142e:	88bb      	ldrh	r3, [r7, #4]
 8001430:	08db      	lsrs	r3, r3, #3
 8001432:	b298      	uxth	r0, r3
 8001434:	4603      	mov	r3, r0
 8001436:	01db      	lsls	r3, r3, #7
 8001438:	4413      	add	r3, r2
 800143a:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <SSD1306_DrawPixel+0xb8>)
 800143c:	5cd3      	ldrb	r3, [r2, r3]
 800143e:	b25a      	sxtb	r2, r3
 8001440:	88bb      	ldrh	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	2101      	movs	r1, #1
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	b25b      	sxtb	r3, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	b25b      	sxtb	r3, r3
 8001452:	4013      	ands	r3, r2
 8001454:	b259      	sxtb	r1, r3
 8001456:	88fa      	ldrh	r2, [r7, #6]
 8001458:	4603      	mov	r3, r0
 800145a:	01db      	lsls	r3, r3, #7
 800145c:	4413      	add	r3, r2
 800145e:	b2c9      	uxtb	r1, r1
 8001460:	4a04      	ldr	r2, [pc, #16]	; (8001474 <SSD1306_DrawPixel+0xb8>)
 8001462:	54d1      	strb	r1, [r2, r3]
 8001464:	e000      	b.n	8001468 <SSD1306_DrawPixel+0xac>
		return;
 8001466:	bf00      	nop
	}
}
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	2000072c 	.word	0x2000072c
 8001474:	2000032c 	.word	0x2000032c

08001478 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	460a      	mov	r2, r1
 8001482:	80fb      	strh	r3, [r7, #6]
 8001484:	4613      	mov	r3, r2
 8001486:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001488:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <SSD1306_GotoXY+0x28>)
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <SSD1306_GotoXY+0x28>)
 8001490:	88bb      	ldrh	r3, [r7, #4]
 8001492:	8053      	strh	r3, [r2, #2]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	2000072c 	.word	0x2000072c

080014a4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
 80014b0:	4613      	mov	r3, r2
 80014b2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80014b4:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <SSD1306_Putc+0xfc>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
	if (
 80014c0:	2b7f      	cmp	r3, #127	; 0x7f
 80014c2:	dc07      	bgt.n	80014d4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80014c4:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <SSD1306_Putc+0xfc>)
 80014c6:	885b      	ldrh	r3, [r3, #2]
 80014c8:	461a      	mov	r2, r3
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	785b      	ldrb	r3, [r3, #1]
 80014ce:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80014d0:	2b3f      	cmp	r3, #63	; 0x3f
 80014d2:	dd01      	ble.n	80014d8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e05e      	b.n	8001596 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	e04b      	b.n	8001576 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	3b20      	subs	r3, #32
 80014e6:	6839      	ldr	r1, [r7, #0]
 80014e8:	7849      	ldrb	r1, [r1, #1]
 80014ea:	fb01 f303 	mul.w	r3, r1, r3
 80014ee:	4619      	mov	r1, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	440b      	add	r3, r1
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	e030      	b.n	8001564 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d010      	beq.n	8001534 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001512:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <SSD1306_Putc+0xfc>)
 8001514:	881a      	ldrh	r2, [r3, #0]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	b29b      	uxth	r3, r3
 800151a:	4413      	add	r3, r2
 800151c:	b298      	uxth	r0, r3
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <SSD1306_Putc+0xfc>)
 8001520:	885a      	ldrh	r2, [r3, #2]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	b29b      	uxth	r3, r3
 8001526:	4413      	add	r3, r2
 8001528:	b29b      	uxth	r3, r3
 800152a:	79ba      	ldrb	r2, [r7, #6]
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff ff45 	bl	80013bc <SSD1306_DrawPixel>
 8001532:	e014      	b.n	800155e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <SSD1306_Putc+0xfc>)
 8001536:	881a      	ldrh	r2, [r3, #0]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	b29b      	uxth	r3, r3
 800153c:	4413      	add	r3, r2
 800153e:	b298      	uxth	r0, r3
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <SSD1306_Putc+0xfc>)
 8001542:	885a      	ldrh	r2, [r3, #2]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	b29b      	uxth	r3, r3
 8001548:	4413      	add	r3, r2
 800154a:	b299      	uxth	r1, r3
 800154c:	79bb      	ldrb	r3, [r7, #6]
 800154e:	2b00      	cmp	r3, #0
 8001550:	bf0c      	ite	eq
 8001552:	2301      	moveq	r3, #1
 8001554:	2300      	movne	r3, #0
 8001556:	b2db      	uxtb	r3, r3
 8001558:	461a      	mov	r2, r3
 800155a:	f7ff ff2f 	bl	80013bc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	3301      	adds	r3, #1
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4293      	cmp	r3, r2
 800156e:	d3c8      	bcc.n	8001502 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	3301      	adds	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	785b      	ldrb	r3, [r3, #1]
 800157a:	461a      	mov	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	4293      	cmp	r3, r2
 8001580:	d3ad      	bcc.n	80014de <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <SSD1306_Putc+0xfc>)
 8001584:	881a      	ldrh	r2, [r3, #0]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b29b      	uxth	r3, r3
 800158c:	4413      	add	r3, r2
 800158e:	b29a      	uxth	r2, r3
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <SSD1306_Putc+0xfc>)
 8001592:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001594:	79fb      	ldrb	r3, [r7, #7]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	2000072c 	.word	0x2000072c

080015a4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	4613      	mov	r3, r2
 80015b0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80015b2:	e012      	b.n	80015da <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	79fa      	ldrb	r2, [r7, #7]
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff71 	bl	80014a4 <SSD1306_Putc>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d002      	beq.n	80015d4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	e008      	b.n	80015e6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3301      	adds	r3, #1
 80015d8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1e8      	bne.n	80015b4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	781b      	ldrb	r3, [r3, #0]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80015f2:	2000      	movs	r0, #0
 80015f4:	f7ff feca 	bl	800138c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80015f8:	f7ff fe9a 	bl	8001330 <SSD1306_UpdateScreen>
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}

08001600 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001606:	4b07      	ldr	r3, [pc, #28]	; (8001624 <ssd1306_I2C_Init+0x24>)
 8001608:	607b      	str	r3, [r7, #4]
	while(p>0)
 800160a:	e002      	b.n	8001612 <ssd1306_I2C_Init+0x12>
		p--;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f9      	bne.n	800160c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	0003d090 	.word	0x0003d090

08001628 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b0c7      	sub	sp, #284	; 0x11c
 800162c:	af02      	add	r7, sp, #8
 800162e:	4604      	mov	r4, r0
 8001630:	4608      	mov	r0, r1
 8001632:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001636:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800163a:	600a      	str	r2, [r1, #0]
 800163c:	4619      	mov	r1, r3
 800163e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001642:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001646:	4622      	mov	r2, r4
 8001648:	701a      	strb	r2, [r3, #0]
 800164a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800164e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001652:	4602      	mov	r2, r0
 8001654:	701a      	strb	r2, [r3, #0]
 8001656:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800165a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800165e:	460a      	mov	r2, r1
 8001660:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001662:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001666:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800166a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800166e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001672:	7812      	ldrb	r2, [r2, #0]
 8001674:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001676:	2300      	movs	r3, #0
 8001678:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800167c:	e015      	b.n	80016aa <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800167e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001682:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001686:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	441a      	add	r2, r3
 800168e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001692:	3301      	adds	r3, #1
 8001694:	7811      	ldrb	r1, [r2, #0]
 8001696:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800169a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800169e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80016a0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80016a4:	3301      	adds	r3, #1
 80016a6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80016aa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80016b4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80016b8:	8812      	ldrh	r2, [r2, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d8df      	bhi.n	800167e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 80016be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016c2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b299      	uxth	r1, r3
 80016ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	f107 020c 	add.w	r2, r7, #12
 80016dc:	200a      	movs	r0, #10
 80016de:	9000      	str	r0, [sp, #0]
 80016e0:	4803      	ldr	r0, [pc, #12]	; (80016f0 <ssd1306_I2C_WriteMulti+0xc8>)
 80016e2:	f000 fea7 	bl	8002434 <HAL_I2C_Master_Transmit>
}
 80016e6:	bf00      	nop
 80016e8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd90      	pop	{r4, r7, pc}
 80016f0:	20000200 	.word	0x20000200

080016f4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af02      	add	r7, sp, #8
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
 80016fe:	460b      	mov	r3, r1
 8001700:	71bb      	strb	r3, [r7, #6]
 8001702:	4613      	mov	r3, r2
 8001704:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001706:	79bb      	ldrb	r3, [r7, #6]
 8001708:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800170a:	797b      	ldrb	r3, [r7, #5]
 800170c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	b299      	uxth	r1, r3
 8001712:	f107 020c 	add.w	r2, r7, #12
 8001716:	230a      	movs	r3, #10
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2302      	movs	r3, #2
 800171c:	4803      	ldr	r0, [pc, #12]	; (800172c <ssd1306_I2C_Write+0x38>)
 800171e:	f000 fe89 	bl	8002434 <HAL_I2C_Master_Transmit>
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000200 	.word	0x20000200

08001730 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <HAL_MspInit+0x40>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <HAL_MspInit+0x40>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6193      	str	r3, [r2, #24]
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_MspInit+0x40>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <HAL_MspInit+0x40>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a07      	ldr	r2, [pc, #28]	; (8001770 <HAL_MspInit+0x40>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001758:	61d3      	str	r3, [r2, #28]
 800175a:	4b05      	ldr	r3, [pc, #20]	; (8001770 <HAL_MspInit+0x40>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	40021000 	.word	0x40021000

08001774 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a16      	ldr	r2, [pc, #88]	; (80017e8 <HAL_I2C_MspInit+0x74>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d124      	bne.n	80017de <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_I2C_MspInit+0x78>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	4a14      	ldr	r2, [pc, #80]	; (80017ec <HAL_I2C_MspInit+0x78>)
 800179a:	f043 0308 	orr.w	r3, r3, #8
 800179e:	6193      	str	r3, [r2, #24]
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_I2C_MspInit+0x78>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b2:	2312      	movs	r3, #18
 80017b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ba:	f107 0310 	add.w	r3, r7, #16
 80017be:	4619      	mov	r1, r3
 80017c0:	480b      	ldr	r0, [pc, #44]	; (80017f0 <HAL_I2C_MspInit+0x7c>)
 80017c2:	f000 fb3f 	bl	8001e44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_I2C_MspInit+0x78>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	4a08      	ldr	r2, [pc, #32]	; (80017ec <HAL_I2C_MspInit+0x78>)
 80017cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017d0:	61d3      	str	r3, [r2, #28]
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_I2C_MspInit+0x78>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017de:	bf00      	nop
 80017e0:	3720      	adds	r7, #32
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40005800 	.word	0x40005800
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40010c00 	.word	0x40010c00

080017f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a09      	ldr	r2, [pc, #36]	; (8001828 <HAL_TIM_Base_MspInit+0x34>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d10b      	bne.n	800181e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_TIM_Base_MspInit+0x38>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	4a08      	ldr	r2, [pc, #32]	; (800182c <HAL_TIM_Base_MspInit+0x38>)
 800180c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001810:	6193      	str	r3, [r2, #24]
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_TIM_Base_MspInit+0x38>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	40012c00 	.word	0x40012c00
 800182c:	40021000 	.word	0x40021000

08001830 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800184e:	d123      	bne.n	8001898 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <HAL_TIM_Encoder_MspInit+0x70>)
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <HAL_TIM_Encoder_MspInit+0x70>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	61d3      	str	r3, [r2, #28]
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_TIM_Encoder_MspInit+0x70>)
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001868:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <HAL_TIM_Encoder_MspInit+0x70>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a0c      	ldr	r2, [pc, #48]	; (80018a0 <HAL_TIM_Encoder_MspInit+0x70>)
 800186e:	f043 0304 	orr.w	r3, r3, #4
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <HAL_TIM_Encoder_MspInit+0x70>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001880:	2303      	movs	r3, #3
 8001882:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001888:	2301      	movs	r3, #1
 800188a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	4619      	mov	r1, r3
 8001892:	4804      	ldr	r0, [pc, #16]	; (80018a4 <HAL_TIM_Encoder_MspInit+0x74>)
 8001894:	f000 fad6 	bl	8001e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001898:	bf00      	nop
 800189a:	3720      	adds	r7, #32
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40010800 	.word	0x40010800

080018a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a09      	ldr	r2, [pc, #36]	; (80018dc <HAL_TIM_PWM_MspInit+0x34>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d10b      	bne.n	80018d2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_TIM_PWM_MspInit+0x38>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <HAL_TIM_PWM_MspInit+0x38>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	61d3      	str	r3, [r2, #28]
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_TIM_PWM_MspInit+0x38>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	40000400 	.word	0x40000400
 80018e0:	40021000 	.word	0x40021000

080018e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a0f      	ldr	r2, [pc, #60]	; (800193c <HAL_TIM_MspPostInit+0x58>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d117      	bne.n	8001934 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_TIM_MspPostInit+0x5c>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <HAL_TIM_MspPostInit+0x5c>)
 800190a:	f043 0304 	orr.w	r3, r3, #4
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_TIM_MspPostInit+0x5c>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800191c:	2340      	movs	r3, #64	; 0x40
 800191e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2302      	movs	r3, #2
 8001926:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	f107 0310 	add.w	r3, r7, #16
 800192c:	4619      	mov	r1, r3
 800192e:	4805      	ldr	r0, [pc, #20]	; (8001944 <HAL_TIM_MspPostInit+0x60>)
 8001930:	f000 fa88 	bl	8001e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001934:	bf00      	nop
 8001936:	3720      	adds	r7, #32
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40000400 	.word	0x40000400
 8001940:	40021000 	.word	0x40021000
 8001944:	40010800 	.word	0x40010800

08001948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800194c:	e7fe      	b.n	800194c <NMI_Handler+0x4>

0800194e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <HardFault_Handler+0x4>

08001954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <MemManage_Handler+0x4>

0800195a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195e:	e7fe      	b.n	800195e <BusFault_Handler+0x4>

08001960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <UsageFault_Handler+0x4>

08001966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr

0800198a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800198e:	f000 f935 	bl	8001bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}

08001996 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  return 1;
 800199a:	2301      	movs	r3, #1
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <_kill>:

int _kill(int pid, int sig)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ae:	f003 fced 	bl	800538c <__errno>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2216      	movs	r2, #22
 80019b6:	601a      	str	r2, [r3, #0]
  return -1;
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <_exit>:

void _exit (int status)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ffe7 	bl	80019a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019d6:	e7fe      	b.n	80019d6 <_exit+0x12>

080019d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	e00a      	b.n	8001a00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ea:	f3af 8000 	nop.w
 80019ee:	4601      	mov	r1, r0
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	60ba      	str	r2, [r7, #8]
 80019f6:	b2ca      	uxtb	r2, r1
 80019f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3301      	adds	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	dbf0      	blt.n	80019ea <_read+0x12>
  }

  return len;
 8001a08:	687b      	ldr	r3, [r7, #4]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	e009      	b.n	8001a38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	60ba      	str	r2, [r7, #8]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbf1      	blt.n	8001a24 <_write+0x12>
  }
  return len;
 8001a40:	687b      	ldr	r3, [r7, #4]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_close>:

int _close(int file)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a70:	605a      	str	r2, [r3, #4]
  return 0;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <_isatty>:

int _isatty(int file)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
	...

08001aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab4:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <_sbrk+0x5c>)
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <_sbrk+0x60>)
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac0:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <_sbrk+0x64>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <_sbrk+0x64>)
 8001aca:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <_sbrk+0x68>)
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d207      	bcs.n	8001aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001adc:	f003 fc56 	bl	800538c <__errno>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aea:	e009      	b.n	8001b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <_sbrk+0x64>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	4a05      	ldr	r2, [pc, #20]	; (8001b10 <_sbrk+0x64>)
 8001afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001afe:	68fb      	ldr	r3, [r7, #12]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20005000 	.word	0x20005000
 8001b0c:	00000400 	.word	0x00000400
 8001b10:	20000734 	.word	0x20000734
 8001b14:	20000888 	.word	0x20000888

08001b18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b24:	f7ff fff8 	bl	8001b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b28:	480b      	ldr	r0, [pc, #44]	; (8001b58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b2a:	490c      	ldr	r1, [pc, #48]	; (8001b5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b2c:	4a0c      	ldr	r2, [pc, #48]	; (8001b60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b30:	e002      	b.n	8001b38 <LoopCopyDataInit>

08001b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b36:	3304      	adds	r3, #4

08001b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b3c:	d3f9      	bcc.n	8001b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3e:	4a09      	ldr	r2, [pc, #36]	; (8001b64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b40:	4c09      	ldr	r4, [pc, #36]	; (8001b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b44:	e001      	b.n	8001b4a <LoopFillZerobss>

08001b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b48:	3204      	adds	r2, #4

08001b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b4c:	d3fb      	bcc.n	8001b46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b4e:	f003 fc23 	bl	8005398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b52:	f7ff f841 	bl	8000bd8 <main>
  bx lr
 8001b56:	4770      	bx	lr
  ldr r0, =_sdata
 8001b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b5c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001b60:	0800b098 	.word	0x0800b098
  ldr r2, =_sbss
 8001b64:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001b68:	20000888 	.word	0x20000888

08001b6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC1_2_IRQHandler>
	...

08001b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <HAL_Init+0x28>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <HAL_Init+0x28>)
 8001b7a:	f043 0310 	orr.w	r3, r3, #16
 8001b7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b80:	2003      	movs	r0, #3
 8001b82:	f000 f92b 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b86:	200f      	movs	r0, #15
 8001b88:	f000 f808 	bl	8001b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b8c:	f7ff fdd0 	bl	8001730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40022000 	.word	0x40022000

08001b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_InitTick+0x54>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_InitTick+0x58>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 f935 	bl	8001e2a <HAL_SYSTICK_Config>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00e      	b.n	8001be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b0f      	cmp	r3, #15
 8001bce:	d80a      	bhi.n	8001be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bd8:	f000 f90b 	bl	8001df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bdc:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <HAL_InitTick+0x5c>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e000      	b.n	8001be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000010 	.word	0x20000010
 8001bf4:	20000018 	.word	0x20000018
 8001bf8:	20000014 	.word	0x20000014

08001bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_IncTick+0x1c>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_IncTick+0x20>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4a03      	ldr	r2, [pc, #12]	; (8001c1c <HAL_IncTick+0x20>)
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	20000018 	.word	0x20000018
 8001c1c:	20000738 	.word	0x20000738

08001c20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return uwTick;
 8001c24:	4b02      	ldr	r3, [pc, #8]	; (8001c30 <HAL_GetTick+0x10>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr
 8001c30:	20000738 	.word	0x20000738

08001c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c3c:	f7ff fff0 	bl	8001c20 <HAL_GetTick>
 8001c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c4c:	d005      	beq.n	8001c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_Delay+0x44>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c5a:	bf00      	nop
 8001c5c:	f7ff ffe0 	bl	8001c20 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d8f7      	bhi.n	8001c5c <HAL_Delay+0x28>
  {
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000018 	.word	0x20000018

08001c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cae:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	60d3      	str	r3, [r2, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <__NVIC_GetPriorityGrouping+0x18>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	f003 0307 	and.w	r3, r3, #7
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	; (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	; (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
         );
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	; 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dbc:	f7ff ff90 	bl	8001ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff49 	bl	8001c7c <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e04:	f7ff ff5e 	bl	8001cc4 <__NVIC_GetPriorityGrouping>
 8001e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f7ff ff90 	bl	8001d34 <NVIC_EncodePriority>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff5f 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ffb0 	bl	8001d98 <SysTick_Config>
 8001e38:	4603      	mov	r3, r0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b08b      	sub	sp, #44	; 0x2c
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e52:	2300      	movs	r3, #0
 8001e54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e56:	e169      	b.n	800212c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	f040 8158 	bne.w	8002126 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4a9a      	ldr	r2, [pc, #616]	; (80020e4 <HAL_GPIO_Init+0x2a0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d05e      	beq.n	8001f3e <HAL_GPIO_Init+0xfa>
 8001e80:	4a98      	ldr	r2, [pc, #608]	; (80020e4 <HAL_GPIO_Init+0x2a0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d875      	bhi.n	8001f72 <HAL_GPIO_Init+0x12e>
 8001e86:	4a98      	ldr	r2, [pc, #608]	; (80020e8 <HAL_GPIO_Init+0x2a4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d058      	beq.n	8001f3e <HAL_GPIO_Init+0xfa>
 8001e8c:	4a96      	ldr	r2, [pc, #600]	; (80020e8 <HAL_GPIO_Init+0x2a4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d86f      	bhi.n	8001f72 <HAL_GPIO_Init+0x12e>
 8001e92:	4a96      	ldr	r2, [pc, #600]	; (80020ec <HAL_GPIO_Init+0x2a8>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d052      	beq.n	8001f3e <HAL_GPIO_Init+0xfa>
 8001e98:	4a94      	ldr	r2, [pc, #592]	; (80020ec <HAL_GPIO_Init+0x2a8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d869      	bhi.n	8001f72 <HAL_GPIO_Init+0x12e>
 8001e9e:	4a94      	ldr	r2, [pc, #592]	; (80020f0 <HAL_GPIO_Init+0x2ac>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d04c      	beq.n	8001f3e <HAL_GPIO_Init+0xfa>
 8001ea4:	4a92      	ldr	r2, [pc, #584]	; (80020f0 <HAL_GPIO_Init+0x2ac>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d863      	bhi.n	8001f72 <HAL_GPIO_Init+0x12e>
 8001eaa:	4a92      	ldr	r2, [pc, #584]	; (80020f4 <HAL_GPIO_Init+0x2b0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d046      	beq.n	8001f3e <HAL_GPIO_Init+0xfa>
 8001eb0:	4a90      	ldr	r2, [pc, #576]	; (80020f4 <HAL_GPIO_Init+0x2b0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d85d      	bhi.n	8001f72 <HAL_GPIO_Init+0x12e>
 8001eb6:	2b12      	cmp	r3, #18
 8001eb8:	d82a      	bhi.n	8001f10 <HAL_GPIO_Init+0xcc>
 8001eba:	2b12      	cmp	r3, #18
 8001ebc:	d859      	bhi.n	8001f72 <HAL_GPIO_Init+0x12e>
 8001ebe:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <HAL_GPIO_Init+0x80>)
 8001ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec4:	08001f3f 	.word	0x08001f3f
 8001ec8:	08001f19 	.word	0x08001f19
 8001ecc:	08001f2b 	.word	0x08001f2b
 8001ed0:	08001f6d 	.word	0x08001f6d
 8001ed4:	08001f73 	.word	0x08001f73
 8001ed8:	08001f73 	.word	0x08001f73
 8001edc:	08001f73 	.word	0x08001f73
 8001ee0:	08001f73 	.word	0x08001f73
 8001ee4:	08001f73 	.word	0x08001f73
 8001ee8:	08001f73 	.word	0x08001f73
 8001eec:	08001f73 	.word	0x08001f73
 8001ef0:	08001f73 	.word	0x08001f73
 8001ef4:	08001f73 	.word	0x08001f73
 8001ef8:	08001f73 	.word	0x08001f73
 8001efc:	08001f73 	.word	0x08001f73
 8001f00:	08001f73 	.word	0x08001f73
 8001f04:	08001f73 	.word	0x08001f73
 8001f08:	08001f21 	.word	0x08001f21
 8001f0c:	08001f35 	.word	0x08001f35
 8001f10:	4a79      	ldr	r2, [pc, #484]	; (80020f8 <HAL_GPIO_Init+0x2b4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d013      	beq.n	8001f3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f16:	e02c      	b.n	8001f72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	623b      	str	r3, [r7, #32]
          break;
 8001f1e:	e029      	b.n	8001f74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	3304      	adds	r3, #4
 8001f26:	623b      	str	r3, [r7, #32]
          break;
 8001f28:	e024      	b.n	8001f74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	3308      	adds	r3, #8
 8001f30:	623b      	str	r3, [r7, #32]
          break;
 8001f32:	e01f      	b.n	8001f74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	330c      	adds	r3, #12
 8001f3a:	623b      	str	r3, [r7, #32]
          break;
 8001f3c:	e01a      	b.n	8001f74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d102      	bne.n	8001f4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f46:	2304      	movs	r3, #4
 8001f48:	623b      	str	r3, [r7, #32]
          break;
 8001f4a:	e013      	b.n	8001f74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d105      	bne.n	8001f60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f54:	2308      	movs	r3, #8
 8001f56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	611a      	str	r2, [r3, #16]
          break;
 8001f5e:	e009      	b.n	8001f74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f60:	2308      	movs	r3, #8
 8001f62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69fa      	ldr	r2, [r7, #28]
 8001f68:	615a      	str	r2, [r3, #20]
          break;
 8001f6a:	e003      	b.n	8001f74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	623b      	str	r3, [r7, #32]
          break;
 8001f70:	e000      	b.n	8001f74 <HAL_GPIO_Init+0x130>
          break;
 8001f72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	2bff      	cmp	r3, #255	; 0xff
 8001f78:	d801      	bhi.n	8001f7e <HAL_GPIO_Init+0x13a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	e001      	b.n	8001f82 <HAL_GPIO_Init+0x13e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3304      	adds	r3, #4
 8001f82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	2bff      	cmp	r3, #255	; 0xff
 8001f88:	d802      	bhi.n	8001f90 <HAL_GPIO_Init+0x14c>
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	e002      	b.n	8001f96 <HAL_GPIO_Init+0x152>
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	3b08      	subs	r3, #8
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	210f      	movs	r1, #15
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	6a39      	ldr	r1, [r7, #32]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 80b1 	beq.w	8002126 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fc4:	4b4d      	ldr	r3, [pc, #308]	; (80020fc <HAL_GPIO_Init+0x2b8>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	4a4c      	ldr	r2, [pc, #304]	; (80020fc <HAL_GPIO_Init+0x2b8>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6193      	str	r3, [r2, #24]
 8001fd0:	4b4a      	ldr	r3, [pc, #296]	; (80020fc <HAL_GPIO_Init+0x2b8>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fdc:	4a48      	ldr	r2, [pc, #288]	; (8002100 <HAL_GPIO_Init+0x2bc>)
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	089b      	lsrs	r3, r3, #2
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	220f      	movs	r2, #15
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a40      	ldr	r2, [pc, #256]	; (8002104 <HAL_GPIO_Init+0x2c0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d013      	beq.n	8002030 <HAL_GPIO_Init+0x1ec>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a3f      	ldr	r2, [pc, #252]	; (8002108 <HAL_GPIO_Init+0x2c4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d00d      	beq.n	800202c <HAL_GPIO_Init+0x1e8>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a3e      	ldr	r2, [pc, #248]	; (800210c <HAL_GPIO_Init+0x2c8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d007      	beq.n	8002028 <HAL_GPIO_Init+0x1e4>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a3d      	ldr	r2, [pc, #244]	; (8002110 <HAL_GPIO_Init+0x2cc>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d101      	bne.n	8002024 <HAL_GPIO_Init+0x1e0>
 8002020:	2303      	movs	r3, #3
 8002022:	e006      	b.n	8002032 <HAL_GPIO_Init+0x1ee>
 8002024:	2304      	movs	r3, #4
 8002026:	e004      	b.n	8002032 <HAL_GPIO_Init+0x1ee>
 8002028:	2302      	movs	r3, #2
 800202a:	e002      	b.n	8002032 <HAL_GPIO_Init+0x1ee>
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <HAL_GPIO_Init+0x1ee>
 8002030:	2300      	movs	r3, #0
 8002032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002034:	f002 0203 	and.w	r2, r2, #3
 8002038:	0092      	lsls	r2, r2, #2
 800203a:	4093      	lsls	r3, r2
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002042:	492f      	ldr	r1, [pc, #188]	; (8002100 <HAL_GPIO_Init+0x2bc>)
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	3302      	adds	r3, #2
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d006      	beq.n	800206a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800205c:	4b2d      	ldr	r3, [pc, #180]	; (8002114 <HAL_GPIO_Init+0x2d0>)
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	492c      	ldr	r1, [pc, #176]	; (8002114 <HAL_GPIO_Init+0x2d0>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	608b      	str	r3, [r1, #8]
 8002068:	e006      	b.n	8002078 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800206a:	4b2a      	ldr	r3, [pc, #168]	; (8002114 <HAL_GPIO_Init+0x2d0>)
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	43db      	mvns	r3, r3
 8002072:	4928      	ldr	r1, [pc, #160]	; (8002114 <HAL_GPIO_Init+0x2d0>)
 8002074:	4013      	ands	r3, r2
 8002076:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d006      	beq.n	8002092 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002084:	4b23      	ldr	r3, [pc, #140]	; (8002114 <HAL_GPIO_Init+0x2d0>)
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	4922      	ldr	r1, [pc, #136]	; (8002114 <HAL_GPIO_Init+0x2d0>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	60cb      	str	r3, [r1, #12]
 8002090:	e006      	b.n	80020a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002092:	4b20      	ldr	r3, [pc, #128]	; (8002114 <HAL_GPIO_Init+0x2d0>)
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	43db      	mvns	r3, r3
 800209a:	491e      	ldr	r1, [pc, #120]	; (8002114 <HAL_GPIO_Init+0x2d0>)
 800209c:	4013      	ands	r3, r2
 800209e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d006      	beq.n	80020ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020ac:	4b19      	ldr	r3, [pc, #100]	; (8002114 <HAL_GPIO_Init+0x2d0>)
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	4918      	ldr	r1, [pc, #96]	; (8002114 <HAL_GPIO_Init+0x2d0>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]
 80020b8:	e006      	b.n	80020c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020ba:	4b16      	ldr	r3, [pc, #88]	; (8002114 <HAL_GPIO_Init+0x2d0>)
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	4914      	ldr	r1, [pc, #80]	; (8002114 <HAL_GPIO_Init+0x2d0>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d021      	beq.n	8002118 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <HAL_GPIO_Init+0x2d0>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	490e      	ldr	r1, [pc, #56]	; (8002114 <HAL_GPIO_Init+0x2d0>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	600b      	str	r3, [r1, #0]
 80020e0:	e021      	b.n	8002126 <HAL_GPIO_Init+0x2e2>
 80020e2:	bf00      	nop
 80020e4:	10320000 	.word	0x10320000
 80020e8:	10310000 	.word	0x10310000
 80020ec:	10220000 	.word	0x10220000
 80020f0:	10210000 	.word	0x10210000
 80020f4:	10120000 	.word	0x10120000
 80020f8:	10110000 	.word	0x10110000
 80020fc:	40021000 	.word	0x40021000
 8002100:	40010000 	.word	0x40010000
 8002104:	40010800 	.word	0x40010800
 8002108:	40010c00 	.word	0x40010c00
 800210c:	40011000 	.word	0x40011000
 8002110:	40011400 	.word	0x40011400
 8002114:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_GPIO_Init+0x304>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	43db      	mvns	r3, r3
 8002120:	4909      	ldr	r1, [pc, #36]	; (8002148 <HAL_GPIO_Init+0x304>)
 8002122:	4013      	ands	r3, r2
 8002124:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	3301      	adds	r3, #1
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	fa22 f303 	lsr.w	r3, r2, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	f47f ae8e 	bne.w	8001e58 <HAL_GPIO_Init+0x14>
  }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	372c      	adds	r7, #44	; 0x2c
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	40010400 	.word	0x40010400

0800214c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	887b      	ldrh	r3, [r7, #2]
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
 8002168:	e001      	b.n	800216e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800216a:	2300      	movs	r3, #0
 800216c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800216e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr

0800217a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	460b      	mov	r3, r1
 8002184:	807b      	strh	r3, [r7, #2]
 8002186:	4613      	mov	r3, r2
 8002188:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800218a:	787b      	ldrb	r3, [r7, #1]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002190:	887a      	ldrh	r2, [r7, #2]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002196:	e003      	b.n	80021a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002198:	887b      	ldrh	r3, [r7, #2]
 800219a:	041a      	lsls	r2, r3, #16
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	611a      	str	r2, [r3, #16]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
	...

080021ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e12b      	b.n	8002416 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d106      	bne.n	80021d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff face 	bl	8001774 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2224      	movs	r2, #36	; 0x24
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800220e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002210:	f001 f960 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8002214:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	4a81      	ldr	r2, [pc, #516]	; (8002420 <HAL_I2C_Init+0x274>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d807      	bhi.n	8002230 <HAL_I2C_Init+0x84>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4a80      	ldr	r2, [pc, #512]	; (8002424 <HAL_I2C_Init+0x278>)
 8002224:	4293      	cmp	r3, r2
 8002226:	bf94      	ite	ls
 8002228:	2301      	movls	r3, #1
 800222a:	2300      	movhi	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	e006      	b.n	800223e <HAL_I2C_Init+0x92>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4a7d      	ldr	r2, [pc, #500]	; (8002428 <HAL_I2C_Init+0x27c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	bf94      	ite	ls
 8002238:	2301      	movls	r3, #1
 800223a:	2300      	movhi	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e0e7      	b.n	8002416 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4a78      	ldr	r2, [pc, #480]	; (800242c <HAL_I2C_Init+0x280>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	0c9b      	lsrs	r3, r3, #18
 8002250:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	430a      	orrs	r2, r1
 8002264:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4a6a      	ldr	r2, [pc, #424]	; (8002420 <HAL_I2C_Init+0x274>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d802      	bhi.n	8002280 <HAL_I2C_Init+0xd4>
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	3301      	adds	r3, #1
 800227e:	e009      	b.n	8002294 <HAL_I2C_Init+0xe8>
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	4a69      	ldr	r2, [pc, #420]	; (8002430 <HAL_I2C_Init+0x284>)
 800228c:	fba2 2303 	umull	r2, r3, r2, r3
 8002290:	099b      	lsrs	r3, r3, #6
 8002292:	3301      	adds	r3, #1
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	430b      	orrs	r3, r1
 800229a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	495c      	ldr	r1, [pc, #368]	; (8002420 <HAL_I2C_Init+0x274>)
 80022b0:	428b      	cmp	r3, r1
 80022b2:	d819      	bhi.n	80022e8 <HAL_I2C_Init+0x13c>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1e59      	subs	r1, r3, #1
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	fbb1 f3f3 	udiv	r3, r1, r3
 80022c2:	1c59      	adds	r1, r3, #1
 80022c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022c8:	400b      	ands	r3, r1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00a      	beq.n	80022e4 <HAL_I2C_Init+0x138>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1e59      	subs	r1, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80022dc:	3301      	adds	r3, #1
 80022de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e2:	e051      	b.n	8002388 <HAL_I2C_Init+0x1dc>
 80022e4:	2304      	movs	r3, #4
 80022e6:	e04f      	b.n	8002388 <HAL_I2C_Init+0x1dc>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d111      	bne.n	8002314 <HAL_I2C_Init+0x168>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1e58      	subs	r0, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	440b      	add	r3, r1
 80022fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002302:	3301      	adds	r3, #1
 8002304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf0c      	ite	eq
 800230c:	2301      	moveq	r3, #1
 800230e:	2300      	movne	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	e012      	b.n	800233a <HAL_I2C_Init+0x18e>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1e58      	subs	r0, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6859      	ldr	r1, [r3, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	0099      	lsls	r1, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	fbb0 f3f3 	udiv	r3, r0, r3
 800232a:	3301      	adds	r3, #1
 800232c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002330:	2b00      	cmp	r3, #0
 8002332:	bf0c      	ite	eq
 8002334:	2301      	moveq	r3, #1
 8002336:	2300      	movne	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_I2C_Init+0x196>
 800233e:	2301      	movs	r3, #1
 8002340:	e022      	b.n	8002388 <HAL_I2C_Init+0x1dc>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10e      	bne.n	8002368 <HAL_I2C_Init+0x1bc>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1e58      	subs	r0, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6859      	ldr	r1, [r3, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	440b      	add	r3, r1
 8002358:	fbb0 f3f3 	udiv	r3, r0, r3
 800235c:	3301      	adds	r3, #1
 800235e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002366:	e00f      	b.n	8002388 <HAL_I2C_Init+0x1dc>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1e58      	subs	r0, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6859      	ldr	r1, [r3, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	0099      	lsls	r1, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	fbb0 f3f3 	udiv	r3, r0, r3
 800237e:	3301      	adds	r3, #1
 8002380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002384:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	6809      	ldr	r1, [r1, #0]
 800238c:	4313      	orrs	r3, r2
 800238e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69da      	ldr	r2, [r3, #28]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6911      	ldr	r1, [r2, #16]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68d2      	ldr	r2, [r2, #12]
 80023c2:	4311      	orrs	r1, r2
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	430b      	orrs	r3, r1
 80023ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	000186a0 	.word	0x000186a0
 8002424:	001e847f 	.word	0x001e847f
 8002428:	003d08ff 	.word	0x003d08ff
 800242c:	431bde83 	.word	0x431bde83
 8002430:	10624dd3 	.word	0x10624dd3

08002434 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af02      	add	r7, sp, #8
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	607a      	str	r2, [r7, #4]
 800243e:	461a      	mov	r2, r3
 8002440:	460b      	mov	r3, r1
 8002442:	817b      	strh	r3, [r7, #10]
 8002444:	4613      	mov	r3, r2
 8002446:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002448:	f7ff fbea 	bl	8001c20 <HAL_GetTick>
 800244c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b20      	cmp	r3, #32
 8002458:	f040 80e0 	bne.w	800261c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2319      	movs	r3, #25
 8002462:	2201      	movs	r2, #1
 8002464:	4970      	ldr	r1, [pc, #448]	; (8002628 <HAL_I2C_Master_Transmit+0x1f4>)
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 fa92 	bl	8002990 <I2C_WaitOnFlagUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002472:	2302      	movs	r3, #2
 8002474:	e0d3      	b.n	800261e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_I2C_Master_Transmit+0x50>
 8002480:	2302      	movs	r3, #2
 8002482:	e0cc      	b.n	800261e <HAL_I2C_Master_Transmit+0x1ea>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b01      	cmp	r3, #1
 8002498:	d007      	beq.n	80024aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 0201 	orr.w	r2, r2, #1
 80024a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2221      	movs	r2, #33	; 0x21
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2210      	movs	r2, #16
 80024c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	893a      	ldrh	r2, [r7, #8]
 80024da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4a50      	ldr	r2, [pc, #320]	; (800262c <HAL_I2C_Master_Transmit+0x1f8>)
 80024ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024ec:	8979      	ldrh	r1, [r7, #10]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	6a3a      	ldr	r2, [r7, #32]
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 f9ca 	bl	800288c <I2C_MasterRequestWrite>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e08d      	b.n	800261e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002518:	e066      	b.n	80025e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	6a39      	ldr	r1, [r7, #32]
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fb50 	bl	8002bc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00d      	beq.n	8002546 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	2b04      	cmp	r3, #4
 8002530:	d107      	bne.n	8002542 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002540:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e06b      	b.n	800261e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	781a      	ldrb	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002560:	b29b      	uxth	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b04      	cmp	r3, #4
 8002582:	d11b      	bne.n	80025bc <HAL_I2C_Master_Transmit+0x188>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002588:	2b00      	cmp	r3, #0
 800258a:	d017      	beq.n	80025bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	781a      	ldrb	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	6a39      	ldr	r1, [r7, #32]
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 fb47 	bl	8002c54 <I2C_WaitOnBTFFlagUntilTimeout>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00d      	beq.n	80025e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d107      	bne.n	80025e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e01a      	b.n	800261e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d194      	bne.n	800251a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	e000      	b.n	800261e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800261c:	2302      	movs	r3, #2
  }
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	00100002 	.word	0x00100002
 800262c:	ffff0000 	.word	0xffff0000

08002630 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	; 0x28
 8002634:	af02      	add	r7, sp, #8
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	607a      	str	r2, [r7, #4]
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	460b      	mov	r3, r1
 800263e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002640:	f7ff faee 	bl	8001c20 <HAL_GetTick>
 8002644:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b20      	cmp	r3, #32
 8002654:	f040 8111 	bne.w	800287a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	2319      	movs	r3, #25
 800265e:	2201      	movs	r2, #1
 8002660:	4988      	ldr	r1, [pc, #544]	; (8002884 <HAL_I2C_IsDeviceReady+0x254>)
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 f994 	bl	8002990 <I2C_WaitOnFlagUntilTimeout>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800266e:	2302      	movs	r3, #2
 8002670:	e104      	b.n	800287c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_I2C_IsDeviceReady+0x50>
 800267c:	2302      	movs	r3, #2
 800267e:	e0fd      	b.n	800287c <HAL_I2C_IsDeviceReady+0x24c>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b01      	cmp	r3, #1
 8002694:	d007      	beq.n	80026a6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0201 	orr.w	r2, r2, #1
 80026a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2224      	movs	r2, #36	; 0x24
 80026ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4a70      	ldr	r2, [pc, #448]	; (8002888 <HAL_I2C_IsDeviceReady+0x258>)
 80026c8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026d8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f952 	bl	8002990 <I2C_WaitOnFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00d      	beq.n	800270e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002700:	d103      	bne.n	800270a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e0b6      	b.n	800287c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800270e:	897b      	ldrh	r3, [r7, #10]
 8002710:	b2db      	uxtb	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800271c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800271e:	f7ff fa7f 	bl	8001c20 <HAL_GetTick>
 8002722:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b02      	cmp	r3, #2
 8002730:	bf0c      	ite	eq
 8002732:	2301      	moveq	r3, #1
 8002734:	2300      	movne	r3, #0
 8002736:	b2db      	uxtb	r3, r3
 8002738:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002748:	bf0c      	ite	eq
 800274a:	2301      	moveq	r3, #1
 800274c:	2300      	movne	r3, #0
 800274e:	b2db      	uxtb	r3, r3
 8002750:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002752:	e025      	b.n	80027a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002754:	f7ff fa64 	bl	8001c20 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d302      	bcc.n	800276a <HAL_I2C_IsDeviceReady+0x13a>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d103      	bne.n	8002772 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	22a0      	movs	r2, #160	; 0xa0
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b02      	cmp	r3, #2
 800277e:	bf0c      	ite	eq
 8002780:	2301      	moveq	r3, #1
 8002782:	2300      	movne	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2ba0      	cmp	r3, #160	; 0xa0
 80027aa:	d005      	beq.n	80027b8 <HAL_I2C_IsDeviceReady+0x188>
 80027ac:	7dfb      	ldrb	r3, [r7, #23]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d102      	bne.n	80027b8 <HAL_I2C_IsDeviceReady+0x188>
 80027b2:	7dbb      	ldrb	r3, [r7, #22]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0cd      	beq.n	8002754 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d129      	bne.n	8002822 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027dc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2319      	movs	r3, #25
 80027fa:	2201      	movs	r2, #1
 80027fc:	4921      	ldr	r1, [pc, #132]	; (8002884 <HAL_I2C_IsDeviceReady+0x254>)
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f8c6 	bl	8002990 <I2C_WaitOnFlagUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e036      	b.n	800287c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2220      	movs	r2, #32
 8002812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	e02c      	b.n	800287c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002830:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800283a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2319      	movs	r3, #25
 8002842:	2201      	movs	r2, #1
 8002844:	490f      	ldr	r1, [pc, #60]	; (8002884 <HAL_I2C_IsDeviceReady+0x254>)
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f8a2 	bl	8002990 <I2C_WaitOnFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e012      	b.n	800287c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	3301      	adds	r3, #1
 800285a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	429a      	cmp	r2, r3
 8002862:	f4ff af32 	bcc.w	80026ca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800287a:	2302      	movs	r3, #2
  }
}
 800287c:	4618      	mov	r0, r3
 800287e:	3720      	adds	r7, #32
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	00100002 	.word	0x00100002
 8002888:	ffff0000 	.word	0xffff0000

0800288c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af02      	add	r7, sp, #8
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	607a      	str	r2, [r7, #4]
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	460b      	mov	r3, r1
 800289a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d006      	beq.n	80028b6 <I2C_MasterRequestWrite+0x2a>
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d003      	beq.n	80028b6 <I2C_MasterRequestWrite+0x2a>
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028b4:	d108      	bne.n	80028c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	e00b      	b.n	80028e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028cc:	2b12      	cmp	r3, #18
 80028ce:	d107      	bne.n	80028e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 f84f 	bl	8002990 <I2C_WaitOnFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00d      	beq.n	8002914 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002906:	d103      	bne.n	8002910 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800290e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e035      	b.n	8002980 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800291c:	d108      	bne.n	8002930 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800291e:	897b      	ldrh	r3, [r7, #10]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	461a      	mov	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800292c:	611a      	str	r2, [r3, #16]
 800292e:	e01b      	b.n	8002968 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002930:	897b      	ldrh	r3, [r7, #10]
 8002932:	11db      	asrs	r3, r3, #7
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f003 0306 	and.w	r3, r3, #6
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f063 030f 	orn	r3, r3, #15
 8002940:	b2da      	uxtb	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	490e      	ldr	r1, [pc, #56]	; (8002988 <I2C_MasterRequestWrite+0xfc>)
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 f898 	bl	8002a84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e010      	b.n	8002980 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800295e:	897b      	ldrh	r3, [r7, #10]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4907      	ldr	r1, [pc, #28]	; (800298c <I2C_MasterRequestWrite+0x100>)
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 f888 	bl	8002a84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	00010008 	.word	0x00010008
 800298c:	00010002 	.word	0x00010002

08002990 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	4613      	mov	r3, r2
 800299e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a0:	e048      	b.n	8002a34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029a8:	d044      	beq.n	8002a34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029aa:	f7ff f939 	bl	8001c20 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d302      	bcc.n	80029c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d139      	bne.n	8002a34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	0c1b      	lsrs	r3, r3, #16
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d10d      	bne.n	80029e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	43da      	mvns	r2, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	4013      	ands	r3, r2
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	e00c      	b.n	8002a00 <I2C_WaitOnFlagUntilTimeout+0x70>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	43da      	mvns	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	4013      	ands	r3, r2
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf0c      	ite	eq
 80029f8:	2301      	moveq	r3, #1
 80029fa:	2300      	movne	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d116      	bne.n	8002a34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	f043 0220 	orr.w	r2, r3, #32
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e023      	b.n	8002a7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	0c1b      	lsrs	r3, r3, #16
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d10d      	bne.n	8002a5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	43da      	mvns	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bf0c      	ite	eq
 8002a50:	2301      	moveq	r3, #1
 8002a52:	2300      	movne	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	e00c      	b.n	8002a74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	43da      	mvns	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	4013      	ands	r3, r2
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d093      	beq.n	80029a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a92:	e071      	b.n	8002b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa2:	d123      	bne.n	8002aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002abc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	f043 0204 	orr.w	r2, r3, #4
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e067      	b.n	8002bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002af2:	d041      	beq.n	8002b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af4:	f7ff f894 	bl	8001c20 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d302      	bcc.n	8002b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d136      	bne.n	8002b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	0c1b      	lsrs	r3, r3, #16
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d10c      	bne.n	8002b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	bf14      	ite	ne
 8002b26:	2301      	movne	r3, #1
 8002b28:	2300      	moveq	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	e00b      	b.n	8002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	43da      	mvns	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf14      	ite	ne
 8002b40:	2301      	movne	r3, #1
 8002b42:	2300      	moveq	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d016      	beq.n	8002b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f043 0220 	orr.w	r2, r3, #32
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e021      	b.n	8002bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	0c1b      	lsrs	r3, r3, #16
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d10c      	bne.n	8002b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	43da      	mvns	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bf14      	ite	ne
 8002b94:	2301      	movne	r3, #1
 8002b96:	2300      	moveq	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	e00b      	b.n	8002bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	bf14      	ite	ne
 8002bae:	2301      	movne	r3, #1
 8002bb0:	2300      	moveq	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f47f af6d 	bne.w	8002a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bd0:	e034      	b.n	8002c3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f886 	bl	8002ce4 <I2C_IsAcknowledgeFailed>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e034      	b.n	8002c4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002be8:	d028      	beq.n	8002c3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bea:	f7ff f819 	bl	8001c20 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d302      	bcc.n	8002c00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d11d      	bne.n	8002c3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0a:	2b80      	cmp	r3, #128	; 0x80
 8002c0c:	d016      	beq.n	8002c3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	f043 0220 	orr.w	r2, r3, #32
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e007      	b.n	8002c4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c46:	2b80      	cmp	r3, #128	; 0x80
 8002c48:	d1c3      	bne.n	8002bd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c60:	e034      	b.n	8002ccc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f83e 	bl	8002ce4 <I2C_IsAcknowledgeFailed>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e034      	b.n	8002cdc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c78:	d028      	beq.n	8002ccc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7a:	f7fe ffd1 	bl	8001c20 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d302      	bcc.n	8002c90 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d11d      	bne.n	8002ccc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d016      	beq.n	8002ccc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	f043 0220 	orr.w	r2, r3, #32
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e007      	b.n	8002cdc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d1c3      	bne.n	8002c62 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cfa:	d11b      	bne.n	8002d34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	f043 0204 	orr.w	r2, r3, #4
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr

08002d40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e272      	b.n	8003238 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 8087 	beq.w	8002e6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d60:	4b92      	ldr	r3, [pc, #584]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 030c 	and.w	r3, r3, #12
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d00c      	beq.n	8002d86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d6c:	4b8f      	ldr	r3, [pc, #572]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 030c 	and.w	r3, r3, #12
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d112      	bne.n	8002d9e <HAL_RCC_OscConfig+0x5e>
 8002d78:	4b8c      	ldr	r3, [pc, #560]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d84:	d10b      	bne.n	8002d9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d86:	4b89      	ldr	r3, [pc, #548]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d06c      	beq.n	8002e6c <HAL_RCC_OscConfig+0x12c>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d168      	bne.n	8002e6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e24c      	b.n	8003238 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da6:	d106      	bne.n	8002db6 <HAL_RCC_OscConfig+0x76>
 8002da8:	4b80      	ldr	r3, [pc, #512]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a7f      	ldr	r2, [pc, #508]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	e02e      	b.n	8002e14 <HAL_RCC_OscConfig+0xd4>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x98>
 8002dbe:	4b7b      	ldr	r3, [pc, #492]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a7a      	ldr	r2, [pc, #488]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	4b78      	ldr	r3, [pc, #480]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a77      	ldr	r2, [pc, #476]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	e01d      	b.n	8002e14 <HAL_RCC_OscConfig+0xd4>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCC_OscConfig+0xbc>
 8002de2:	4b72      	ldr	r3, [pc, #456]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a71      	ldr	r2, [pc, #452]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	4b6f      	ldr	r3, [pc, #444]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a6e      	ldr	r2, [pc, #440]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e00b      	b.n	8002e14 <HAL_RCC_OscConfig+0xd4>
 8002dfc:	4b6b      	ldr	r3, [pc, #428]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a6a      	ldr	r2, [pc, #424]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	4b68      	ldr	r3, [pc, #416]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a67      	ldr	r2, [pc, #412]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d013      	beq.n	8002e44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1c:	f7fe ff00 	bl	8001c20 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e24:	f7fe fefc 	bl	8001c20 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b64      	cmp	r3, #100	; 0x64
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e200      	b.n	8003238 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	4b5d      	ldr	r3, [pc, #372]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0xe4>
 8002e42:	e014      	b.n	8002e6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7fe feec 	bl	8001c20 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e4c:	f7fe fee8 	bl	8001c20 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b64      	cmp	r3, #100	; 0x64
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e1ec      	b.n	8003238 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5e:	4b53      	ldr	r3, [pc, #332]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x10c>
 8002e6a:	e000      	b.n	8002e6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d063      	beq.n	8002f42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e7a:	4b4c      	ldr	r3, [pc, #304]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00b      	beq.n	8002e9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e86:	4b49      	ldr	r3, [pc, #292]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d11c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x18c>
 8002e92:	4b46      	ldr	r3, [pc, #280]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d116      	bne.n	8002ecc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9e:	4b43      	ldr	r3, [pc, #268]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x176>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e1c0      	b.n	8003238 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb6:	4b3d      	ldr	r3, [pc, #244]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4939      	ldr	r1, [pc, #228]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eca:	e03a      	b.n	8002f42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d020      	beq.n	8002f16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed4:	4b36      	ldr	r3, [pc, #216]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eda:	f7fe fea1 	bl	8001c20 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee2:	f7fe fe9d 	bl	8001c20 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e1a1      	b.n	8003238 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef4:	4b2d      	ldr	r3, [pc, #180]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f0      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f00:	4b2a      	ldr	r3, [pc, #168]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4927      	ldr	r1, [pc, #156]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	600b      	str	r3, [r1, #0]
 8002f14:	e015      	b.n	8002f42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f16:	4b26      	ldr	r3, [pc, #152]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7fe fe80 	bl	8001c20 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f24:	f7fe fe7c 	bl	8001c20 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e180      	b.n	8003238 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f36:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d03a      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d019      	beq.n	8002f8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f56:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <HAL_RCC_OscConfig+0x274>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5c:	f7fe fe60 	bl	8001c20 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f64:	f7fe fe5c 	bl	8001c20 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e160      	b.n	8003238 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f76:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <HAL_RCC_OscConfig+0x26c>)
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f0      	beq.n	8002f64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f82:	2001      	movs	r0, #1
 8002f84:	f000 faba 	bl	80034fc <RCC_Delay>
 8002f88:	e01c      	b.n	8002fc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <HAL_RCC_OscConfig+0x274>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f90:	f7fe fe46 	bl	8001c20 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f96:	e00f      	b.n	8002fb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f98:	f7fe fe42 	bl	8001c20 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d908      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e146      	b.n	8003238 <HAL_RCC_OscConfig+0x4f8>
 8002faa:	bf00      	nop
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	42420000 	.word	0x42420000
 8002fb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb8:	4b92      	ldr	r3, [pc, #584]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1e9      	bne.n	8002f98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 80a6 	beq.w	800311e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd6:	4b8b      	ldr	r3, [pc, #556]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10d      	bne.n	8002ffe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	4b88      	ldr	r3, [pc, #544]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	4a87      	ldr	r2, [pc, #540]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fec:	61d3      	str	r3, [r2, #28]
 8002fee:	4b85      	ldr	r3, [pc, #532]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffe:	4b82      	ldr	r3, [pc, #520]	; (8003208 <HAL_RCC_OscConfig+0x4c8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d118      	bne.n	800303c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300a:	4b7f      	ldr	r3, [pc, #508]	; (8003208 <HAL_RCC_OscConfig+0x4c8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a7e      	ldr	r2, [pc, #504]	; (8003208 <HAL_RCC_OscConfig+0x4c8>)
 8003010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003016:	f7fe fe03 	bl	8001c20 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301e:	f7fe fdff 	bl	8001c20 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b64      	cmp	r3, #100	; 0x64
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e103      	b.n	8003238 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003030:	4b75      	ldr	r3, [pc, #468]	; (8003208 <HAL_RCC_OscConfig+0x4c8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0f0      	beq.n	800301e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d106      	bne.n	8003052 <HAL_RCC_OscConfig+0x312>
 8003044:	4b6f      	ldr	r3, [pc, #444]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	4a6e      	ldr	r2, [pc, #440]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	6213      	str	r3, [r2, #32]
 8003050:	e02d      	b.n	80030ae <HAL_RCC_OscConfig+0x36e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0x334>
 800305a:	4b6a      	ldr	r3, [pc, #424]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	4a69      	ldr	r2, [pc, #420]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	6213      	str	r3, [r2, #32]
 8003066:	4b67      	ldr	r3, [pc, #412]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	4a66      	ldr	r2, [pc, #408]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 800306c:	f023 0304 	bic.w	r3, r3, #4
 8003070:	6213      	str	r3, [r2, #32]
 8003072:	e01c      	b.n	80030ae <HAL_RCC_OscConfig+0x36e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	2b05      	cmp	r3, #5
 800307a:	d10c      	bne.n	8003096 <HAL_RCC_OscConfig+0x356>
 800307c:	4b61      	ldr	r3, [pc, #388]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	4a60      	ldr	r2, [pc, #384]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 8003082:	f043 0304 	orr.w	r3, r3, #4
 8003086:	6213      	str	r3, [r2, #32]
 8003088:	4b5e      	ldr	r3, [pc, #376]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	4a5d      	ldr	r2, [pc, #372]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	6213      	str	r3, [r2, #32]
 8003094:	e00b      	b.n	80030ae <HAL_RCC_OscConfig+0x36e>
 8003096:	4b5b      	ldr	r3, [pc, #364]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	4a5a      	ldr	r2, [pc, #360]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 800309c:	f023 0301 	bic.w	r3, r3, #1
 80030a0:	6213      	str	r3, [r2, #32]
 80030a2:	4b58      	ldr	r3, [pc, #352]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	4a57      	ldr	r2, [pc, #348]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	f023 0304 	bic.w	r3, r3, #4
 80030ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d015      	beq.n	80030e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b6:	f7fe fdb3 	bl	8001c20 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030bc:	e00a      	b.n	80030d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030be:	f7fe fdaf 	bl	8001c20 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e0b1      	b.n	8003238 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d4:	4b4b      	ldr	r3, [pc, #300]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0ee      	beq.n	80030be <HAL_RCC_OscConfig+0x37e>
 80030e0:	e014      	b.n	800310c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e2:	f7fe fd9d 	bl	8001c20 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e8:	e00a      	b.n	8003100 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ea:	f7fe fd99 	bl	8001c20 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e09b      	b.n	8003238 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003100:	4b40      	ldr	r3, [pc, #256]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1ee      	bne.n	80030ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800310c:	7dfb      	ldrb	r3, [r7, #23]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d105      	bne.n	800311e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003112:	4b3c      	ldr	r3, [pc, #240]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	4a3b      	ldr	r2, [pc, #236]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 8003118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 8087 	beq.w	8003236 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003128:	4b36      	ldr	r3, [pc, #216]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 030c 	and.w	r3, r3, #12
 8003130:	2b08      	cmp	r3, #8
 8003132:	d061      	beq.n	80031f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d146      	bne.n	80031ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313c:	4b33      	ldr	r3, [pc, #204]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003142:	f7fe fd6d 	bl	8001c20 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314a:	f7fe fd69 	bl	8001c20 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e06d      	b.n	8003238 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800315c:	4b29      	ldr	r3, [pc, #164]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f0      	bne.n	800314a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003170:	d108      	bne.n	8003184 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003172:	4b24      	ldr	r3, [pc, #144]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	4921      	ldr	r1, [pc, #132]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 8003180:	4313      	orrs	r3, r2
 8003182:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003184:	4b1f      	ldr	r3, [pc, #124]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a19      	ldr	r1, [r3, #32]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	430b      	orrs	r3, r1
 8003196:	491b      	ldr	r1, [pc, #108]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 8003198:	4313      	orrs	r3, r2
 800319a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800319c:	4b1b      	ldr	r3, [pc, #108]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 800319e:	2201      	movs	r2, #1
 80031a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a2:	f7fe fd3d 	bl	8001c20 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031aa:	f7fe fd39 	bl	8001c20 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e03d      	b.n	8003238 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031bc:	4b11      	ldr	r3, [pc, #68]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f0      	beq.n	80031aa <HAL_RCC_OscConfig+0x46a>
 80031c8:	e035      	b.n	8003236 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ca:	4b10      	ldr	r3, [pc, #64]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d0:	f7fe fd26 	bl	8001c20 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d8:	f7fe fd22 	bl	8001c20 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e026      	b.n	8003238 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <HAL_RCC_OscConfig+0x4c4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x498>
 80031f6:	e01e      	b.n	8003236 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d107      	bne.n	8003210 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e019      	b.n	8003238 <HAL_RCC_OscConfig+0x4f8>
 8003204:	40021000 	.word	0x40021000
 8003208:	40007000 	.word	0x40007000
 800320c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_RCC_OscConfig+0x500>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	429a      	cmp	r2, r3
 8003222:	d106      	bne.n	8003232 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d001      	beq.n	8003236 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40021000 	.word	0x40021000

08003244 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0d0      	b.n	80033fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003258:	4b6a      	ldr	r3, [pc, #424]	; (8003404 <HAL_RCC_ClockConfig+0x1c0>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d910      	bls.n	8003288 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b67      	ldr	r3, [pc, #412]	; (8003404 <HAL_RCC_ClockConfig+0x1c0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 0207 	bic.w	r2, r3, #7
 800326e:	4965      	ldr	r1, [pc, #404]	; (8003404 <HAL_RCC_ClockConfig+0x1c0>)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b63      	ldr	r3, [pc, #396]	; (8003404 <HAL_RCC_ClockConfig+0x1c0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0b8      	b.n	80033fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d020      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a0:	4b59      	ldr	r3, [pc, #356]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	4a58      	ldr	r2, [pc, #352]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80032a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032b8:	4b53      	ldr	r3, [pc, #332]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	4a52      	ldr	r2, [pc, #328]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80032be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c4:	4b50      	ldr	r3, [pc, #320]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	494d      	ldr	r1, [pc, #308]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d040      	beq.n	8003364 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d107      	bne.n	80032fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	4b47      	ldr	r3, [pc, #284]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d115      	bne.n	8003322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e07f      	b.n	80033fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d107      	bne.n	8003312 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003302:	4b41      	ldr	r3, [pc, #260]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e073      	b.n	80033fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003312:	4b3d      	ldr	r3, [pc, #244]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e06b      	b.n	80033fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003322:	4b39      	ldr	r3, [pc, #228]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f023 0203 	bic.w	r2, r3, #3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4936      	ldr	r1, [pc, #216]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003334:	f7fe fc74 	bl	8001c20 <HAL_GetTick>
 8003338:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333a:	e00a      	b.n	8003352 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333c:	f7fe fc70 	bl	8001c20 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	; 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e053      	b.n	80033fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	4b2d      	ldr	r3, [pc, #180]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 020c 	and.w	r2, r3, #12
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	429a      	cmp	r2, r3
 8003362:	d1eb      	bne.n	800333c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003364:	4b27      	ldr	r3, [pc, #156]	; (8003404 <HAL_RCC_ClockConfig+0x1c0>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d210      	bcs.n	8003394 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003372:	4b24      	ldr	r3, [pc, #144]	; (8003404 <HAL_RCC_ClockConfig+0x1c0>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 0207 	bic.w	r2, r3, #7
 800337a:	4922      	ldr	r1, [pc, #136]	; (8003404 <HAL_RCC_ClockConfig+0x1c0>)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	4313      	orrs	r3, r2
 8003380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003382:	4b20      	ldr	r3, [pc, #128]	; (8003404 <HAL_RCC_ClockConfig+0x1c0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d001      	beq.n	8003394 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e032      	b.n	80033fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a0:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4916      	ldr	r1, [pc, #88]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d009      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033be:	4b12      	ldr	r3, [pc, #72]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	490e      	ldr	r1, [pc, #56]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033d2:	f000 f821 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 80033d6:	4602      	mov	r2, r0
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	490a      	ldr	r1, [pc, #40]	; (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80033e4:	5ccb      	ldrb	r3, [r1, r3]
 80033e6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ea:	4a09      	ldr	r2, [pc, #36]	; (8003410 <HAL_RCC_ClockConfig+0x1cc>)
 80033ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033ee:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_RCC_ClockConfig+0x1d0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe fbd2 	bl	8001b9c <HAL_InitTick>

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40022000 	.word	0x40022000
 8003408:	40021000 	.word	0x40021000
 800340c:	0800ac14 	.word	0x0800ac14
 8003410:	20000010 	.word	0x20000010
 8003414:	20000014 	.word	0x20000014

08003418 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	2300      	movs	r3, #0
 800342c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003432:	4b1e      	ldr	r3, [pc, #120]	; (80034ac <HAL_RCC_GetSysClockFreq+0x94>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b04      	cmp	r3, #4
 8003440:	d002      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0x30>
 8003442:	2b08      	cmp	r3, #8
 8003444:	d003      	beq.n	800344e <HAL_RCC_GetSysClockFreq+0x36>
 8003446:	e027      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003448:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800344a:	613b      	str	r3, [r7, #16]
      break;
 800344c:	e027      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	0c9b      	lsrs	r3, r3, #18
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	4a17      	ldr	r2, [pc, #92]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003458:	5cd3      	ldrb	r3, [r2, r3]
 800345a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d010      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003466:	4b11      	ldr	r3, [pc, #68]	; (80034ac <HAL_RCC_GetSysClockFreq+0x94>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	0c5b      	lsrs	r3, r3, #17
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	4a11      	ldr	r2, [pc, #68]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003472:	5cd3      	ldrb	r3, [r2, r3]
 8003474:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a0d      	ldr	r2, [pc, #52]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800347a:	fb03 f202 	mul.w	r2, r3, r2
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	fbb2 f3f3 	udiv	r3, r2, r3
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	e004      	b.n	8003492 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a0c      	ldr	r2, [pc, #48]	; (80034bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800348c:	fb02 f303 	mul.w	r3, r2, r3
 8003490:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	613b      	str	r3, [r7, #16]
      break;
 8003496:	e002      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800349a:	613b      	str	r3, [r7, #16]
      break;
 800349c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800349e:	693b      	ldr	r3, [r7, #16]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	371c      	adds	r7, #28
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000
 80034b0:	007a1200 	.word	0x007a1200
 80034b4:	0800ac2c 	.word	0x0800ac2c
 80034b8:	0800ac3c 	.word	0x0800ac3c
 80034bc:	003d0900 	.word	0x003d0900

080034c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c4:	4b02      	ldr	r3, [pc, #8]	; (80034d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80034c6:	681b      	ldr	r3, [r3, #0]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr
 80034d0:	20000010 	.word	0x20000010

080034d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034d8:	f7ff fff2 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 80034dc:	4602      	mov	r2, r0
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	0a1b      	lsrs	r3, r3, #8
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4903      	ldr	r1, [pc, #12]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ea:	5ccb      	ldrb	r3, [r1, r3]
 80034ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40021000 	.word	0x40021000
 80034f8:	0800ac24 	.word	0x0800ac24

080034fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003504:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <RCC_Delay+0x34>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a0a      	ldr	r2, [pc, #40]	; (8003534 <RCC_Delay+0x38>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	0a5b      	lsrs	r3, r3, #9
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	fb02 f303 	mul.w	r3, r2, r3
 8003516:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003518:	bf00      	nop
  }
  while (Delay --);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1e5a      	subs	r2, r3, #1
 800351e:	60fa      	str	r2, [r7, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1f9      	bne.n	8003518 <RCC_Delay+0x1c>
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr
 8003530:	20000010 	.word	0x20000010
 8003534:	10624dd3 	.word	0x10624dd3

08003538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e041      	b.n	80035ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7fe f948 	bl	80017f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3304      	adds	r3, #4
 8003574:	4619      	mov	r1, r3
 8003576:	4610      	mov	r0, r2
 8003578:	f000 fbd8 	bl	8003d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e041      	b.n	800366c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d106      	bne.n	8003602 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7fe f953 	bl	80018a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2202      	movs	r2, #2
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3304      	adds	r3, #4
 8003612:	4619      	mov	r1, r3
 8003614:	4610      	mov	r0, r2
 8003616:	f000 fb89 	bl	8003d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d109      	bne.n	8003698 <HAL_TIM_PWM_Start+0x24>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b01      	cmp	r3, #1
 800368e:	bf14      	ite	ne
 8003690:	2301      	movne	r3, #1
 8003692:	2300      	moveq	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e022      	b.n	80036de <HAL_TIM_PWM_Start+0x6a>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b04      	cmp	r3, #4
 800369c:	d109      	bne.n	80036b2 <HAL_TIM_PWM_Start+0x3e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	bf14      	ite	ne
 80036aa:	2301      	movne	r3, #1
 80036ac:	2300      	moveq	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	e015      	b.n	80036de <HAL_TIM_PWM_Start+0x6a>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d109      	bne.n	80036cc <HAL_TIM_PWM_Start+0x58>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	bf14      	ite	ne
 80036c4:	2301      	movne	r3, #1
 80036c6:	2300      	moveq	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e008      	b.n	80036de <HAL_TIM_PWM_Start+0x6a>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	bf14      	ite	ne
 80036d8:	2301      	movne	r3, #1
 80036da:	2300      	moveq	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e05e      	b.n	80037a4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d104      	bne.n	80036f6 <HAL_TIM_PWM_Start+0x82>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036f4:	e013      	b.n	800371e <HAL_TIM_PWM_Start+0xaa>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d104      	bne.n	8003706 <HAL_TIM_PWM_Start+0x92>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003704:	e00b      	b.n	800371e <HAL_TIM_PWM_Start+0xaa>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b08      	cmp	r3, #8
 800370a:	d104      	bne.n	8003716 <HAL_TIM_PWM_Start+0xa2>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003714:	e003      	b.n	800371e <HAL_TIM_PWM_Start+0xaa>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2201      	movs	r2, #1
 8003724:	6839      	ldr	r1, [r7, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fd80 	bl	800422c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a1e      	ldr	r2, [pc, #120]	; (80037ac <HAL_TIM_PWM_Start+0x138>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d107      	bne.n	8003746 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003744:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a18      	ldr	r2, [pc, #96]	; (80037ac <HAL_TIM_PWM_Start+0x138>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00e      	beq.n	800376e <HAL_TIM_PWM_Start+0xfa>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003758:	d009      	beq.n	800376e <HAL_TIM_PWM_Start+0xfa>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a14      	ldr	r2, [pc, #80]	; (80037b0 <HAL_TIM_PWM_Start+0x13c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d004      	beq.n	800376e <HAL_TIM_PWM_Start+0xfa>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a12      	ldr	r2, [pc, #72]	; (80037b4 <HAL_TIM_PWM_Start+0x140>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d111      	bne.n	8003792 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b06      	cmp	r3, #6
 800377e:	d010      	beq.n	80037a2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003790:	e007      	b.n	80037a2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0201 	orr.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40012c00 	.word	0x40012c00
 80037b0:	40000400 	.word	0x40000400
 80037b4:	40000800 	.word	0x40000800

080037b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e093      	b.n	80038f4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d106      	bne.n	80037e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7fe f825 	bl	8001830 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2202      	movs	r2, #2
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6812      	ldr	r2, [r2, #0]
 80037f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037fc:	f023 0307 	bic.w	r3, r3, #7
 8003800:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3304      	adds	r3, #4
 800380a:	4619      	mov	r1, r3
 800380c:	4610      	mov	r0, r2
 800380e:	f000 fa8d 	bl	8003d2c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4313      	orrs	r3, r2
 8003832:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383a:	f023 0303 	bic.w	r3, r3, #3
 800383e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	021b      	lsls	r3, r3, #8
 800384a:	4313      	orrs	r3, r2
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003858:	f023 030c 	bic.w	r3, r3, #12
 800385c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003864:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003868:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	021b      	lsls	r3, r3, #8
 8003874:	4313      	orrs	r3, r2
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	011a      	lsls	r2, r3, #4
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	031b      	lsls	r3, r3, #12
 8003888:	4313      	orrs	r3, r2
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003896:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	4313      	orrs	r3, r2
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800390c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003914:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800391c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003924:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d110      	bne.n	800394e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800392c:	7bfb      	ldrb	r3, [r7, #15]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d102      	bne.n	8003938 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003932:	7b7b      	ldrb	r3, [r7, #13]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d001      	beq.n	800393c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e069      	b.n	8003a10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800394c:	e031      	b.n	80039b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b04      	cmp	r3, #4
 8003952:	d110      	bne.n	8003976 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003954:	7bbb      	ldrb	r3, [r7, #14]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d102      	bne.n	8003960 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800395a:	7b3b      	ldrb	r3, [r7, #12]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d001      	beq.n	8003964 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e055      	b.n	8003a10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003974:	e01d      	b.n	80039b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d108      	bne.n	800398e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800397c:	7bbb      	ldrb	r3, [r7, #14]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d105      	bne.n	800398e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003982:	7b7b      	ldrb	r3, [r7, #13]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d102      	bne.n	800398e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003988:	7b3b      	ldrb	r3, [r7, #12]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d001      	beq.n	8003992 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e03e      	b.n	8003a10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2202      	movs	r2, #2
 8003996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2202      	movs	r2, #2
 800399e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2202      	movs	r2, #2
 80039a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2202      	movs	r2, #2
 80039ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_TIM_Encoder_Start+0xc4>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d008      	beq.n	80039d0 <HAL_TIM_Encoder_Start+0xd4>
 80039be:	e00f      	b.n	80039e0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2201      	movs	r2, #1
 80039c6:	2100      	movs	r1, #0
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 fc2f 	bl	800422c <TIM_CCxChannelCmd>
      break;
 80039ce:	e016      	b.n	80039fe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2201      	movs	r2, #1
 80039d6:	2104      	movs	r1, #4
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 fc27 	bl	800422c <TIM_CCxChannelCmd>
      break;
 80039de:	e00e      	b.n	80039fe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2201      	movs	r2, #1
 80039e6:	2100      	movs	r1, #0
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fc1f 	bl	800422c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2201      	movs	r2, #1
 80039f4:	2104      	movs	r1, #4
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fc18 	bl	800422c <TIM_CCxChannelCmd>
      break;
 80039fc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0201 	orr.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e0ae      	b.n	8003b94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b0c      	cmp	r3, #12
 8003a42:	f200 809f 	bhi.w	8003b84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a46:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4c:	08003a81 	.word	0x08003a81
 8003a50:	08003b85 	.word	0x08003b85
 8003a54:	08003b85 	.word	0x08003b85
 8003a58:	08003b85 	.word	0x08003b85
 8003a5c:	08003ac1 	.word	0x08003ac1
 8003a60:	08003b85 	.word	0x08003b85
 8003a64:	08003b85 	.word	0x08003b85
 8003a68:	08003b85 	.word	0x08003b85
 8003a6c:	08003b03 	.word	0x08003b03
 8003a70:	08003b85 	.word	0x08003b85
 8003a74:	08003b85 	.word	0x08003b85
 8003a78:	08003b85 	.word	0x08003b85
 8003a7c:	08003b43 	.word	0x08003b43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68b9      	ldr	r1, [r7, #8]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 f9b2 	bl	8003df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0208 	orr.w	r2, r2, #8
 8003a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0204 	bic.w	r2, r2, #4
 8003aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6999      	ldr	r1, [r3, #24]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	619a      	str	r2, [r3, #24]
      break;
 8003abe:	e064      	b.n	8003b8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 f9f8 	bl	8003ebc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6999      	ldr	r1, [r3, #24]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	021a      	lsls	r2, r3, #8
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	619a      	str	r2, [r3, #24]
      break;
 8003b00:	e043      	b.n	8003b8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 fa41 	bl	8003f90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69da      	ldr	r2, [r3, #28]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 0208 	orr.w	r2, r2, #8
 8003b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69da      	ldr	r2, [r3, #28]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0204 	bic.w	r2, r2, #4
 8003b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69d9      	ldr	r1, [r3, #28]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	61da      	str	r2, [r3, #28]
      break;
 8003b40:	e023      	b.n	8003b8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 fa8b 	bl	8004064 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69d9      	ldr	r1, [r3, #28]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	021a      	lsls	r2, r3, #8
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	61da      	str	r2, [r3, #28]
      break;
 8003b82:	e002      	b.n	8003b8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	75fb      	strb	r3, [r7, #23]
      break;
 8003b88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_TIM_ConfigClockSource+0x1c>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e0b4      	b.n	8003d22 <HAL_TIM_ConfigClockSource+0x186>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf0:	d03e      	beq.n	8003c70 <HAL_TIM_ConfigClockSource+0xd4>
 8003bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf6:	f200 8087 	bhi.w	8003d08 <HAL_TIM_ConfigClockSource+0x16c>
 8003bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfe:	f000 8086 	beq.w	8003d0e <HAL_TIM_ConfigClockSource+0x172>
 8003c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c06:	d87f      	bhi.n	8003d08 <HAL_TIM_ConfigClockSource+0x16c>
 8003c08:	2b70      	cmp	r3, #112	; 0x70
 8003c0a:	d01a      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0xa6>
 8003c0c:	2b70      	cmp	r3, #112	; 0x70
 8003c0e:	d87b      	bhi.n	8003d08 <HAL_TIM_ConfigClockSource+0x16c>
 8003c10:	2b60      	cmp	r3, #96	; 0x60
 8003c12:	d050      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0x11a>
 8003c14:	2b60      	cmp	r3, #96	; 0x60
 8003c16:	d877      	bhi.n	8003d08 <HAL_TIM_ConfigClockSource+0x16c>
 8003c18:	2b50      	cmp	r3, #80	; 0x50
 8003c1a:	d03c      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0xfa>
 8003c1c:	2b50      	cmp	r3, #80	; 0x50
 8003c1e:	d873      	bhi.n	8003d08 <HAL_TIM_ConfigClockSource+0x16c>
 8003c20:	2b40      	cmp	r3, #64	; 0x40
 8003c22:	d058      	beq.n	8003cd6 <HAL_TIM_ConfigClockSource+0x13a>
 8003c24:	2b40      	cmp	r3, #64	; 0x40
 8003c26:	d86f      	bhi.n	8003d08 <HAL_TIM_ConfigClockSource+0x16c>
 8003c28:	2b30      	cmp	r3, #48	; 0x30
 8003c2a:	d064      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0x15a>
 8003c2c:	2b30      	cmp	r3, #48	; 0x30
 8003c2e:	d86b      	bhi.n	8003d08 <HAL_TIM_ConfigClockSource+0x16c>
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d060      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0x15a>
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	d867      	bhi.n	8003d08 <HAL_TIM_ConfigClockSource+0x16c>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d05c      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0x15a>
 8003c3c:	2b10      	cmp	r3, #16
 8003c3e:	d05a      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0x15a>
 8003c40:	e062      	b.n	8003d08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c52:	f000 facc 	bl	80041ee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	609a      	str	r2, [r3, #8]
      break;
 8003c6e:	e04f      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c80:	f000 fab5 	bl	80041ee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c92:	609a      	str	r2, [r3, #8]
      break;
 8003c94:	e03c      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f000 fa2c 	bl	8004100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2150      	movs	r1, #80	; 0x50
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fa83 	bl	80041ba <TIM_ITRx_SetConfig>
      break;
 8003cb4:	e02c      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f000 fa4a 	bl	800415c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2160      	movs	r1, #96	; 0x60
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fa73 	bl	80041ba <TIM_ITRx_SetConfig>
      break;
 8003cd4:	e01c      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f000 fa0c 	bl	8004100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2140      	movs	r1, #64	; 0x40
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fa63 	bl	80041ba <TIM_ITRx_SetConfig>
      break;
 8003cf4:	e00c      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4610      	mov	r0, r2
 8003d02:	f000 fa5a 	bl	80041ba <TIM_ITRx_SetConfig>
      break;
 8003d06:	e003      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d0c:	e000      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a29      	ldr	r2, [pc, #164]	; (8003de4 <TIM_Base_SetConfig+0xb8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00b      	beq.n	8003d5c <TIM_Base_SetConfig+0x30>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4a:	d007      	beq.n	8003d5c <TIM_Base_SetConfig+0x30>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a26      	ldr	r2, [pc, #152]	; (8003de8 <TIM_Base_SetConfig+0xbc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d003      	beq.n	8003d5c <TIM_Base_SetConfig+0x30>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a25      	ldr	r2, [pc, #148]	; (8003dec <TIM_Base_SetConfig+0xc0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d108      	bne.n	8003d6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a1c      	ldr	r2, [pc, #112]	; (8003de4 <TIM_Base_SetConfig+0xb8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00b      	beq.n	8003d8e <TIM_Base_SetConfig+0x62>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7c:	d007      	beq.n	8003d8e <TIM_Base_SetConfig+0x62>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a19      	ldr	r2, [pc, #100]	; (8003de8 <TIM_Base_SetConfig+0xbc>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d003      	beq.n	8003d8e <TIM_Base_SetConfig+0x62>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a18      	ldr	r2, [pc, #96]	; (8003dec <TIM_Base_SetConfig+0xc0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d108      	bne.n	8003da0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a07      	ldr	r2, [pc, #28]	; (8003de4 <TIM_Base_SetConfig+0xb8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d103      	bne.n	8003dd4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	615a      	str	r2, [r3, #20]
}
 8003dda:	bf00      	nop
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr
 8003de4:	40012c00 	.word	0x40012c00
 8003de8:	40000400 	.word	0x40000400
 8003dec:	40000800 	.word	0x40000800

08003df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	f023 0201 	bic.w	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0303 	bic.w	r3, r3, #3
 8003e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f023 0302 	bic.w	r3, r3, #2
 8003e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a1c      	ldr	r2, [pc, #112]	; (8003eb8 <TIM_OC1_SetConfig+0xc8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d10c      	bne.n	8003e66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f023 0308 	bic.w	r3, r3, #8
 8003e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f023 0304 	bic.w	r3, r3, #4
 8003e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a13      	ldr	r2, [pc, #76]	; (8003eb8 <TIM_OC1_SetConfig+0xc8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d111      	bne.n	8003e92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	621a      	str	r2, [r3, #32]
}
 8003eac:	bf00      	nop
 8003eae:	371c      	adds	r7, #28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40012c00 	.word	0x40012c00

08003ebc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	f023 0210 	bic.w	r2, r3, #16
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f023 0320 	bic.w	r3, r3, #32
 8003f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a1d      	ldr	r2, [pc, #116]	; (8003f8c <TIM_OC2_SetConfig+0xd0>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d10d      	bne.n	8003f38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a14      	ldr	r2, [pc, #80]	; (8003f8c <TIM_OC2_SetConfig+0xd0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d113      	bne.n	8003f68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	621a      	str	r2, [r3, #32]
}
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr
 8003f8c:	40012c00 	.word	0x40012c00

08003f90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0303 	bic.w	r3, r3, #3
 8003fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	021b      	lsls	r3, r3, #8
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a1d      	ldr	r2, [pc, #116]	; (8004060 <TIM_OC3_SetConfig+0xd0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d10d      	bne.n	800400a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	021b      	lsls	r3, r3, #8
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a14      	ldr	r2, [pc, #80]	; (8004060 <TIM_OC3_SetConfig+0xd0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d113      	bne.n	800403a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	621a      	str	r2, [r3, #32]
}
 8004054:	bf00      	nop
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40012c00 	.word	0x40012c00

08004064 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	021b      	lsls	r3, r3, #8
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	031b      	lsls	r3, r3, #12
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a0f      	ldr	r2, [pc, #60]	; (80040fc <TIM_OC4_SetConfig+0x98>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d109      	bne.n	80040d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	019b      	lsls	r3, r3, #6
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	621a      	str	r2, [r3, #32]
}
 80040f2:	bf00      	nop
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr
 80040fc:	40012c00 	.word	0x40012c00

08004100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	f023 0201 	bic.w	r2, r3, #1
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800412a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f023 030a 	bic.w	r3, r3, #10
 800413c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4313      	orrs	r3, r2
 8004144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	621a      	str	r2, [r3, #32]
}
 8004152:	bf00      	nop
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr

0800415c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f023 0210 	bic.w	r2, r3, #16
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	031b      	lsls	r3, r3, #12
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4313      	orrs	r3, r2
 8004190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004198:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	621a      	str	r2, [r3, #32]
}
 80041b0:	bf00      	nop
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr

080041ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b085      	sub	sp, #20
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f043 0307 	orr.w	r3, r3, #7
 80041dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	609a      	str	r2, [r3, #8]
}
 80041e4:	bf00      	nop
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bc80      	pop	{r7}
 80041ec:	4770      	bx	lr

080041ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b087      	sub	sp, #28
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
 80041fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004208:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	021a      	lsls	r2, r3, #8
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	431a      	orrs	r2, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	4313      	orrs	r3, r2
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	609a      	str	r2, [r3, #8]
}
 8004222:	bf00      	nop
 8004224:	371c      	adds	r7, #28
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800422c:	b480      	push	{r7}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	2201      	movs	r2, #1
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a1a      	ldr	r2, [r3, #32]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	43db      	mvns	r3, r3
 800424e:	401a      	ands	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a1a      	ldr	r2, [r3, #32]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	fa01 f303 	lsl.w	r3, r1, r3
 8004264:	431a      	orrs	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	621a      	str	r2, [r3, #32]
}
 800426a:	bf00      	nop
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr

08004274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004284:	2b01      	cmp	r3, #1
 8004286:	d101      	bne.n	800428c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004288:	2302      	movs	r3, #2
 800428a:	e046      	b.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a16      	ldr	r2, [pc, #88]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00e      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d8:	d009      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a12      	ldr	r2, [pc, #72]	; (8004328 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d004      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a10      	ldr	r2, [pc, #64]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d10c      	bne.n	8004308 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr
 8004324:	40012c00 	.word	0x40012c00
 8004328:	40000400 	.word	0x40000400
 800432c:	40000800 	.word	0x40000800

08004330 <__itoa>:
 8004330:	1e93      	subs	r3, r2, #2
 8004332:	2b22      	cmp	r3, #34	; 0x22
 8004334:	b510      	push	{r4, lr}
 8004336:	460c      	mov	r4, r1
 8004338:	d904      	bls.n	8004344 <__itoa+0x14>
 800433a:	2300      	movs	r3, #0
 800433c:	461c      	mov	r4, r3
 800433e:	700b      	strb	r3, [r1, #0]
 8004340:	4620      	mov	r0, r4
 8004342:	bd10      	pop	{r4, pc}
 8004344:	2a0a      	cmp	r2, #10
 8004346:	d109      	bne.n	800435c <__itoa+0x2c>
 8004348:	2800      	cmp	r0, #0
 800434a:	da07      	bge.n	800435c <__itoa+0x2c>
 800434c:	232d      	movs	r3, #45	; 0x2d
 800434e:	700b      	strb	r3, [r1, #0]
 8004350:	2101      	movs	r1, #1
 8004352:	4240      	negs	r0, r0
 8004354:	4421      	add	r1, r4
 8004356:	f000 f805 	bl	8004364 <__utoa>
 800435a:	e7f1      	b.n	8004340 <__itoa+0x10>
 800435c:	2100      	movs	r1, #0
 800435e:	e7f9      	b.n	8004354 <__itoa+0x24>

08004360 <itoa>:
 8004360:	f7ff bfe6 	b.w	8004330 <__itoa>

08004364 <__utoa>:
 8004364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004366:	b08b      	sub	sp, #44	; 0x2c
 8004368:	4605      	mov	r5, r0
 800436a:	460b      	mov	r3, r1
 800436c:	466e      	mov	r6, sp
 800436e:	4c1d      	ldr	r4, [pc, #116]	; (80043e4 <__utoa+0x80>)
 8004370:	f104 0c20 	add.w	ip, r4, #32
 8004374:	4637      	mov	r7, r6
 8004376:	6820      	ldr	r0, [r4, #0]
 8004378:	6861      	ldr	r1, [r4, #4]
 800437a:	3408      	adds	r4, #8
 800437c:	c703      	stmia	r7!, {r0, r1}
 800437e:	4564      	cmp	r4, ip
 8004380:	463e      	mov	r6, r7
 8004382:	d1f7      	bne.n	8004374 <__utoa+0x10>
 8004384:	7921      	ldrb	r1, [r4, #4]
 8004386:	6820      	ldr	r0, [r4, #0]
 8004388:	7139      	strb	r1, [r7, #4]
 800438a:	1e91      	subs	r1, r2, #2
 800438c:	2922      	cmp	r1, #34	; 0x22
 800438e:	6038      	str	r0, [r7, #0]
 8004390:	f04f 0100 	mov.w	r1, #0
 8004394:	d904      	bls.n	80043a0 <__utoa+0x3c>
 8004396:	7019      	strb	r1, [r3, #0]
 8004398:	460b      	mov	r3, r1
 800439a:	4618      	mov	r0, r3
 800439c:	b00b      	add	sp, #44	; 0x2c
 800439e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043a0:	1e58      	subs	r0, r3, #1
 80043a2:	4684      	mov	ip, r0
 80043a4:	fbb5 f7f2 	udiv	r7, r5, r2
 80043a8:	fb02 5617 	mls	r6, r2, r7, r5
 80043ac:	3628      	adds	r6, #40	; 0x28
 80043ae:	446e      	add	r6, sp
 80043b0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80043b4:	460c      	mov	r4, r1
 80043b6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80043ba:	462e      	mov	r6, r5
 80043bc:	42b2      	cmp	r2, r6
 80043be:	463d      	mov	r5, r7
 80043c0:	f101 0101 	add.w	r1, r1, #1
 80043c4:	d9ee      	bls.n	80043a4 <__utoa+0x40>
 80043c6:	2200      	movs	r2, #0
 80043c8:	545a      	strb	r2, [r3, r1]
 80043ca:	1919      	adds	r1, r3, r4
 80043cc:	1aa5      	subs	r5, r4, r2
 80043ce:	42aa      	cmp	r2, r5
 80043d0:	dae3      	bge.n	800439a <__utoa+0x36>
 80043d2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80043d6:	780e      	ldrb	r6, [r1, #0]
 80043d8:	3201      	adds	r2, #1
 80043da:	7006      	strb	r6, [r0, #0]
 80043dc:	f801 5901 	strb.w	r5, [r1], #-1
 80043e0:	e7f4      	b.n	80043cc <__utoa+0x68>
 80043e2:	bf00      	nop
 80043e4:	0800ac3e 	.word	0x0800ac3e

080043e8 <__cvt>:
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043ee:	461f      	mov	r7, r3
 80043f0:	bfbb      	ittet	lt
 80043f2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80043f6:	461f      	movlt	r7, r3
 80043f8:	2300      	movge	r3, #0
 80043fa:	232d      	movlt	r3, #45	; 0x2d
 80043fc:	b088      	sub	sp, #32
 80043fe:	4614      	mov	r4, r2
 8004400:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004402:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004404:	7013      	strb	r3, [r2, #0]
 8004406:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004408:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800440c:	f023 0820 	bic.w	r8, r3, #32
 8004410:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004414:	d005      	beq.n	8004422 <__cvt+0x3a>
 8004416:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800441a:	d100      	bne.n	800441e <__cvt+0x36>
 800441c:	3501      	adds	r5, #1
 800441e:	2302      	movs	r3, #2
 8004420:	e000      	b.n	8004424 <__cvt+0x3c>
 8004422:	2303      	movs	r3, #3
 8004424:	aa07      	add	r2, sp, #28
 8004426:	9204      	str	r2, [sp, #16]
 8004428:	aa06      	add	r2, sp, #24
 800442a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800442e:	e9cd 3500 	strd	r3, r5, [sp]
 8004432:	4622      	mov	r2, r4
 8004434:	463b      	mov	r3, r7
 8004436:	f001 f873 	bl	8005520 <_dtoa_r>
 800443a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800443e:	4606      	mov	r6, r0
 8004440:	d102      	bne.n	8004448 <__cvt+0x60>
 8004442:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004444:	07db      	lsls	r3, r3, #31
 8004446:	d522      	bpl.n	800448e <__cvt+0xa6>
 8004448:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800444c:	eb06 0905 	add.w	r9, r6, r5
 8004450:	d110      	bne.n	8004474 <__cvt+0x8c>
 8004452:	7833      	ldrb	r3, [r6, #0]
 8004454:	2b30      	cmp	r3, #48	; 0x30
 8004456:	d10a      	bne.n	800446e <__cvt+0x86>
 8004458:	2200      	movs	r2, #0
 800445a:	2300      	movs	r3, #0
 800445c:	4620      	mov	r0, r4
 800445e:	4639      	mov	r1, r7
 8004460:	f7fc faa2 	bl	80009a8 <__aeabi_dcmpeq>
 8004464:	b918      	cbnz	r0, 800446e <__cvt+0x86>
 8004466:	f1c5 0501 	rsb	r5, r5, #1
 800446a:	f8ca 5000 	str.w	r5, [sl]
 800446e:	f8da 3000 	ldr.w	r3, [sl]
 8004472:	4499      	add	r9, r3
 8004474:	2200      	movs	r2, #0
 8004476:	2300      	movs	r3, #0
 8004478:	4620      	mov	r0, r4
 800447a:	4639      	mov	r1, r7
 800447c:	f7fc fa94 	bl	80009a8 <__aeabi_dcmpeq>
 8004480:	b108      	cbz	r0, 8004486 <__cvt+0x9e>
 8004482:	f8cd 901c 	str.w	r9, [sp, #28]
 8004486:	2230      	movs	r2, #48	; 0x30
 8004488:	9b07      	ldr	r3, [sp, #28]
 800448a:	454b      	cmp	r3, r9
 800448c:	d307      	bcc.n	800449e <__cvt+0xb6>
 800448e:	4630      	mov	r0, r6
 8004490:	9b07      	ldr	r3, [sp, #28]
 8004492:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004494:	1b9b      	subs	r3, r3, r6
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	b008      	add	sp, #32
 800449a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800449e:	1c59      	adds	r1, r3, #1
 80044a0:	9107      	str	r1, [sp, #28]
 80044a2:	701a      	strb	r2, [r3, #0]
 80044a4:	e7f0      	b.n	8004488 <__cvt+0xa0>

080044a6 <__exponent>:
 80044a6:	4603      	mov	r3, r0
 80044a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044aa:	2900      	cmp	r1, #0
 80044ac:	f803 2b02 	strb.w	r2, [r3], #2
 80044b0:	bfb6      	itet	lt
 80044b2:	222d      	movlt	r2, #45	; 0x2d
 80044b4:	222b      	movge	r2, #43	; 0x2b
 80044b6:	4249      	neglt	r1, r1
 80044b8:	2909      	cmp	r1, #9
 80044ba:	7042      	strb	r2, [r0, #1]
 80044bc:	dd2a      	ble.n	8004514 <__exponent+0x6e>
 80044be:	f10d 0207 	add.w	r2, sp, #7
 80044c2:	4617      	mov	r7, r2
 80044c4:	260a      	movs	r6, #10
 80044c6:	fb91 f5f6 	sdiv	r5, r1, r6
 80044ca:	4694      	mov	ip, r2
 80044cc:	fb06 1415 	mls	r4, r6, r5, r1
 80044d0:	3430      	adds	r4, #48	; 0x30
 80044d2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80044d6:	460c      	mov	r4, r1
 80044d8:	2c63      	cmp	r4, #99	; 0x63
 80044da:	4629      	mov	r1, r5
 80044dc:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80044e0:	dcf1      	bgt.n	80044c6 <__exponent+0x20>
 80044e2:	3130      	adds	r1, #48	; 0x30
 80044e4:	f1ac 0402 	sub.w	r4, ip, #2
 80044e8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80044ec:	4622      	mov	r2, r4
 80044ee:	1c41      	adds	r1, r0, #1
 80044f0:	42ba      	cmp	r2, r7
 80044f2:	d30a      	bcc.n	800450a <__exponent+0x64>
 80044f4:	f10d 0209 	add.w	r2, sp, #9
 80044f8:	eba2 020c 	sub.w	r2, r2, ip
 80044fc:	42bc      	cmp	r4, r7
 80044fe:	bf88      	it	hi
 8004500:	2200      	movhi	r2, #0
 8004502:	4413      	add	r3, r2
 8004504:	1a18      	subs	r0, r3, r0
 8004506:	b003      	add	sp, #12
 8004508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800450a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800450e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004512:	e7ed      	b.n	80044f0 <__exponent+0x4a>
 8004514:	2330      	movs	r3, #48	; 0x30
 8004516:	3130      	adds	r1, #48	; 0x30
 8004518:	7083      	strb	r3, [r0, #2]
 800451a:	70c1      	strb	r1, [r0, #3]
 800451c:	1d03      	adds	r3, r0, #4
 800451e:	e7f1      	b.n	8004504 <__exponent+0x5e>

08004520 <_printf_float>:
 8004520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004524:	b091      	sub	sp, #68	; 0x44
 8004526:	460c      	mov	r4, r1
 8004528:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800452c:	4616      	mov	r6, r2
 800452e:	461f      	mov	r7, r3
 8004530:	4605      	mov	r5, r0
 8004532:	f000 fee1 	bl	80052f8 <_localeconv_r>
 8004536:	6803      	ldr	r3, [r0, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	9309      	str	r3, [sp, #36]	; 0x24
 800453c:	f7fb fe08 	bl	8000150 <strlen>
 8004540:	2300      	movs	r3, #0
 8004542:	930e      	str	r3, [sp, #56]	; 0x38
 8004544:	f8d8 3000 	ldr.w	r3, [r8]
 8004548:	900a      	str	r0, [sp, #40]	; 0x28
 800454a:	3307      	adds	r3, #7
 800454c:	f023 0307 	bic.w	r3, r3, #7
 8004550:	f103 0208 	add.w	r2, r3, #8
 8004554:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004558:	f8d4 b000 	ldr.w	fp, [r4]
 800455c:	f8c8 2000 	str.w	r2, [r8]
 8004560:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004564:	4652      	mov	r2, sl
 8004566:	4643      	mov	r3, r8
 8004568:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800456c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004570:	930b      	str	r3, [sp, #44]	; 0x2c
 8004572:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004576:	4650      	mov	r0, sl
 8004578:	4b9c      	ldr	r3, [pc, #624]	; (80047ec <_printf_float+0x2cc>)
 800457a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800457c:	f7fc fa46 	bl	8000a0c <__aeabi_dcmpun>
 8004580:	bb70      	cbnz	r0, 80045e0 <_printf_float+0xc0>
 8004582:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004586:	4650      	mov	r0, sl
 8004588:	4b98      	ldr	r3, [pc, #608]	; (80047ec <_printf_float+0x2cc>)
 800458a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800458c:	f7fc fa20 	bl	80009d0 <__aeabi_dcmple>
 8004590:	bb30      	cbnz	r0, 80045e0 <_printf_float+0xc0>
 8004592:	2200      	movs	r2, #0
 8004594:	2300      	movs	r3, #0
 8004596:	4650      	mov	r0, sl
 8004598:	4641      	mov	r1, r8
 800459a:	f7fc fa0f 	bl	80009bc <__aeabi_dcmplt>
 800459e:	b110      	cbz	r0, 80045a6 <_printf_float+0x86>
 80045a0:	232d      	movs	r3, #45	; 0x2d
 80045a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045a6:	4a92      	ldr	r2, [pc, #584]	; (80047f0 <_printf_float+0x2d0>)
 80045a8:	4b92      	ldr	r3, [pc, #584]	; (80047f4 <_printf_float+0x2d4>)
 80045aa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80045ae:	bf94      	ite	ls
 80045b0:	4690      	movls	r8, r2
 80045b2:	4698      	movhi	r8, r3
 80045b4:	2303      	movs	r3, #3
 80045b6:	f04f 0a00 	mov.w	sl, #0
 80045ba:	6123      	str	r3, [r4, #16]
 80045bc:	f02b 0304 	bic.w	r3, fp, #4
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	4633      	mov	r3, r6
 80045c4:	4621      	mov	r1, r4
 80045c6:	4628      	mov	r0, r5
 80045c8:	9700      	str	r7, [sp, #0]
 80045ca:	aa0f      	add	r2, sp, #60	; 0x3c
 80045cc:	f000 f9d6 	bl	800497c <_printf_common>
 80045d0:	3001      	adds	r0, #1
 80045d2:	f040 8090 	bne.w	80046f6 <_printf_float+0x1d6>
 80045d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045da:	b011      	add	sp, #68	; 0x44
 80045dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045e0:	4652      	mov	r2, sl
 80045e2:	4643      	mov	r3, r8
 80045e4:	4650      	mov	r0, sl
 80045e6:	4641      	mov	r1, r8
 80045e8:	f7fc fa10 	bl	8000a0c <__aeabi_dcmpun>
 80045ec:	b148      	cbz	r0, 8004602 <_printf_float+0xe2>
 80045ee:	f1b8 0f00 	cmp.w	r8, #0
 80045f2:	bfb8      	it	lt
 80045f4:	232d      	movlt	r3, #45	; 0x2d
 80045f6:	4a80      	ldr	r2, [pc, #512]	; (80047f8 <_printf_float+0x2d8>)
 80045f8:	bfb8      	it	lt
 80045fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80045fe:	4b7f      	ldr	r3, [pc, #508]	; (80047fc <_printf_float+0x2dc>)
 8004600:	e7d3      	b.n	80045aa <_printf_float+0x8a>
 8004602:	6863      	ldr	r3, [r4, #4]
 8004604:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	d142      	bne.n	8004692 <_printf_float+0x172>
 800460c:	2306      	movs	r3, #6
 800460e:	6063      	str	r3, [r4, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	9206      	str	r2, [sp, #24]
 8004614:	aa0e      	add	r2, sp, #56	; 0x38
 8004616:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800461a:	aa0d      	add	r2, sp, #52	; 0x34
 800461c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004620:	9203      	str	r2, [sp, #12]
 8004622:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004626:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800462a:	6023      	str	r3, [r4, #0]
 800462c:	6863      	ldr	r3, [r4, #4]
 800462e:	4652      	mov	r2, sl
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	4628      	mov	r0, r5
 8004634:	4643      	mov	r3, r8
 8004636:	910b      	str	r1, [sp, #44]	; 0x2c
 8004638:	f7ff fed6 	bl	80043e8 <__cvt>
 800463c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800463e:	4680      	mov	r8, r0
 8004640:	2947      	cmp	r1, #71	; 0x47
 8004642:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004644:	d108      	bne.n	8004658 <_printf_float+0x138>
 8004646:	1cc8      	adds	r0, r1, #3
 8004648:	db02      	blt.n	8004650 <_printf_float+0x130>
 800464a:	6863      	ldr	r3, [r4, #4]
 800464c:	4299      	cmp	r1, r3
 800464e:	dd40      	ble.n	80046d2 <_printf_float+0x1b2>
 8004650:	f1a9 0902 	sub.w	r9, r9, #2
 8004654:	fa5f f989 	uxtb.w	r9, r9
 8004658:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800465c:	d81f      	bhi.n	800469e <_printf_float+0x17e>
 800465e:	464a      	mov	r2, r9
 8004660:	3901      	subs	r1, #1
 8004662:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004666:	910d      	str	r1, [sp, #52]	; 0x34
 8004668:	f7ff ff1d 	bl	80044a6 <__exponent>
 800466c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800466e:	4682      	mov	sl, r0
 8004670:	1813      	adds	r3, r2, r0
 8004672:	2a01      	cmp	r2, #1
 8004674:	6123      	str	r3, [r4, #16]
 8004676:	dc02      	bgt.n	800467e <_printf_float+0x15e>
 8004678:	6822      	ldr	r2, [r4, #0]
 800467a:	07d2      	lsls	r2, r2, #31
 800467c:	d501      	bpl.n	8004682 <_printf_float+0x162>
 800467e:	3301      	adds	r3, #1
 8004680:	6123      	str	r3, [r4, #16]
 8004682:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004686:	2b00      	cmp	r3, #0
 8004688:	d09b      	beq.n	80045c2 <_printf_float+0xa2>
 800468a:	232d      	movs	r3, #45	; 0x2d
 800468c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004690:	e797      	b.n	80045c2 <_printf_float+0xa2>
 8004692:	2947      	cmp	r1, #71	; 0x47
 8004694:	d1bc      	bne.n	8004610 <_printf_float+0xf0>
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1ba      	bne.n	8004610 <_printf_float+0xf0>
 800469a:	2301      	movs	r3, #1
 800469c:	e7b7      	b.n	800460e <_printf_float+0xee>
 800469e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80046a2:	d118      	bne.n	80046d6 <_printf_float+0x1b6>
 80046a4:	2900      	cmp	r1, #0
 80046a6:	6863      	ldr	r3, [r4, #4]
 80046a8:	dd0b      	ble.n	80046c2 <_printf_float+0x1a2>
 80046aa:	6121      	str	r1, [r4, #16]
 80046ac:	b913      	cbnz	r3, 80046b4 <_printf_float+0x194>
 80046ae:	6822      	ldr	r2, [r4, #0]
 80046b0:	07d0      	lsls	r0, r2, #31
 80046b2:	d502      	bpl.n	80046ba <_printf_float+0x19a>
 80046b4:	3301      	adds	r3, #1
 80046b6:	440b      	add	r3, r1
 80046b8:	6123      	str	r3, [r4, #16]
 80046ba:	f04f 0a00 	mov.w	sl, #0
 80046be:	65a1      	str	r1, [r4, #88]	; 0x58
 80046c0:	e7df      	b.n	8004682 <_printf_float+0x162>
 80046c2:	b913      	cbnz	r3, 80046ca <_printf_float+0x1aa>
 80046c4:	6822      	ldr	r2, [r4, #0]
 80046c6:	07d2      	lsls	r2, r2, #31
 80046c8:	d501      	bpl.n	80046ce <_printf_float+0x1ae>
 80046ca:	3302      	adds	r3, #2
 80046cc:	e7f4      	b.n	80046b8 <_printf_float+0x198>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e7f2      	b.n	80046b8 <_printf_float+0x198>
 80046d2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80046d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046d8:	4299      	cmp	r1, r3
 80046da:	db05      	blt.n	80046e8 <_printf_float+0x1c8>
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	6121      	str	r1, [r4, #16]
 80046e0:	07d8      	lsls	r0, r3, #31
 80046e2:	d5ea      	bpl.n	80046ba <_printf_float+0x19a>
 80046e4:	1c4b      	adds	r3, r1, #1
 80046e6:	e7e7      	b.n	80046b8 <_printf_float+0x198>
 80046e8:	2900      	cmp	r1, #0
 80046ea:	bfcc      	ite	gt
 80046ec:	2201      	movgt	r2, #1
 80046ee:	f1c1 0202 	rsble	r2, r1, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	e7e0      	b.n	80046b8 <_printf_float+0x198>
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	055a      	lsls	r2, r3, #21
 80046fa:	d407      	bmi.n	800470c <_printf_float+0x1ec>
 80046fc:	6923      	ldr	r3, [r4, #16]
 80046fe:	4642      	mov	r2, r8
 8004700:	4631      	mov	r1, r6
 8004702:	4628      	mov	r0, r5
 8004704:	47b8      	blx	r7
 8004706:	3001      	adds	r0, #1
 8004708:	d12b      	bne.n	8004762 <_printf_float+0x242>
 800470a:	e764      	b.n	80045d6 <_printf_float+0xb6>
 800470c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004710:	f240 80dd 	bls.w	80048ce <_printf_float+0x3ae>
 8004714:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004718:	2200      	movs	r2, #0
 800471a:	2300      	movs	r3, #0
 800471c:	f7fc f944 	bl	80009a8 <__aeabi_dcmpeq>
 8004720:	2800      	cmp	r0, #0
 8004722:	d033      	beq.n	800478c <_printf_float+0x26c>
 8004724:	2301      	movs	r3, #1
 8004726:	4631      	mov	r1, r6
 8004728:	4628      	mov	r0, r5
 800472a:	4a35      	ldr	r2, [pc, #212]	; (8004800 <_printf_float+0x2e0>)
 800472c:	47b8      	blx	r7
 800472e:	3001      	adds	r0, #1
 8004730:	f43f af51 	beq.w	80045d6 <_printf_float+0xb6>
 8004734:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004738:	429a      	cmp	r2, r3
 800473a:	db02      	blt.n	8004742 <_printf_float+0x222>
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	07d8      	lsls	r0, r3, #31
 8004740:	d50f      	bpl.n	8004762 <_printf_float+0x242>
 8004742:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004746:	4631      	mov	r1, r6
 8004748:	4628      	mov	r0, r5
 800474a:	47b8      	blx	r7
 800474c:	3001      	adds	r0, #1
 800474e:	f43f af42 	beq.w	80045d6 <_printf_float+0xb6>
 8004752:	f04f 0800 	mov.w	r8, #0
 8004756:	f104 091a 	add.w	r9, r4, #26
 800475a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800475c:	3b01      	subs	r3, #1
 800475e:	4543      	cmp	r3, r8
 8004760:	dc09      	bgt.n	8004776 <_printf_float+0x256>
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	079b      	lsls	r3, r3, #30
 8004766:	f100 8104 	bmi.w	8004972 <_printf_float+0x452>
 800476a:	68e0      	ldr	r0, [r4, #12]
 800476c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800476e:	4298      	cmp	r0, r3
 8004770:	bfb8      	it	lt
 8004772:	4618      	movlt	r0, r3
 8004774:	e731      	b.n	80045da <_printf_float+0xba>
 8004776:	2301      	movs	r3, #1
 8004778:	464a      	mov	r2, r9
 800477a:	4631      	mov	r1, r6
 800477c:	4628      	mov	r0, r5
 800477e:	47b8      	blx	r7
 8004780:	3001      	adds	r0, #1
 8004782:	f43f af28 	beq.w	80045d6 <_printf_float+0xb6>
 8004786:	f108 0801 	add.w	r8, r8, #1
 800478a:	e7e6      	b.n	800475a <_printf_float+0x23a>
 800478c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800478e:	2b00      	cmp	r3, #0
 8004790:	dc38      	bgt.n	8004804 <_printf_float+0x2e4>
 8004792:	2301      	movs	r3, #1
 8004794:	4631      	mov	r1, r6
 8004796:	4628      	mov	r0, r5
 8004798:	4a19      	ldr	r2, [pc, #100]	; (8004800 <_printf_float+0x2e0>)
 800479a:	47b8      	blx	r7
 800479c:	3001      	adds	r0, #1
 800479e:	f43f af1a 	beq.w	80045d6 <_printf_float+0xb6>
 80047a2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80047a6:	4313      	orrs	r3, r2
 80047a8:	d102      	bne.n	80047b0 <_printf_float+0x290>
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	07d9      	lsls	r1, r3, #31
 80047ae:	d5d8      	bpl.n	8004762 <_printf_float+0x242>
 80047b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047b4:	4631      	mov	r1, r6
 80047b6:	4628      	mov	r0, r5
 80047b8:	47b8      	blx	r7
 80047ba:	3001      	adds	r0, #1
 80047bc:	f43f af0b 	beq.w	80045d6 <_printf_float+0xb6>
 80047c0:	f04f 0900 	mov.w	r9, #0
 80047c4:	f104 0a1a 	add.w	sl, r4, #26
 80047c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047ca:	425b      	negs	r3, r3
 80047cc:	454b      	cmp	r3, r9
 80047ce:	dc01      	bgt.n	80047d4 <_printf_float+0x2b4>
 80047d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047d2:	e794      	b.n	80046fe <_printf_float+0x1de>
 80047d4:	2301      	movs	r3, #1
 80047d6:	4652      	mov	r2, sl
 80047d8:	4631      	mov	r1, r6
 80047da:	4628      	mov	r0, r5
 80047dc:	47b8      	blx	r7
 80047de:	3001      	adds	r0, #1
 80047e0:	f43f aef9 	beq.w	80045d6 <_printf_float+0xb6>
 80047e4:	f109 0901 	add.w	r9, r9, #1
 80047e8:	e7ee      	b.n	80047c8 <_printf_float+0x2a8>
 80047ea:	bf00      	nop
 80047ec:	7fefffff 	.word	0x7fefffff
 80047f0:	0800ac63 	.word	0x0800ac63
 80047f4:	0800ac67 	.word	0x0800ac67
 80047f8:	0800ac6b 	.word	0x0800ac6b
 80047fc:	0800ac6f 	.word	0x0800ac6f
 8004800:	0800ac73 	.word	0x0800ac73
 8004804:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004806:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004808:	429a      	cmp	r2, r3
 800480a:	bfa8      	it	ge
 800480c:	461a      	movge	r2, r3
 800480e:	2a00      	cmp	r2, #0
 8004810:	4691      	mov	r9, r2
 8004812:	dc37      	bgt.n	8004884 <_printf_float+0x364>
 8004814:	f04f 0b00 	mov.w	fp, #0
 8004818:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800481c:	f104 021a 	add.w	r2, r4, #26
 8004820:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004824:	ebaa 0309 	sub.w	r3, sl, r9
 8004828:	455b      	cmp	r3, fp
 800482a:	dc33      	bgt.n	8004894 <_printf_float+0x374>
 800482c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004830:	429a      	cmp	r2, r3
 8004832:	db3b      	blt.n	80048ac <_printf_float+0x38c>
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	07da      	lsls	r2, r3, #31
 8004838:	d438      	bmi.n	80048ac <_printf_float+0x38c>
 800483a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800483e:	eba2 0903 	sub.w	r9, r2, r3
 8004842:	eba2 020a 	sub.w	r2, r2, sl
 8004846:	4591      	cmp	r9, r2
 8004848:	bfa8      	it	ge
 800484a:	4691      	movge	r9, r2
 800484c:	f1b9 0f00 	cmp.w	r9, #0
 8004850:	dc34      	bgt.n	80048bc <_printf_float+0x39c>
 8004852:	f04f 0800 	mov.w	r8, #0
 8004856:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800485a:	f104 0a1a 	add.w	sl, r4, #26
 800485e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	eba3 0309 	sub.w	r3, r3, r9
 8004868:	4543      	cmp	r3, r8
 800486a:	f77f af7a 	ble.w	8004762 <_printf_float+0x242>
 800486e:	2301      	movs	r3, #1
 8004870:	4652      	mov	r2, sl
 8004872:	4631      	mov	r1, r6
 8004874:	4628      	mov	r0, r5
 8004876:	47b8      	blx	r7
 8004878:	3001      	adds	r0, #1
 800487a:	f43f aeac 	beq.w	80045d6 <_printf_float+0xb6>
 800487e:	f108 0801 	add.w	r8, r8, #1
 8004882:	e7ec      	b.n	800485e <_printf_float+0x33e>
 8004884:	4613      	mov	r3, r2
 8004886:	4631      	mov	r1, r6
 8004888:	4642      	mov	r2, r8
 800488a:	4628      	mov	r0, r5
 800488c:	47b8      	blx	r7
 800488e:	3001      	adds	r0, #1
 8004890:	d1c0      	bne.n	8004814 <_printf_float+0x2f4>
 8004892:	e6a0      	b.n	80045d6 <_printf_float+0xb6>
 8004894:	2301      	movs	r3, #1
 8004896:	4631      	mov	r1, r6
 8004898:	4628      	mov	r0, r5
 800489a:	920b      	str	r2, [sp, #44]	; 0x2c
 800489c:	47b8      	blx	r7
 800489e:	3001      	adds	r0, #1
 80048a0:	f43f ae99 	beq.w	80045d6 <_printf_float+0xb6>
 80048a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80048a6:	f10b 0b01 	add.w	fp, fp, #1
 80048aa:	e7b9      	b.n	8004820 <_printf_float+0x300>
 80048ac:	4631      	mov	r1, r6
 80048ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048b2:	4628      	mov	r0, r5
 80048b4:	47b8      	blx	r7
 80048b6:	3001      	adds	r0, #1
 80048b8:	d1bf      	bne.n	800483a <_printf_float+0x31a>
 80048ba:	e68c      	b.n	80045d6 <_printf_float+0xb6>
 80048bc:	464b      	mov	r3, r9
 80048be:	4631      	mov	r1, r6
 80048c0:	4628      	mov	r0, r5
 80048c2:	eb08 020a 	add.w	r2, r8, sl
 80048c6:	47b8      	blx	r7
 80048c8:	3001      	adds	r0, #1
 80048ca:	d1c2      	bne.n	8004852 <_printf_float+0x332>
 80048cc:	e683      	b.n	80045d6 <_printf_float+0xb6>
 80048ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048d0:	2a01      	cmp	r2, #1
 80048d2:	dc01      	bgt.n	80048d8 <_printf_float+0x3b8>
 80048d4:	07db      	lsls	r3, r3, #31
 80048d6:	d539      	bpl.n	800494c <_printf_float+0x42c>
 80048d8:	2301      	movs	r3, #1
 80048da:	4642      	mov	r2, r8
 80048dc:	4631      	mov	r1, r6
 80048de:	4628      	mov	r0, r5
 80048e0:	47b8      	blx	r7
 80048e2:	3001      	adds	r0, #1
 80048e4:	f43f ae77 	beq.w	80045d6 <_printf_float+0xb6>
 80048e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048ec:	4631      	mov	r1, r6
 80048ee:	4628      	mov	r0, r5
 80048f0:	47b8      	blx	r7
 80048f2:	3001      	adds	r0, #1
 80048f4:	f43f ae6f 	beq.w	80045d6 <_printf_float+0xb6>
 80048f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048fc:	2200      	movs	r2, #0
 80048fe:	2300      	movs	r3, #0
 8004900:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004904:	f7fc f850 	bl	80009a8 <__aeabi_dcmpeq>
 8004908:	b9d8      	cbnz	r0, 8004942 <_printf_float+0x422>
 800490a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800490e:	f108 0201 	add.w	r2, r8, #1
 8004912:	4631      	mov	r1, r6
 8004914:	4628      	mov	r0, r5
 8004916:	47b8      	blx	r7
 8004918:	3001      	adds	r0, #1
 800491a:	d10e      	bne.n	800493a <_printf_float+0x41a>
 800491c:	e65b      	b.n	80045d6 <_printf_float+0xb6>
 800491e:	2301      	movs	r3, #1
 8004920:	464a      	mov	r2, r9
 8004922:	4631      	mov	r1, r6
 8004924:	4628      	mov	r0, r5
 8004926:	47b8      	blx	r7
 8004928:	3001      	adds	r0, #1
 800492a:	f43f ae54 	beq.w	80045d6 <_printf_float+0xb6>
 800492e:	f108 0801 	add.w	r8, r8, #1
 8004932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004934:	3b01      	subs	r3, #1
 8004936:	4543      	cmp	r3, r8
 8004938:	dcf1      	bgt.n	800491e <_printf_float+0x3fe>
 800493a:	4653      	mov	r3, sl
 800493c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004940:	e6de      	b.n	8004700 <_printf_float+0x1e0>
 8004942:	f04f 0800 	mov.w	r8, #0
 8004946:	f104 091a 	add.w	r9, r4, #26
 800494a:	e7f2      	b.n	8004932 <_printf_float+0x412>
 800494c:	2301      	movs	r3, #1
 800494e:	4642      	mov	r2, r8
 8004950:	e7df      	b.n	8004912 <_printf_float+0x3f2>
 8004952:	2301      	movs	r3, #1
 8004954:	464a      	mov	r2, r9
 8004956:	4631      	mov	r1, r6
 8004958:	4628      	mov	r0, r5
 800495a:	47b8      	blx	r7
 800495c:	3001      	adds	r0, #1
 800495e:	f43f ae3a 	beq.w	80045d6 <_printf_float+0xb6>
 8004962:	f108 0801 	add.w	r8, r8, #1
 8004966:	68e3      	ldr	r3, [r4, #12]
 8004968:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800496a:	1a5b      	subs	r3, r3, r1
 800496c:	4543      	cmp	r3, r8
 800496e:	dcf0      	bgt.n	8004952 <_printf_float+0x432>
 8004970:	e6fb      	b.n	800476a <_printf_float+0x24a>
 8004972:	f04f 0800 	mov.w	r8, #0
 8004976:	f104 0919 	add.w	r9, r4, #25
 800497a:	e7f4      	b.n	8004966 <_printf_float+0x446>

0800497c <_printf_common>:
 800497c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004980:	4616      	mov	r6, r2
 8004982:	4699      	mov	r9, r3
 8004984:	688a      	ldr	r2, [r1, #8]
 8004986:	690b      	ldr	r3, [r1, #16]
 8004988:	4607      	mov	r7, r0
 800498a:	4293      	cmp	r3, r2
 800498c:	bfb8      	it	lt
 800498e:	4613      	movlt	r3, r2
 8004990:	6033      	str	r3, [r6, #0]
 8004992:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004996:	460c      	mov	r4, r1
 8004998:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800499c:	b10a      	cbz	r2, 80049a2 <_printf_common+0x26>
 800499e:	3301      	adds	r3, #1
 80049a0:	6033      	str	r3, [r6, #0]
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	0699      	lsls	r1, r3, #26
 80049a6:	bf42      	ittt	mi
 80049a8:	6833      	ldrmi	r3, [r6, #0]
 80049aa:	3302      	addmi	r3, #2
 80049ac:	6033      	strmi	r3, [r6, #0]
 80049ae:	6825      	ldr	r5, [r4, #0]
 80049b0:	f015 0506 	ands.w	r5, r5, #6
 80049b4:	d106      	bne.n	80049c4 <_printf_common+0x48>
 80049b6:	f104 0a19 	add.w	sl, r4, #25
 80049ba:	68e3      	ldr	r3, [r4, #12]
 80049bc:	6832      	ldr	r2, [r6, #0]
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	42ab      	cmp	r3, r5
 80049c2:	dc2b      	bgt.n	8004a1c <_printf_common+0xa0>
 80049c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049c8:	1e13      	subs	r3, r2, #0
 80049ca:	6822      	ldr	r2, [r4, #0]
 80049cc:	bf18      	it	ne
 80049ce:	2301      	movne	r3, #1
 80049d0:	0692      	lsls	r2, r2, #26
 80049d2:	d430      	bmi.n	8004a36 <_printf_common+0xba>
 80049d4:	4649      	mov	r1, r9
 80049d6:	4638      	mov	r0, r7
 80049d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049dc:	47c0      	blx	r8
 80049de:	3001      	adds	r0, #1
 80049e0:	d023      	beq.n	8004a2a <_printf_common+0xae>
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	6922      	ldr	r2, [r4, #16]
 80049e6:	f003 0306 	and.w	r3, r3, #6
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	bf14      	ite	ne
 80049ee:	2500      	movne	r5, #0
 80049f0:	6833      	ldreq	r3, [r6, #0]
 80049f2:	f04f 0600 	mov.w	r6, #0
 80049f6:	bf08      	it	eq
 80049f8:	68e5      	ldreq	r5, [r4, #12]
 80049fa:	f104 041a 	add.w	r4, r4, #26
 80049fe:	bf08      	it	eq
 8004a00:	1aed      	subeq	r5, r5, r3
 8004a02:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004a06:	bf08      	it	eq
 8004a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	bfc4      	itt	gt
 8004a10:	1a9b      	subgt	r3, r3, r2
 8004a12:	18ed      	addgt	r5, r5, r3
 8004a14:	42b5      	cmp	r5, r6
 8004a16:	d11a      	bne.n	8004a4e <_printf_common+0xd2>
 8004a18:	2000      	movs	r0, #0
 8004a1a:	e008      	b.n	8004a2e <_printf_common+0xb2>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	4652      	mov	r2, sl
 8004a20:	4649      	mov	r1, r9
 8004a22:	4638      	mov	r0, r7
 8004a24:	47c0      	blx	r8
 8004a26:	3001      	adds	r0, #1
 8004a28:	d103      	bne.n	8004a32 <_printf_common+0xb6>
 8004a2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a32:	3501      	adds	r5, #1
 8004a34:	e7c1      	b.n	80049ba <_printf_common+0x3e>
 8004a36:	2030      	movs	r0, #48	; 0x30
 8004a38:	18e1      	adds	r1, r4, r3
 8004a3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a44:	4422      	add	r2, r4
 8004a46:	3302      	adds	r3, #2
 8004a48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a4c:	e7c2      	b.n	80049d4 <_printf_common+0x58>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	4622      	mov	r2, r4
 8004a52:	4649      	mov	r1, r9
 8004a54:	4638      	mov	r0, r7
 8004a56:	47c0      	blx	r8
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d0e6      	beq.n	8004a2a <_printf_common+0xae>
 8004a5c:	3601      	adds	r6, #1
 8004a5e:	e7d9      	b.n	8004a14 <_printf_common+0x98>

08004a60 <_printf_i>:
 8004a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a64:	7e0f      	ldrb	r7, [r1, #24]
 8004a66:	4691      	mov	r9, r2
 8004a68:	2f78      	cmp	r7, #120	; 0x78
 8004a6a:	4680      	mov	r8, r0
 8004a6c:	460c      	mov	r4, r1
 8004a6e:	469a      	mov	sl, r3
 8004a70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a76:	d807      	bhi.n	8004a88 <_printf_i+0x28>
 8004a78:	2f62      	cmp	r7, #98	; 0x62
 8004a7a:	d80a      	bhi.n	8004a92 <_printf_i+0x32>
 8004a7c:	2f00      	cmp	r7, #0
 8004a7e:	f000 80d5 	beq.w	8004c2c <_printf_i+0x1cc>
 8004a82:	2f58      	cmp	r7, #88	; 0x58
 8004a84:	f000 80c1 	beq.w	8004c0a <_printf_i+0x1aa>
 8004a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a90:	e03a      	b.n	8004b08 <_printf_i+0xa8>
 8004a92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a96:	2b15      	cmp	r3, #21
 8004a98:	d8f6      	bhi.n	8004a88 <_printf_i+0x28>
 8004a9a:	a101      	add	r1, pc, #4	; (adr r1, 8004aa0 <_printf_i+0x40>)
 8004a9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004aa0:	08004af9 	.word	0x08004af9
 8004aa4:	08004b0d 	.word	0x08004b0d
 8004aa8:	08004a89 	.word	0x08004a89
 8004aac:	08004a89 	.word	0x08004a89
 8004ab0:	08004a89 	.word	0x08004a89
 8004ab4:	08004a89 	.word	0x08004a89
 8004ab8:	08004b0d 	.word	0x08004b0d
 8004abc:	08004a89 	.word	0x08004a89
 8004ac0:	08004a89 	.word	0x08004a89
 8004ac4:	08004a89 	.word	0x08004a89
 8004ac8:	08004a89 	.word	0x08004a89
 8004acc:	08004c13 	.word	0x08004c13
 8004ad0:	08004b39 	.word	0x08004b39
 8004ad4:	08004bcd 	.word	0x08004bcd
 8004ad8:	08004a89 	.word	0x08004a89
 8004adc:	08004a89 	.word	0x08004a89
 8004ae0:	08004c35 	.word	0x08004c35
 8004ae4:	08004a89 	.word	0x08004a89
 8004ae8:	08004b39 	.word	0x08004b39
 8004aec:	08004a89 	.word	0x08004a89
 8004af0:	08004a89 	.word	0x08004a89
 8004af4:	08004bd5 	.word	0x08004bd5
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	1d1a      	adds	r2, r3, #4
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	602a      	str	r2, [r5, #0]
 8004b00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0a0      	b.n	8004c4e <_printf_i+0x1ee>
 8004b0c:	6820      	ldr	r0, [r4, #0]
 8004b0e:	682b      	ldr	r3, [r5, #0]
 8004b10:	0607      	lsls	r7, r0, #24
 8004b12:	f103 0104 	add.w	r1, r3, #4
 8004b16:	6029      	str	r1, [r5, #0]
 8004b18:	d501      	bpl.n	8004b1e <_printf_i+0xbe>
 8004b1a:	681e      	ldr	r6, [r3, #0]
 8004b1c:	e003      	b.n	8004b26 <_printf_i+0xc6>
 8004b1e:	0646      	lsls	r6, r0, #25
 8004b20:	d5fb      	bpl.n	8004b1a <_printf_i+0xba>
 8004b22:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004b26:	2e00      	cmp	r6, #0
 8004b28:	da03      	bge.n	8004b32 <_printf_i+0xd2>
 8004b2a:	232d      	movs	r3, #45	; 0x2d
 8004b2c:	4276      	negs	r6, r6
 8004b2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b32:	230a      	movs	r3, #10
 8004b34:	4859      	ldr	r0, [pc, #356]	; (8004c9c <_printf_i+0x23c>)
 8004b36:	e012      	b.n	8004b5e <_printf_i+0xfe>
 8004b38:	682b      	ldr	r3, [r5, #0]
 8004b3a:	6820      	ldr	r0, [r4, #0]
 8004b3c:	1d19      	adds	r1, r3, #4
 8004b3e:	6029      	str	r1, [r5, #0]
 8004b40:	0605      	lsls	r5, r0, #24
 8004b42:	d501      	bpl.n	8004b48 <_printf_i+0xe8>
 8004b44:	681e      	ldr	r6, [r3, #0]
 8004b46:	e002      	b.n	8004b4e <_printf_i+0xee>
 8004b48:	0641      	lsls	r1, r0, #25
 8004b4a:	d5fb      	bpl.n	8004b44 <_printf_i+0xe4>
 8004b4c:	881e      	ldrh	r6, [r3, #0]
 8004b4e:	2f6f      	cmp	r7, #111	; 0x6f
 8004b50:	bf0c      	ite	eq
 8004b52:	2308      	moveq	r3, #8
 8004b54:	230a      	movne	r3, #10
 8004b56:	4851      	ldr	r0, [pc, #324]	; (8004c9c <_printf_i+0x23c>)
 8004b58:	2100      	movs	r1, #0
 8004b5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b5e:	6865      	ldr	r5, [r4, #4]
 8004b60:	2d00      	cmp	r5, #0
 8004b62:	bfa8      	it	ge
 8004b64:	6821      	ldrge	r1, [r4, #0]
 8004b66:	60a5      	str	r5, [r4, #8]
 8004b68:	bfa4      	itt	ge
 8004b6a:	f021 0104 	bicge.w	r1, r1, #4
 8004b6e:	6021      	strge	r1, [r4, #0]
 8004b70:	b90e      	cbnz	r6, 8004b76 <_printf_i+0x116>
 8004b72:	2d00      	cmp	r5, #0
 8004b74:	d04b      	beq.n	8004c0e <_printf_i+0x1ae>
 8004b76:	4615      	mov	r5, r2
 8004b78:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b7c:	fb03 6711 	mls	r7, r3, r1, r6
 8004b80:	5dc7      	ldrb	r7, [r0, r7]
 8004b82:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b86:	4637      	mov	r7, r6
 8004b88:	42bb      	cmp	r3, r7
 8004b8a:	460e      	mov	r6, r1
 8004b8c:	d9f4      	bls.n	8004b78 <_printf_i+0x118>
 8004b8e:	2b08      	cmp	r3, #8
 8004b90:	d10b      	bne.n	8004baa <_printf_i+0x14a>
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	07de      	lsls	r6, r3, #31
 8004b96:	d508      	bpl.n	8004baa <_printf_i+0x14a>
 8004b98:	6923      	ldr	r3, [r4, #16]
 8004b9a:	6861      	ldr	r1, [r4, #4]
 8004b9c:	4299      	cmp	r1, r3
 8004b9e:	bfde      	ittt	le
 8004ba0:	2330      	movle	r3, #48	; 0x30
 8004ba2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ba6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004baa:	1b52      	subs	r2, r2, r5
 8004bac:	6122      	str	r2, [r4, #16]
 8004bae:	464b      	mov	r3, r9
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	4640      	mov	r0, r8
 8004bb4:	f8cd a000 	str.w	sl, [sp]
 8004bb8:	aa03      	add	r2, sp, #12
 8004bba:	f7ff fedf 	bl	800497c <_printf_common>
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	d14a      	bne.n	8004c58 <_printf_i+0x1f8>
 8004bc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bc6:	b004      	add	sp, #16
 8004bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	f043 0320 	orr.w	r3, r3, #32
 8004bd2:	6023      	str	r3, [r4, #0]
 8004bd4:	2778      	movs	r7, #120	; 0x78
 8004bd6:	4832      	ldr	r0, [pc, #200]	; (8004ca0 <_printf_i+0x240>)
 8004bd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	6829      	ldr	r1, [r5, #0]
 8004be0:	061f      	lsls	r7, r3, #24
 8004be2:	f851 6b04 	ldr.w	r6, [r1], #4
 8004be6:	d402      	bmi.n	8004bee <_printf_i+0x18e>
 8004be8:	065f      	lsls	r7, r3, #25
 8004bea:	bf48      	it	mi
 8004bec:	b2b6      	uxthmi	r6, r6
 8004bee:	07df      	lsls	r7, r3, #31
 8004bf0:	bf48      	it	mi
 8004bf2:	f043 0320 	orrmi.w	r3, r3, #32
 8004bf6:	6029      	str	r1, [r5, #0]
 8004bf8:	bf48      	it	mi
 8004bfa:	6023      	strmi	r3, [r4, #0]
 8004bfc:	b91e      	cbnz	r6, 8004c06 <_printf_i+0x1a6>
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	f023 0320 	bic.w	r3, r3, #32
 8004c04:	6023      	str	r3, [r4, #0]
 8004c06:	2310      	movs	r3, #16
 8004c08:	e7a6      	b.n	8004b58 <_printf_i+0xf8>
 8004c0a:	4824      	ldr	r0, [pc, #144]	; (8004c9c <_printf_i+0x23c>)
 8004c0c:	e7e4      	b.n	8004bd8 <_printf_i+0x178>
 8004c0e:	4615      	mov	r5, r2
 8004c10:	e7bd      	b.n	8004b8e <_printf_i+0x12e>
 8004c12:	682b      	ldr	r3, [r5, #0]
 8004c14:	6826      	ldr	r6, [r4, #0]
 8004c16:	1d18      	adds	r0, r3, #4
 8004c18:	6961      	ldr	r1, [r4, #20]
 8004c1a:	6028      	str	r0, [r5, #0]
 8004c1c:	0635      	lsls	r5, r6, #24
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	d501      	bpl.n	8004c26 <_printf_i+0x1c6>
 8004c22:	6019      	str	r1, [r3, #0]
 8004c24:	e002      	b.n	8004c2c <_printf_i+0x1cc>
 8004c26:	0670      	lsls	r0, r6, #25
 8004c28:	d5fb      	bpl.n	8004c22 <_printf_i+0x1c2>
 8004c2a:	8019      	strh	r1, [r3, #0]
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	4615      	mov	r5, r2
 8004c30:	6123      	str	r3, [r4, #16]
 8004c32:	e7bc      	b.n	8004bae <_printf_i+0x14e>
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	2100      	movs	r1, #0
 8004c38:	1d1a      	adds	r2, r3, #4
 8004c3a:	602a      	str	r2, [r5, #0]
 8004c3c:	681d      	ldr	r5, [r3, #0]
 8004c3e:	6862      	ldr	r2, [r4, #4]
 8004c40:	4628      	mov	r0, r5
 8004c42:	f000 fbcf 	bl	80053e4 <memchr>
 8004c46:	b108      	cbz	r0, 8004c4c <_printf_i+0x1ec>
 8004c48:	1b40      	subs	r0, r0, r5
 8004c4a:	6060      	str	r0, [r4, #4]
 8004c4c:	6863      	ldr	r3, [r4, #4]
 8004c4e:	6123      	str	r3, [r4, #16]
 8004c50:	2300      	movs	r3, #0
 8004c52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c56:	e7aa      	b.n	8004bae <_printf_i+0x14e>
 8004c58:	462a      	mov	r2, r5
 8004c5a:	4649      	mov	r1, r9
 8004c5c:	4640      	mov	r0, r8
 8004c5e:	6923      	ldr	r3, [r4, #16]
 8004c60:	47d0      	blx	sl
 8004c62:	3001      	adds	r0, #1
 8004c64:	d0ad      	beq.n	8004bc2 <_printf_i+0x162>
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	079b      	lsls	r3, r3, #30
 8004c6a:	d413      	bmi.n	8004c94 <_printf_i+0x234>
 8004c6c:	68e0      	ldr	r0, [r4, #12]
 8004c6e:	9b03      	ldr	r3, [sp, #12]
 8004c70:	4298      	cmp	r0, r3
 8004c72:	bfb8      	it	lt
 8004c74:	4618      	movlt	r0, r3
 8004c76:	e7a6      	b.n	8004bc6 <_printf_i+0x166>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	4632      	mov	r2, r6
 8004c7c:	4649      	mov	r1, r9
 8004c7e:	4640      	mov	r0, r8
 8004c80:	47d0      	blx	sl
 8004c82:	3001      	adds	r0, #1
 8004c84:	d09d      	beq.n	8004bc2 <_printf_i+0x162>
 8004c86:	3501      	adds	r5, #1
 8004c88:	68e3      	ldr	r3, [r4, #12]
 8004c8a:	9903      	ldr	r1, [sp, #12]
 8004c8c:	1a5b      	subs	r3, r3, r1
 8004c8e:	42ab      	cmp	r3, r5
 8004c90:	dcf2      	bgt.n	8004c78 <_printf_i+0x218>
 8004c92:	e7eb      	b.n	8004c6c <_printf_i+0x20c>
 8004c94:	2500      	movs	r5, #0
 8004c96:	f104 0619 	add.w	r6, r4, #25
 8004c9a:	e7f5      	b.n	8004c88 <_printf_i+0x228>
 8004c9c:	0800ac75 	.word	0x0800ac75
 8004ca0:	0800ac86 	.word	0x0800ac86

08004ca4 <_scanf_float>:
 8004ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca8:	b087      	sub	sp, #28
 8004caa:	9303      	str	r3, [sp, #12]
 8004cac:	688b      	ldr	r3, [r1, #8]
 8004cae:	4617      	mov	r7, r2
 8004cb0:	1e5a      	subs	r2, r3, #1
 8004cb2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004cb6:	bf85      	ittet	hi
 8004cb8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004cbc:	195b      	addhi	r3, r3, r5
 8004cbe:	2300      	movls	r3, #0
 8004cc0:	9302      	strhi	r3, [sp, #8]
 8004cc2:	bf88      	it	hi
 8004cc4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004cc8:	468b      	mov	fp, r1
 8004cca:	f04f 0500 	mov.w	r5, #0
 8004cce:	bf8c      	ite	hi
 8004cd0:	608b      	strhi	r3, [r1, #8]
 8004cd2:	9302      	strls	r3, [sp, #8]
 8004cd4:	680b      	ldr	r3, [r1, #0]
 8004cd6:	4680      	mov	r8, r0
 8004cd8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004cdc:	f84b 3b1c 	str.w	r3, [fp], #28
 8004ce0:	460c      	mov	r4, r1
 8004ce2:	465e      	mov	r6, fp
 8004ce4:	46aa      	mov	sl, r5
 8004ce6:	46a9      	mov	r9, r5
 8004ce8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004cec:	9501      	str	r5, [sp, #4]
 8004cee:	68a2      	ldr	r2, [r4, #8]
 8004cf0:	b152      	cbz	r2, 8004d08 <_scanf_float+0x64>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b4e      	cmp	r3, #78	; 0x4e
 8004cf8:	d864      	bhi.n	8004dc4 <_scanf_float+0x120>
 8004cfa:	2b40      	cmp	r3, #64	; 0x40
 8004cfc:	d83c      	bhi.n	8004d78 <_scanf_float+0xd4>
 8004cfe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004d02:	b2c8      	uxtb	r0, r1
 8004d04:	280e      	cmp	r0, #14
 8004d06:	d93a      	bls.n	8004d7e <_scanf_float+0xda>
 8004d08:	f1b9 0f00 	cmp.w	r9, #0
 8004d0c:	d003      	beq.n	8004d16 <_scanf_float+0x72>
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d14:	6023      	str	r3, [r4, #0]
 8004d16:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004d1a:	f1ba 0f01 	cmp.w	sl, #1
 8004d1e:	f200 8113 	bhi.w	8004f48 <_scanf_float+0x2a4>
 8004d22:	455e      	cmp	r6, fp
 8004d24:	f200 8105 	bhi.w	8004f32 <_scanf_float+0x28e>
 8004d28:	2501      	movs	r5, #1
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	b007      	add	sp, #28
 8004d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d32:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004d36:	2a0d      	cmp	r2, #13
 8004d38:	d8e6      	bhi.n	8004d08 <_scanf_float+0x64>
 8004d3a:	a101      	add	r1, pc, #4	; (adr r1, 8004d40 <_scanf_float+0x9c>)
 8004d3c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004d40:	08004e7f 	.word	0x08004e7f
 8004d44:	08004d09 	.word	0x08004d09
 8004d48:	08004d09 	.word	0x08004d09
 8004d4c:	08004d09 	.word	0x08004d09
 8004d50:	08004edf 	.word	0x08004edf
 8004d54:	08004eb7 	.word	0x08004eb7
 8004d58:	08004d09 	.word	0x08004d09
 8004d5c:	08004d09 	.word	0x08004d09
 8004d60:	08004e8d 	.word	0x08004e8d
 8004d64:	08004d09 	.word	0x08004d09
 8004d68:	08004d09 	.word	0x08004d09
 8004d6c:	08004d09 	.word	0x08004d09
 8004d70:	08004d09 	.word	0x08004d09
 8004d74:	08004e45 	.word	0x08004e45
 8004d78:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004d7c:	e7db      	b.n	8004d36 <_scanf_float+0x92>
 8004d7e:	290e      	cmp	r1, #14
 8004d80:	d8c2      	bhi.n	8004d08 <_scanf_float+0x64>
 8004d82:	a001      	add	r0, pc, #4	; (adr r0, 8004d88 <_scanf_float+0xe4>)
 8004d84:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004d88:	08004e37 	.word	0x08004e37
 8004d8c:	08004d09 	.word	0x08004d09
 8004d90:	08004e37 	.word	0x08004e37
 8004d94:	08004ecb 	.word	0x08004ecb
 8004d98:	08004d09 	.word	0x08004d09
 8004d9c:	08004de5 	.word	0x08004de5
 8004da0:	08004e21 	.word	0x08004e21
 8004da4:	08004e21 	.word	0x08004e21
 8004da8:	08004e21 	.word	0x08004e21
 8004dac:	08004e21 	.word	0x08004e21
 8004db0:	08004e21 	.word	0x08004e21
 8004db4:	08004e21 	.word	0x08004e21
 8004db8:	08004e21 	.word	0x08004e21
 8004dbc:	08004e21 	.word	0x08004e21
 8004dc0:	08004e21 	.word	0x08004e21
 8004dc4:	2b6e      	cmp	r3, #110	; 0x6e
 8004dc6:	d809      	bhi.n	8004ddc <_scanf_float+0x138>
 8004dc8:	2b60      	cmp	r3, #96	; 0x60
 8004dca:	d8b2      	bhi.n	8004d32 <_scanf_float+0x8e>
 8004dcc:	2b54      	cmp	r3, #84	; 0x54
 8004dce:	d077      	beq.n	8004ec0 <_scanf_float+0x21c>
 8004dd0:	2b59      	cmp	r3, #89	; 0x59
 8004dd2:	d199      	bne.n	8004d08 <_scanf_float+0x64>
 8004dd4:	2d07      	cmp	r5, #7
 8004dd6:	d197      	bne.n	8004d08 <_scanf_float+0x64>
 8004dd8:	2508      	movs	r5, #8
 8004dda:	e029      	b.n	8004e30 <_scanf_float+0x18c>
 8004ddc:	2b74      	cmp	r3, #116	; 0x74
 8004dde:	d06f      	beq.n	8004ec0 <_scanf_float+0x21c>
 8004de0:	2b79      	cmp	r3, #121	; 0x79
 8004de2:	e7f6      	b.n	8004dd2 <_scanf_float+0x12e>
 8004de4:	6821      	ldr	r1, [r4, #0]
 8004de6:	05c8      	lsls	r0, r1, #23
 8004de8:	d51a      	bpl.n	8004e20 <_scanf_float+0x17c>
 8004dea:	9b02      	ldr	r3, [sp, #8]
 8004dec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004df0:	6021      	str	r1, [r4, #0]
 8004df2:	f109 0901 	add.w	r9, r9, #1
 8004df6:	b11b      	cbz	r3, 8004e00 <_scanf_float+0x15c>
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	3201      	adds	r2, #1
 8004dfc:	9302      	str	r3, [sp, #8]
 8004dfe:	60a2      	str	r2, [r4, #8]
 8004e00:	68a3      	ldr	r3, [r4, #8]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	60a3      	str	r3, [r4, #8]
 8004e06:	6923      	ldr	r3, [r4, #16]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	6123      	str	r3, [r4, #16]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	607b      	str	r3, [r7, #4]
 8004e14:	f340 8084 	ble.w	8004f20 <_scanf_float+0x27c>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	603b      	str	r3, [r7, #0]
 8004e1e:	e766      	b.n	8004cee <_scanf_float+0x4a>
 8004e20:	eb1a 0f05 	cmn.w	sl, r5
 8004e24:	f47f af70 	bne.w	8004d08 <_scanf_float+0x64>
 8004e28:	6822      	ldr	r2, [r4, #0]
 8004e2a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004e2e:	6022      	str	r2, [r4, #0]
 8004e30:	f806 3b01 	strb.w	r3, [r6], #1
 8004e34:	e7e4      	b.n	8004e00 <_scanf_float+0x15c>
 8004e36:	6822      	ldr	r2, [r4, #0]
 8004e38:	0610      	lsls	r0, r2, #24
 8004e3a:	f57f af65 	bpl.w	8004d08 <_scanf_float+0x64>
 8004e3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e42:	e7f4      	b.n	8004e2e <_scanf_float+0x18a>
 8004e44:	f1ba 0f00 	cmp.w	sl, #0
 8004e48:	d10e      	bne.n	8004e68 <_scanf_float+0x1c4>
 8004e4a:	f1b9 0f00 	cmp.w	r9, #0
 8004e4e:	d10e      	bne.n	8004e6e <_scanf_float+0x1ca>
 8004e50:	6822      	ldr	r2, [r4, #0]
 8004e52:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004e56:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004e5a:	d108      	bne.n	8004e6e <_scanf_float+0x1ca>
 8004e5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004e60:	f04f 0a01 	mov.w	sl, #1
 8004e64:	6022      	str	r2, [r4, #0]
 8004e66:	e7e3      	b.n	8004e30 <_scanf_float+0x18c>
 8004e68:	f1ba 0f02 	cmp.w	sl, #2
 8004e6c:	d055      	beq.n	8004f1a <_scanf_float+0x276>
 8004e6e:	2d01      	cmp	r5, #1
 8004e70:	d002      	beq.n	8004e78 <_scanf_float+0x1d4>
 8004e72:	2d04      	cmp	r5, #4
 8004e74:	f47f af48 	bne.w	8004d08 <_scanf_float+0x64>
 8004e78:	3501      	adds	r5, #1
 8004e7a:	b2ed      	uxtb	r5, r5
 8004e7c:	e7d8      	b.n	8004e30 <_scanf_float+0x18c>
 8004e7e:	f1ba 0f01 	cmp.w	sl, #1
 8004e82:	f47f af41 	bne.w	8004d08 <_scanf_float+0x64>
 8004e86:	f04f 0a02 	mov.w	sl, #2
 8004e8a:	e7d1      	b.n	8004e30 <_scanf_float+0x18c>
 8004e8c:	b97d      	cbnz	r5, 8004eae <_scanf_float+0x20a>
 8004e8e:	f1b9 0f00 	cmp.w	r9, #0
 8004e92:	f47f af3c 	bne.w	8004d0e <_scanf_float+0x6a>
 8004e96:	6822      	ldr	r2, [r4, #0]
 8004e98:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004e9c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004ea0:	f47f af39 	bne.w	8004d16 <_scanf_float+0x72>
 8004ea4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004ea8:	2501      	movs	r5, #1
 8004eaa:	6022      	str	r2, [r4, #0]
 8004eac:	e7c0      	b.n	8004e30 <_scanf_float+0x18c>
 8004eae:	2d03      	cmp	r5, #3
 8004eb0:	d0e2      	beq.n	8004e78 <_scanf_float+0x1d4>
 8004eb2:	2d05      	cmp	r5, #5
 8004eb4:	e7de      	b.n	8004e74 <_scanf_float+0x1d0>
 8004eb6:	2d02      	cmp	r5, #2
 8004eb8:	f47f af26 	bne.w	8004d08 <_scanf_float+0x64>
 8004ebc:	2503      	movs	r5, #3
 8004ebe:	e7b7      	b.n	8004e30 <_scanf_float+0x18c>
 8004ec0:	2d06      	cmp	r5, #6
 8004ec2:	f47f af21 	bne.w	8004d08 <_scanf_float+0x64>
 8004ec6:	2507      	movs	r5, #7
 8004ec8:	e7b2      	b.n	8004e30 <_scanf_float+0x18c>
 8004eca:	6822      	ldr	r2, [r4, #0]
 8004ecc:	0591      	lsls	r1, r2, #22
 8004ece:	f57f af1b 	bpl.w	8004d08 <_scanf_float+0x64>
 8004ed2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004ed6:	6022      	str	r2, [r4, #0]
 8004ed8:	f8cd 9004 	str.w	r9, [sp, #4]
 8004edc:	e7a8      	b.n	8004e30 <_scanf_float+0x18c>
 8004ede:	6822      	ldr	r2, [r4, #0]
 8004ee0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004ee4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004ee8:	d006      	beq.n	8004ef8 <_scanf_float+0x254>
 8004eea:	0550      	lsls	r0, r2, #21
 8004eec:	f57f af0c 	bpl.w	8004d08 <_scanf_float+0x64>
 8004ef0:	f1b9 0f00 	cmp.w	r9, #0
 8004ef4:	f43f af0f 	beq.w	8004d16 <_scanf_float+0x72>
 8004ef8:	0591      	lsls	r1, r2, #22
 8004efa:	bf58      	it	pl
 8004efc:	9901      	ldrpl	r1, [sp, #4]
 8004efe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004f02:	bf58      	it	pl
 8004f04:	eba9 0101 	subpl.w	r1, r9, r1
 8004f08:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004f0c:	f04f 0900 	mov.w	r9, #0
 8004f10:	bf58      	it	pl
 8004f12:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004f16:	6022      	str	r2, [r4, #0]
 8004f18:	e78a      	b.n	8004e30 <_scanf_float+0x18c>
 8004f1a:	f04f 0a03 	mov.w	sl, #3
 8004f1e:	e787      	b.n	8004e30 <_scanf_float+0x18c>
 8004f20:	4639      	mov	r1, r7
 8004f22:	4640      	mov	r0, r8
 8004f24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004f28:	4798      	blx	r3
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	f43f aedf 	beq.w	8004cee <_scanf_float+0x4a>
 8004f30:	e6ea      	b.n	8004d08 <_scanf_float+0x64>
 8004f32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f36:	463a      	mov	r2, r7
 8004f38:	4640      	mov	r0, r8
 8004f3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004f3e:	4798      	blx	r3
 8004f40:	6923      	ldr	r3, [r4, #16]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	6123      	str	r3, [r4, #16]
 8004f46:	e6ec      	b.n	8004d22 <_scanf_float+0x7e>
 8004f48:	1e6b      	subs	r3, r5, #1
 8004f4a:	2b06      	cmp	r3, #6
 8004f4c:	d825      	bhi.n	8004f9a <_scanf_float+0x2f6>
 8004f4e:	2d02      	cmp	r5, #2
 8004f50:	d836      	bhi.n	8004fc0 <_scanf_float+0x31c>
 8004f52:	455e      	cmp	r6, fp
 8004f54:	f67f aee8 	bls.w	8004d28 <_scanf_float+0x84>
 8004f58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f5c:	463a      	mov	r2, r7
 8004f5e:	4640      	mov	r0, r8
 8004f60:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004f64:	4798      	blx	r3
 8004f66:	6923      	ldr	r3, [r4, #16]
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	6123      	str	r3, [r4, #16]
 8004f6c:	e7f1      	b.n	8004f52 <_scanf_float+0x2ae>
 8004f6e:	9802      	ldr	r0, [sp, #8]
 8004f70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f74:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004f78:	463a      	mov	r2, r7
 8004f7a:	9002      	str	r0, [sp, #8]
 8004f7c:	4640      	mov	r0, r8
 8004f7e:	4798      	blx	r3
 8004f80:	6923      	ldr	r3, [r4, #16]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	6123      	str	r3, [r4, #16]
 8004f86:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004f8a:	fa5f fa8a 	uxtb.w	sl, sl
 8004f8e:	f1ba 0f02 	cmp.w	sl, #2
 8004f92:	d1ec      	bne.n	8004f6e <_scanf_float+0x2ca>
 8004f94:	3d03      	subs	r5, #3
 8004f96:	b2ed      	uxtb	r5, r5
 8004f98:	1b76      	subs	r6, r6, r5
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	05da      	lsls	r2, r3, #23
 8004f9e:	d52f      	bpl.n	8005000 <_scanf_float+0x35c>
 8004fa0:	055b      	lsls	r3, r3, #21
 8004fa2:	d510      	bpl.n	8004fc6 <_scanf_float+0x322>
 8004fa4:	455e      	cmp	r6, fp
 8004fa6:	f67f aebf 	bls.w	8004d28 <_scanf_float+0x84>
 8004faa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fae:	463a      	mov	r2, r7
 8004fb0:	4640      	mov	r0, r8
 8004fb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004fb6:	4798      	blx	r3
 8004fb8:	6923      	ldr	r3, [r4, #16]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	6123      	str	r3, [r4, #16]
 8004fbe:	e7f1      	b.n	8004fa4 <_scanf_float+0x300>
 8004fc0:	46aa      	mov	sl, r5
 8004fc2:	9602      	str	r6, [sp, #8]
 8004fc4:	e7df      	b.n	8004f86 <_scanf_float+0x2e2>
 8004fc6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004fca:	6923      	ldr	r3, [r4, #16]
 8004fcc:	2965      	cmp	r1, #101	; 0x65
 8004fce:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004fd2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8004fd6:	6123      	str	r3, [r4, #16]
 8004fd8:	d00c      	beq.n	8004ff4 <_scanf_float+0x350>
 8004fda:	2945      	cmp	r1, #69	; 0x45
 8004fdc:	d00a      	beq.n	8004ff4 <_scanf_float+0x350>
 8004fde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fe2:	463a      	mov	r2, r7
 8004fe4:	4640      	mov	r0, r8
 8004fe6:	4798      	blx	r3
 8004fe8:	6923      	ldr	r3, [r4, #16]
 8004fea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	1eb5      	subs	r5, r6, #2
 8004ff2:	6123      	str	r3, [r4, #16]
 8004ff4:	463a      	mov	r2, r7
 8004ff6:	4640      	mov	r0, r8
 8004ff8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ffc:	4798      	blx	r3
 8004ffe:	462e      	mov	r6, r5
 8005000:	6825      	ldr	r5, [r4, #0]
 8005002:	f015 0510 	ands.w	r5, r5, #16
 8005006:	d155      	bne.n	80050b4 <_scanf_float+0x410>
 8005008:	7035      	strb	r5, [r6, #0]
 800500a:	6823      	ldr	r3, [r4, #0]
 800500c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005014:	d11d      	bne.n	8005052 <_scanf_float+0x3ae>
 8005016:	9b01      	ldr	r3, [sp, #4]
 8005018:	454b      	cmp	r3, r9
 800501a:	eba3 0209 	sub.w	r2, r3, r9
 800501e:	d125      	bne.n	800506c <_scanf_float+0x3c8>
 8005020:	2200      	movs	r2, #0
 8005022:	4659      	mov	r1, fp
 8005024:	4640      	mov	r0, r8
 8005026:	f002 fc0f 	bl	8007848 <_strtod_r>
 800502a:	9b03      	ldr	r3, [sp, #12]
 800502c:	f8d4 c000 	ldr.w	ip, [r4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f01c 0f02 	tst.w	ip, #2
 8005036:	4606      	mov	r6, r0
 8005038:	460f      	mov	r7, r1
 800503a:	f103 0204 	add.w	r2, r3, #4
 800503e:	d020      	beq.n	8005082 <_scanf_float+0x3de>
 8005040:	9903      	ldr	r1, [sp, #12]
 8005042:	600a      	str	r2, [r1, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	e9c3 6700 	strd	r6, r7, [r3]
 800504a:	68e3      	ldr	r3, [r4, #12]
 800504c:	3301      	adds	r3, #1
 800504e:	60e3      	str	r3, [r4, #12]
 8005050:	e66b      	b.n	8004d2a <_scanf_float+0x86>
 8005052:	9b04      	ldr	r3, [sp, #16]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0e3      	beq.n	8005020 <_scanf_float+0x37c>
 8005058:	9905      	ldr	r1, [sp, #20]
 800505a:	230a      	movs	r3, #10
 800505c:	462a      	mov	r2, r5
 800505e:	4640      	mov	r0, r8
 8005060:	3101      	adds	r1, #1
 8005062:	f002 fc75 	bl	8007950 <_strtol_r>
 8005066:	9b04      	ldr	r3, [sp, #16]
 8005068:	9e05      	ldr	r6, [sp, #20]
 800506a:	1ac2      	subs	r2, r0, r3
 800506c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005070:	429e      	cmp	r6, r3
 8005072:	bf28      	it	cs
 8005074:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005078:	4630      	mov	r0, r6
 800507a:	490f      	ldr	r1, [pc, #60]	; (80050b8 <_scanf_float+0x414>)
 800507c:	f000 f8d0 	bl	8005220 <siprintf>
 8005080:	e7ce      	b.n	8005020 <_scanf_float+0x37c>
 8005082:	f01c 0f04 	tst.w	ip, #4
 8005086:	d1db      	bne.n	8005040 <_scanf_float+0x39c>
 8005088:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800508c:	f8cc 2000 	str.w	r2, [ip]
 8005090:	f8d3 8000 	ldr.w	r8, [r3]
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	f7fb fcb8 	bl	8000a0c <__aeabi_dcmpun>
 800509c:	b128      	cbz	r0, 80050aa <_scanf_float+0x406>
 800509e:	4807      	ldr	r0, [pc, #28]	; (80050bc <_scanf_float+0x418>)
 80050a0:	f000 f9ae 	bl	8005400 <nanf>
 80050a4:	f8c8 0000 	str.w	r0, [r8]
 80050a8:	e7cf      	b.n	800504a <_scanf_float+0x3a6>
 80050aa:	4630      	mov	r0, r6
 80050ac:	4639      	mov	r1, r7
 80050ae:	f7fb fd0b 	bl	8000ac8 <__aeabi_d2f>
 80050b2:	e7f7      	b.n	80050a4 <_scanf_float+0x400>
 80050b4:	2500      	movs	r5, #0
 80050b6:	e638      	b.n	8004d2a <_scanf_float+0x86>
 80050b8:	0800ac97 	.word	0x0800ac97
 80050bc:	0800b02d 	.word	0x0800b02d

080050c0 <std>:
 80050c0:	2300      	movs	r3, #0
 80050c2:	b510      	push	{r4, lr}
 80050c4:	4604      	mov	r4, r0
 80050c6:	e9c0 3300 	strd	r3, r3, [r0]
 80050ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050ce:	6083      	str	r3, [r0, #8]
 80050d0:	8181      	strh	r1, [r0, #12]
 80050d2:	6643      	str	r3, [r0, #100]	; 0x64
 80050d4:	81c2      	strh	r2, [r0, #14]
 80050d6:	6183      	str	r3, [r0, #24]
 80050d8:	4619      	mov	r1, r3
 80050da:	2208      	movs	r2, #8
 80050dc:	305c      	adds	r0, #92	; 0x5c
 80050de:	f000 f902 	bl	80052e6 <memset>
 80050e2:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <std+0x38>)
 80050e4:	6224      	str	r4, [r4, #32]
 80050e6:	6263      	str	r3, [r4, #36]	; 0x24
 80050e8:	4b04      	ldr	r3, [pc, #16]	; (80050fc <std+0x3c>)
 80050ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80050ec:	4b04      	ldr	r3, [pc, #16]	; (8005100 <std+0x40>)
 80050ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050f0:	4b04      	ldr	r3, [pc, #16]	; (8005104 <std+0x44>)
 80050f2:	6323      	str	r3, [r4, #48]	; 0x30
 80050f4:	bd10      	pop	{r4, pc}
 80050f6:	bf00      	nop
 80050f8:	08005261 	.word	0x08005261
 80050fc:	08005283 	.word	0x08005283
 8005100:	080052bb 	.word	0x080052bb
 8005104:	080052df 	.word	0x080052df

08005108 <stdio_exit_handler>:
 8005108:	4a02      	ldr	r2, [pc, #8]	; (8005114 <stdio_exit_handler+0xc>)
 800510a:	4903      	ldr	r1, [pc, #12]	; (8005118 <stdio_exit_handler+0x10>)
 800510c:	4803      	ldr	r0, [pc, #12]	; (800511c <stdio_exit_handler+0x14>)
 800510e:	f000 b869 	b.w	80051e4 <_fwalk_sglue>
 8005112:	bf00      	nop
 8005114:	2000001c 	.word	0x2000001c
 8005118:	08007d09 	.word	0x08007d09
 800511c:	20000028 	.word	0x20000028

08005120 <cleanup_stdio>:
 8005120:	6841      	ldr	r1, [r0, #4]
 8005122:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <cleanup_stdio+0x34>)
 8005124:	b510      	push	{r4, lr}
 8005126:	4299      	cmp	r1, r3
 8005128:	4604      	mov	r4, r0
 800512a:	d001      	beq.n	8005130 <cleanup_stdio+0x10>
 800512c:	f002 fdec 	bl	8007d08 <_fflush_r>
 8005130:	68a1      	ldr	r1, [r4, #8]
 8005132:	4b09      	ldr	r3, [pc, #36]	; (8005158 <cleanup_stdio+0x38>)
 8005134:	4299      	cmp	r1, r3
 8005136:	d002      	beq.n	800513e <cleanup_stdio+0x1e>
 8005138:	4620      	mov	r0, r4
 800513a:	f002 fde5 	bl	8007d08 <_fflush_r>
 800513e:	68e1      	ldr	r1, [r4, #12]
 8005140:	4b06      	ldr	r3, [pc, #24]	; (800515c <cleanup_stdio+0x3c>)
 8005142:	4299      	cmp	r1, r3
 8005144:	d004      	beq.n	8005150 <cleanup_stdio+0x30>
 8005146:	4620      	mov	r0, r4
 8005148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800514c:	f002 bddc 	b.w	8007d08 <_fflush_r>
 8005150:	bd10      	pop	{r4, pc}
 8005152:	bf00      	nop
 8005154:	2000073c 	.word	0x2000073c
 8005158:	200007a4 	.word	0x200007a4
 800515c:	2000080c 	.word	0x2000080c

08005160 <global_stdio_init.part.0>:
 8005160:	b510      	push	{r4, lr}
 8005162:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <global_stdio_init.part.0+0x30>)
 8005164:	4c0b      	ldr	r4, [pc, #44]	; (8005194 <global_stdio_init.part.0+0x34>)
 8005166:	4a0c      	ldr	r2, [pc, #48]	; (8005198 <global_stdio_init.part.0+0x38>)
 8005168:	4620      	mov	r0, r4
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	2104      	movs	r1, #4
 800516e:	2200      	movs	r2, #0
 8005170:	f7ff ffa6 	bl	80050c0 <std>
 8005174:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005178:	2201      	movs	r2, #1
 800517a:	2109      	movs	r1, #9
 800517c:	f7ff ffa0 	bl	80050c0 <std>
 8005180:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005184:	2202      	movs	r2, #2
 8005186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800518a:	2112      	movs	r1, #18
 800518c:	f7ff bf98 	b.w	80050c0 <std>
 8005190:	20000874 	.word	0x20000874
 8005194:	2000073c 	.word	0x2000073c
 8005198:	08005109 	.word	0x08005109

0800519c <__sfp_lock_acquire>:
 800519c:	4801      	ldr	r0, [pc, #4]	; (80051a4 <__sfp_lock_acquire+0x8>)
 800519e:	f000 b91f 	b.w	80053e0 <__retarget_lock_acquire_recursive>
 80051a2:	bf00      	nop
 80051a4:	2000087d 	.word	0x2000087d

080051a8 <__sfp_lock_release>:
 80051a8:	4801      	ldr	r0, [pc, #4]	; (80051b0 <__sfp_lock_release+0x8>)
 80051aa:	f000 b91a 	b.w	80053e2 <__retarget_lock_release_recursive>
 80051ae:	bf00      	nop
 80051b0:	2000087d 	.word	0x2000087d

080051b4 <__sinit>:
 80051b4:	b510      	push	{r4, lr}
 80051b6:	4604      	mov	r4, r0
 80051b8:	f7ff fff0 	bl	800519c <__sfp_lock_acquire>
 80051bc:	6a23      	ldr	r3, [r4, #32]
 80051be:	b11b      	cbz	r3, 80051c8 <__sinit+0x14>
 80051c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051c4:	f7ff bff0 	b.w	80051a8 <__sfp_lock_release>
 80051c8:	4b04      	ldr	r3, [pc, #16]	; (80051dc <__sinit+0x28>)
 80051ca:	6223      	str	r3, [r4, #32]
 80051cc:	4b04      	ldr	r3, [pc, #16]	; (80051e0 <__sinit+0x2c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1f5      	bne.n	80051c0 <__sinit+0xc>
 80051d4:	f7ff ffc4 	bl	8005160 <global_stdio_init.part.0>
 80051d8:	e7f2      	b.n	80051c0 <__sinit+0xc>
 80051da:	bf00      	nop
 80051dc:	08005121 	.word	0x08005121
 80051e0:	20000874 	.word	0x20000874

080051e4 <_fwalk_sglue>:
 80051e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051e8:	4607      	mov	r7, r0
 80051ea:	4688      	mov	r8, r1
 80051ec:	4614      	mov	r4, r2
 80051ee:	2600      	movs	r6, #0
 80051f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051f4:	f1b9 0901 	subs.w	r9, r9, #1
 80051f8:	d505      	bpl.n	8005206 <_fwalk_sglue+0x22>
 80051fa:	6824      	ldr	r4, [r4, #0]
 80051fc:	2c00      	cmp	r4, #0
 80051fe:	d1f7      	bne.n	80051f0 <_fwalk_sglue+0xc>
 8005200:	4630      	mov	r0, r6
 8005202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005206:	89ab      	ldrh	r3, [r5, #12]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d907      	bls.n	800521c <_fwalk_sglue+0x38>
 800520c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005210:	3301      	adds	r3, #1
 8005212:	d003      	beq.n	800521c <_fwalk_sglue+0x38>
 8005214:	4629      	mov	r1, r5
 8005216:	4638      	mov	r0, r7
 8005218:	47c0      	blx	r8
 800521a:	4306      	orrs	r6, r0
 800521c:	3568      	adds	r5, #104	; 0x68
 800521e:	e7e9      	b.n	80051f4 <_fwalk_sglue+0x10>

08005220 <siprintf>:
 8005220:	b40e      	push	{r1, r2, r3}
 8005222:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005226:	b500      	push	{lr}
 8005228:	b09c      	sub	sp, #112	; 0x70
 800522a:	ab1d      	add	r3, sp, #116	; 0x74
 800522c:	9002      	str	r0, [sp, #8]
 800522e:	9006      	str	r0, [sp, #24]
 8005230:	9107      	str	r1, [sp, #28]
 8005232:	9104      	str	r1, [sp, #16]
 8005234:	4808      	ldr	r0, [pc, #32]	; (8005258 <siprintf+0x38>)
 8005236:	4909      	ldr	r1, [pc, #36]	; (800525c <siprintf+0x3c>)
 8005238:	f853 2b04 	ldr.w	r2, [r3], #4
 800523c:	9105      	str	r1, [sp, #20]
 800523e:	6800      	ldr	r0, [r0, #0]
 8005240:	a902      	add	r1, sp, #8
 8005242:	9301      	str	r3, [sp, #4]
 8005244:	f002 fbe0 	bl	8007a08 <_svfiprintf_r>
 8005248:	2200      	movs	r2, #0
 800524a:	9b02      	ldr	r3, [sp, #8]
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	b01c      	add	sp, #112	; 0x70
 8005250:	f85d eb04 	ldr.w	lr, [sp], #4
 8005254:	b003      	add	sp, #12
 8005256:	4770      	bx	lr
 8005258:	20000074 	.word	0x20000074
 800525c:	ffff0208 	.word	0xffff0208

08005260 <__sread>:
 8005260:	b510      	push	{r4, lr}
 8005262:	460c      	mov	r4, r1
 8005264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005268:	f000 f86c 	bl	8005344 <_read_r>
 800526c:	2800      	cmp	r0, #0
 800526e:	bfab      	itete	ge
 8005270:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005272:	89a3      	ldrhlt	r3, [r4, #12]
 8005274:	181b      	addge	r3, r3, r0
 8005276:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800527a:	bfac      	ite	ge
 800527c:	6563      	strge	r3, [r4, #84]	; 0x54
 800527e:	81a3      	strhlt	r3, [r4, #12]
 8005280:	bd10      	pop	{r4, pc}

08005282 <__swrite>:
 8005282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005286:	461f      	mov	r7, r3
 8005288:	898b      	ldrh	r3, [r1, #12]
 800528a:	4605      	mov	r5, r0
 800528c:	05db      	lsls	r3, r3, #23
 800528e:	460c      	mov	r4, r1
 8005290:	4616      	mov	r6, r2
 8005292:	d505      	bpl.n	80052a0 <__swrite+0x1e>
 8005294:	2302      	movs	r3, #2
 8005296:	2200      	movs	r2, #0
 8005298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800529c:	f000 f840 	bl	8005320 <_lseek_r>
 80052a0:	89a3      	ldrh	r3, [r4, #12]
 80052a2:	4632      	mov	r2, r6
 80052a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052a8:	81a3      	strh	r3, [r4, #12]
 80052aa:	4628      	mov	r0, r5
 80052ac:	463b      	mov	r3, r7
 80052ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052b6:	f000 b857 	b.w	8005368 <_write_r>

080052ba <__sseek>:
 80052ba:	b510      	push	{r4, lr}
 80052bc:	460c      	mov	r4, r1
 80052be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c2:	f000 f82d 	bl	8005320 <_lseek_r>
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	89a3      	ldrh	r3, [r4, #12]
 80052ca:	bf15      	itete	ne
 80052cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80052ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052d6:	81a3      	strheq	r3, [r4, #12]
 80052d8:	bf18      	it	ne
 80052da:	81a3      	strhne	r3, [r4, #12]
 80052dc:	bd10      	pop	{r4, pc}

080052de <__sclose>:
 80052de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e2:	f000 b80d 	b.w	8005300 <_close_r>

080052e6 <memset>:
 80052e6:	4603      	mov	r3, r0
 80052e8:	4402      	add	r2, r0
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d100      	bne.n	80052f0 <memset+0xa>
 80052ee:	4770      	bx	lr
 80052f0:	f803 1b01 	strb.w	r1, [r3], #1
 80052f4:	e7f9      	b.n	80052ea <memset+0x4>
	...

080052f8 <_localeconv_r>:
 80052f8:	4800      	ldr	r0, [pc, #0]	; (80052fc <_localeconv_r+0x4>)
 80052fa:	4770      	bx	lr
 80052fc:	20000168 	.word	0x20000168

08005300 <_close_r>:
 8005300:	b538      	push	{r3, r4, r5, lr}
 8005302:	2300      	movs	r3, #0
 8005304:	4d05      	ldr	r5, [pc, #20]	; (800531c <_close_r+0x1c>)
 8005306:	4604      	mov	r4, r0
 8005308:	4608      	mov	r0, r1
 800530a:	602b      	str	r3, [r5, #0]
 800530c:	f7fc fb9d 	bl	8001a4a <_close>
 8005310:	1c43      	adds	r3, r0, #1
 8005312:	d102      	bne.n	800531a <_close_r+0x1a>
 8005314:	682b      	ldr	r3, [r5, #0]
 8005316:	b103      	cbz	r3, 800531a <_close_r+0x1a>
 8005318:	6023      	str	r3, [r4, #0]
 800531a:	bd38      	pop	{r3, r4, r5, pc}
 800531c:	20000878 	.word	0x20000878

08005320 <_lseek_r>:
 8005320:	b538      	push	{r3, r4, r5, lr}
 8005322:	4604      	mov	r4, r0
 8005324:	4608      	mov	r0, r1
 8005326:	4611      	mov	r1, r2
 8005328:	2200      	movs	r2, #0
 800532a:	4d05      	ldr	r5, [pc, #20]	; (8005340 <_lseek_r+0x20>)
 800532c:	602a      	str	r2, [r5, #0]
 800532e:	461a      	mov	r2, r3
 8005330:	f7fc fbaf 	bl	8001a92 <_lseek>
 8005334:	1c43      	adds	r3, r0, #1
 8005336:	d102      	bne.n	800533e <_lseek_r+0x1e>
 8005338:	682b      	ldr	r3, [r5, #0]
 800533a:	b103      	cbz	r3, 800533e <_lseek_r+0x1e>
 800533c:	6023      	str	r3, [r4, #0]
 800533e:	bd38      	pop	{r3, r4, r5, pc}
 8005340:	20000878 	.word	0x20000878

08005344 <_read_r>:
 8005344:	b538      	push	{r3, r4, r5, lr}
 8005346:	4604      	mov	r4, r0
 8005348:	4608      	mov	r0, r1
 800534a:	4611      	mov	r1, r2
 800534c:	2200      	movs	r2, #0
 800534e:	4d05      	ldr	r5, [pc, #20]	; (8005364 <_read_r+0x20>)
 8005350:	602a      	str	r2, [r5, #0]
 8005352:	461a      	mov	r2, r3
 8005354:	f7fc fb40 	bl	80019d8 <_read>
 8005358:	1c43      	adds	r3, r0, #1
 800535a:	d102      	bne.n	8005362 <_read_r+0x1e>
 800535c:	682b      	ldr	r3, [r5, #0]
 800535e:	b103      	cbz	r3, 8005362 <_read_r+0x1e>
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	bd38      	pop	{r3, r4, r5, pc}
 8005364:	20000878 	.word	0x20000878

08005368 <_write_r>:
 8005368:	b538      	push	{r3, r4, r5, lr}
 800536a:	4604      	mov	r4, r0
 800536c:	4608      	mov	r0, r1
 800536e:	4611      	mov	r1, r2
 8005370:	2200      	movs	r2, #0
 8005372:	4d05      	ldr	r5, [pc, #20]	; (8005388 <_write_r+0x20>)
 8005374:	602a      	str	r2, [r5, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	f7fc fb4b 	bl	8001a12 <_write>
 800537c:	1c43      	adds	r3, r0, #1
 800537e:	d102      	bne.n	8005386 <_write_r+0x1e>
 8005380:	682b      	ldr	r3, [r5, #0]
 8005382:	b103      	cbz	r3, 8005386 <_write_r+0x1e>
 8005384:	6023      	str	r3, [r4, #0]
 8005386:	bd38      	pop	{r3, r4, r5, pc}
 8005388:	20000878 	.word	0x20000878

0800538c <__errno>:
 800538c:	4b01      	ldr	r3, [pc, #4]	; (8005394 <__errno+0x8>)
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	20000074 	.word	0x20000074

08005398 <__libc_init_array>:
 8005398:	b570      	push	{r4, r5, r6, lr}
 800539a:	2600      	movs	r6, #0
 800539c:	4d0c      	ldr	r5, [pc, #48]	; (80053d0 <__libc_init_array+0x38>)
 800539e:	4c0d      	ldr	r4, [pc, #52]	; (80053d4 <__libc_init_array+0x3c>)
 80053a0:	1b64      	subs	r4, r4, r5
 80053a2:	10a4      	asrs	r4, r4, #2
 80053a4:	42a6      	cmp	r6, r4
 80053a6:	d109      	bne.n	80053bc <__libc_init_array+0x24>
 80053a8:	f003 fbc0 	bl	8008b2c <_init>
 80053ac:	2600      	movs	r6, #0
 80053ae:	4d0a      	ldr	r5, [pc, #40]	; (80053d8 <__libc_init_array+0x40>)
 80053b0:	4c0a      	ldr	r4, [pc, #40]	; (80053dc <__libc_init_array+0x44>)
 80053b2:	1b64      	subs	r4, r4, r5
 80053b4:	10a4      	asrs	r4, r4, #2
 80053b6:	42a6      	cmp	r6, r4
 80053b8:	d105      	bne.n	80053c6 <__libc_init_array+0x2e>
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
 80053bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c0:	4798      	blx	r3
 80053c2:	3601      	adds	r6, #1
 80053c4:	e7ee      	b.n	80053a4 <__libc_init_array+0xc>
 80053c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ca:	4798      	blx	r3
 80053cc:	3601      	adds	r6, #1
 80053ce:	e7f2      	b.n	80053b6 <__libc_init_array+0x1e>
 80053d0:	0800b090 	.word	0x0800b090
 80053d4:	0800b090 	.word	0x0800b090
 80053d8:	0800b090 	.word	0x0800b090
 80053dc:	0800b094 	.word	0x0800b094

080053e0 <__retarget_lock_acquire_recursive>:
 80053e0:	4770      	bx	lr

080053e2 <__retarget_lock_release_recursive>:
 80053e2:	4770      	bx	lr

080053e4 <memchr>:
 80053e4:	4603      	mov	r3, r0
 80053e6:	b510      	push	{r4, lr}
 80053e8:	b2c9      	uxtb	r1, r1
 80053ea:	4402      	add	r2, r0
 80053ec:	4293      	cmp	r3, r2
 80053ee:	4618      	mov	r0, r3
 80053f0:	d101      	bne.n	80053f6 <memchr+0x12>
 80053f2:	2000      	movs	r0, #0
 80053f4:	e003      	b.n	80053fe <memchr+0x1a>
 80053f6:	7804      	ldrb	r4, [r0, #0]
 80053f8:	3301      	adds	r3, #1
 80053fa:	428c      	cmp	r4, r1
 80053fc:	d1f6      	bne.n	80053ec <memchr+0x8>
 80053fe:	bd10      	pop	{r4, pc}

08005400 <nanf>:
 8005400:	4800      	ldr	r0, [pc, #0]	; (8005404 <nanf+0x4>)
 8005402:	4770      	bx	lr
 8005404:	7fc00000 	.word	0x7fc00000

08005408 <quorem>:
 8005408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540c:	6903      	ldr	r3, [r0, #16]
 800540e:	690c      	ldr	r4, [r1, #16]
 8005410:	4607      	mov	r7, r0
 8005412:	42a3      	cmp	r3, r4
 8005414:	db7f      	blt.n	8005516 <quorem+0x10e>
 8005416:	3c01      	subs	r4, #1
 8005418:	f100 0514 	add.w	r5, r0, #20
 800541c:	f101 0814 	add.w	r8, r1, #20
 8005420:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005424:	9301      	str	r3, [sp, #4]
 8005426:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800542a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800542e:	3301      	adds	r3, #1
 8005430:	429a      	cmp	r2, r3
 8005432:	fbb2 f6f3 	udiv	r6, r2, r3
 8005436:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800543a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800543e:	d331      	bcc.n	80054a4 <quorem+0x9c>
 8005440:	f04f 0e00 	mov.w	lr, #0
 8005444:	4640      	mov	r0, r8
 8005446:	46ac      	mov	ip, r5
 8005448:	46f2      	mov	sl, lr
 800544a:	f850 2b04 	ldr.w	r2, [r0], #4
 800544e:	b293      	uxth	r3, r2
 8005450:	fb06 e303 	mla	r3, r6, r3, lr
 8005454:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005458:	0c1a      	lsrs	r2, r3, #16
 800545a:	b29b      	uxth	r3, r3
 800545c:	fb06 220e 	mla	r2, r6, lr, r2
 8005460:	ebaa 0303 	sub.w	r3, sl, r3
 8005464:	f8dc a000 	ldr.w	sl, [ip]
 8005468:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800546c:	fa1f fa8a 	uxth.w	sl, sl
 8005470:	4453      	add	r3, sl
 8005472:	f8dc a000 	ldr.w	sl, [ip]
 8005476:	b292      	uxth	r2, r2
 8005478:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800547c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005480:	b29b      	uxth	r3, r3
 8005482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005486:	4581      	cmp	r9, r0
 8005488:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800548c:	f84c 3b04 	str.w	r3, [ip], #4
 8005490:	d2db      	bcs.n	800544a <quorem+0x42>
 8005492:	f855 300b 	ldr.w	r3, [r5, fp]
 8005496:	b92b      	cbnz	r3, 80054a4 <quorem+0x9c>
 8005498:	9b01      	ldr	r3, [sp, #4]
 800549a:	3b04      	subs	r3, #4
 800549c:	429d      	cmp	r5, r3
 800549e:	461a      	mov	r2, r3
 80054a0:	d32d      	bcc.n	80054fe <quorem+0xf6>
 80054a2:	613c      	str	r4, [r7, #16]
 80054a4:	4638      	mov	r0, r7
 80054a6:	f001 f9df 	bl	8006868 <__mcmp>
 80054aa:	2800      	cmp	r0, #0
 80054ac:	db23      	blt.n	80054f6 <quorem+0xee>
 80054ae:	4629      	mov	r1, r5
 80054b0:	2000      	movs	r0, #0
 80054b2:	3601      	adds	r6, #1
 80054b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80054b8:	f8d1 c000 	ldr.w	ip, [r1]
 80054bc:	b293      	uxth	r3, r2
 80054be:	1ac3      	subs	r3, r0, r3
 80054c0:	0c12      	lsrs	r2, r2, #16
 80054c2:	fa1f f08c 	uxth.w	r0, ip
 80054c6:	4403      	add	r3, r0
 80054c8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80054cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054d6:	45c1      	cmp	r9, r8
 80054d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80054dc:	f841 3b04 	str.w	r3, [r1], #4
 80054e0:	d2e8      	bcs.n	80054b4 <quorem+0xac>
 80054e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054ea:	b922      	cbnz	r2, 80054f6 <quorem+0xee>
 80054ec:	3b04      	subs	r3, #4
 80054ee:	429d      	cmp	r5, r3
 80054f0:	461a      	mov	r2, r3
 80054f2:	d30a      	bcc.n	800550a <quorem+0x102>
 80054f4:	613c      	str	r4, [r7, #16]
 80054f6:	4630      	mov	r0, r6
 80054f8:	b003      	add	sp, #12
 80054fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	3b04      	subs	r3, #4
 8005502:	2a00      	cmp	r2, #0
 8005504:	d1cd      	bne.n	80054a2 <quorem+0x9a>
 8005506:	3c01      	subs	r4, #1
 8005508:	e7c8      	b.n	800549c <quorem+0x94>
 800550a:	6812      	ldr	r2, [r2, #0]
 800550c:	3b04      	subs	r3, #4
 800550e:	2a00      	cmp	r2, #0
 8005510:	d1f0      	bne.n	80054f4 <quorem+0xec>
 8005512:	3c01      	subs	r4, #1
 8005514:	e7eb      	b.n	80054ee <quorem+0xe6>
 8005516:	2000      	movs	r0, #0
 8005518:	e7ee      	b.n	80054f8 <quorem+0xf0>
 800551a:	0000      	movs	r0, r0
 800551c:	0000      	movs	r0, r0
	...

08005520 <_dtoa_r>:
 8005520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005524:	4616      	mov	r6, r2
 8005526:	461f      	mov	r7, r3
 8005528:	69c4      	ldr	r4, [r0, #28]
 800552a:	b099      	sub	sp, #100	; 0x64
 800552c:	4605      	mov	r5, r0
 800552e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005532:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005536:	b974      	cbnz	r4, 8005556 <_dtoa_r+0x36>
 8005538:	2010      	movs	r0, #16
 800553a:	f000 fe1d 	bl	8006178 <malloc>
 800553e:	4602      	mov	r2, r0
 8005540:	61e8      	str	r0, [r5, #28]
 8005542:	b920      	cbnz	r0, 800554e <_dtoa_r+0x2e>
 8005544:	21ef      	movs	r1, #239	; 0xef
 8005546:	4bac      	ldr	r3, [pc, #688]	; (80057f8 <_dtoa_r+0x2d8>)
 8005548:	48ac      	ldr	r0, [pc, #688]	; (80057fc <_dtoa_r+0x2dc>)
 800554a:	f002 fc55 	bl	8007df8 <__assert_func>
 800554e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005552:	6004      	str	r4, [r0, #0]
 8005554:	60c4      	str	r4, [r0, #12]
 8005556:	69eb      	ldr	r3, [r5, #28]
 8005558:	6819      	ldr	r1, [r3, #0]
 800555a:	b151      	cbz	r1, 8005572 <_dtoa_r+0x52>
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	2301      	movs	r3, #1
 8005560:	4093      	lsls	r3, r2
 8005562:	604a      	str	r2, [r1, #4]
 8005564:	608b      	str	r3, [r1, #8]
 8005566:	4628      	mov	r0, r5
 8005568:	f000 fefa 	bl	8006360 <_Bfree>
 800556c:	2200      	movs	r2, #0
 800556e:	69eb      	ldr	r3, [r5, #28]
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	1e3b      	subs	r3, r7, #0
 8005574:	bfaf      	iteee	ge
 8005576:	2300      	movge	r3, #0
 8005578:	2201      	movlt	r2, #1
 800557a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800557e:	9305      	strlt	r3, [sp, #20]
 8005580:	bfa8      	it	ge
 8005582:	f8c8 3000 	strge.w	r3, [r8]
 8005586:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800558a:	4b9d      	ldr	r3, [pc, #628]	; (8005800 <_dtoa_r+0x2e0>)
 800558c:	bfb8      	it	lt
 800558e:	f8c8 2000 	strlt.w	r2, [r8]
 8005592:	ea33 0309 	bics.w	r3, r3, r9
 8005596:	d119      	bne.n	80055cc <_dtoa_r+0xac>
 8005598:	f242 730f 	movw	r3, #9999	; 0x270f
 800559c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800559e:	6013      	str	r3, [r2, #0]
 80055a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80055a4:	4333      	orrs	r3, r6
 80055a6:	f000 8589 	beq.w	80060bc <_dtoa_r+0xb9c>
 80055aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80055ac:	b953      	cbnz	r3, 80055c4 <_dtoa_r+0xa4>
 80055ae:	4b95      	ldr	r3, [pc, #596]	; (8005804 <_dtoa_r+0x2e4>)
 80055b0:	e023      	b.n	80055fa <_dtoa_r+0xda>
 80055b2:	4b95      	ldr	r3, [pc, #596]	; (8005808 <_dtoa_r+0x2e8>)
 80055b4:	9303      	str	r3, [sp, #12]
 80055b6:	3308      	adds	r3, #8
 80055b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	9803      	ldr	r0, [sp, #12]
 80055be:	b019      	add	sp, #100	; 0x64
 80055c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c4:	4b8f      	ldr	r3, [pc, #572]	; (8005804 <_dtoa_r+0x2e4>)
 80055c6:	9303      	str	r3, [sp, #12]
 80055c8:	3303      	adds	r3, #3
 80055ca:	e7f5      	b.n	80055b8 <_dtoa_r+0x98>
 80055cc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80055d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80055d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055d8:	2200      	movs	r2, #0
 80055da:	2300      	movs	r3, #0
 80055dc:	f7fb f9e4 	bl	80009a8 <__aeabi_dcmpeq>
 80055e0:	4680      	mov	r8, r0
 80055e2:	b160      	cbz	r0, 80055fe <_dtoa_r+0xde>
 80055e4:	2301      	movs	r3, #1
 80055e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 8562 	beq.w	80060b6 <_dtoa_r+0xb96>
 80055f2:	4b86      	ldr	r3, [pc, #536]	; (800580c <_dtoa_r+0x2ec>)
 80055f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	3b01      	subs	r3, #1
 80055fa:	9303      	str	r3, [sp, #12]
 80055fc:	e7de      	b.n	80055bc <_dtoa_r+0x9c>
 80055fe:	ab16      	add	r3, sp, #88	; 0x58
 8005600:	9301      	str	r3, [sp, #4]
 8005602:	ab17      	add	r3, sp, #92	; 0x5c
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	4628      	mov	r0, r5
 8005608:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800560c:	f001 fa3c 	bl	8006a88 <__d2b>
 8005610:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005614:	4682      	mov	sl, r0
 8005616:	2c00      	cmp	r4, #0
 8005618:	d07e      	beq.n	8005718 <_dtoa_r+0x1f8>
 800561a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800561e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005620:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005628:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800562c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005630:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005634:	4619      	mov	r1, r3
 8005636:	2200      	movs	r2, #0
 8005638:	4b75      	ldr	r3, [pc, #468]	; (8005810 <_dtoa_r+0x2f0>)
 800563a:	f7fa fd95 	bl	8000168 <__aeabi_dsub>
 800563e:	a368      	add	r3, pc, #416	; (adr r3, 80057e0 <_dtoa_r+0x2c0>)
 8005640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005644:	f7fa ff48 	bl	80004d8 <__aeabi_dmul>
 8005648:	a367      	add	r3, pc, #412	; (adr r3, 80057e8 <_dtoa_r+0x2c8>)
 800564a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564e:	f7fa fd8d 	bl	800016c <__adddf3>
 8005652:	4606      	mov	r6, r0
 8005654:	4620      	mov	r0, r4
 8005656:	460f      	mov	r7, r1
 8005658:	f7fa fed4 	bl	8000404 <__aeabi_i2d>
 800565c:	a364      	add	r3, pc, #400	; (adr r3, 80057f0 <_dtoa_r+0x2d0>)
 800565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005662:	f7fa ff39 	bl	80004d8 <__aeabi_dmul>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4630      	mov	r0, r6
 800566c:	4639      	mov	r1, r7
 800566e:	f7fa fd7d 	bl	800016c <__adddf3>
 8005672:	4606      	mov	r6, r0
 8005674:	460f      	mov	r7, r1
 8005676:	f7fb f9df 	bl	8000a38 <__aeabi_d2iz>
 800567a:	2200      	movs	r2, #0
 800567c:	4683      	mov	fp, r0
 800567e:	2300      	movs	r3, #0
 8005680:	4630      	mov	r0, r6
 8005682:	4639      	mov	r1, r7
 8005684:	f7fb f99a 	bl	80009bc <__aeabi_dcmplt>
 8005688:	b148      	cbz	r0, 800569e <_dtoa_r+0x17e>
 800568a:	4658      	mov	r0, fp
 800568c:	f7fa feba 	bl	8000404 <__aeabi_i2d>
 8005690:	4632      	mov	r2, r6
 8005692:	463b      	mov	r3, r7
 8005694:	f7fb f988 	bl	80009a8 <__aeabi_dcmpeq>
 8005698:	b908      	cbnz	r0, 800569e <_dtoa_r+0x17e>
 800569a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800569e:	f1bb 0f16 	cmp.w	fp, #22
 80056a2:	d857      	bhi.n	8005754 <_dtoa_r+0x234>
 80056a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056a8:	4b5a      	ldr	r3, [pc, #360]	; (8005814 <_dtoa_r+0x2f4>)
 80056aa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	f7fb f983 	bl	80009bc <__aeabi_dcmplt>
 80056b6:	2800      	cmp	r0, #0
 80056b8:	d04e      	beq.n	8005758 <_dtoa_r+0x238>
 80056ba:	2300      	movs	r3, #0
 80056bc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80056c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80056c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80056c4:	1b1b      	subs	r3, r3, r4
 80056c6:	1e5a      	subs	r2, r3, #1
 80056c8:	bf46      	itte	mi
 80056ca:	f1c3 0901 	rsbmi	r9, r3, #1
 80056ce:	2300      	movmi	r3, #0
 80056d0:	f04f 0900 	movpl.w	r9, #0
 80056d4:	9209      	str	r2, [sp, #36]	; 0x24
 80056d6:	bf48      	it	mi
 80056d8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80056da:	f1bb 0f00 	cmp.w	fp, #0
 80056de:	db3d      	blt.n	800575c <_dtoa_r+0x23c>
 80056e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80056e6:	445b      	add	r3, fp
 80056e8:	9309      	str	r3, [sp, #36]	; 0x24
 80056ea:	2300      	movs	r3, #0
 80056ec:	930a      	str	r3, [sp, #40]	; 0x28
 80056ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056f0:	2b09      	cmp	r3, #9
 80056f2:	d867      	bhi.n	80057c4 <_dtoa_r+0x2a4>
 80056f4:	2b05      	cmp	r3, #5
 80056f6:	bfc4      	itt	gt
 80056f8:	3b04      	subgt	r3, #4
 80056fa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80056fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056fe:	bfc8      	it	gt
 8005700:	2400      	movgt	r4, #0
 8005702:	f1a3 0302 	sub.w	r3, r3, #2
 8005706:	bfd8      	it	le
 8005708:	2401      	movle	r4, #1
 800570a:	2b03      	cmp	r3, #3
 800570c:	f200 8086 	bhi.w	800581c <_dtoa_r+0x2fc>
 8005710:	e8df f003 	tbb	[pc, r3]
 8005714:	5637392c 	.word	0x5637392c
 8005718:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800571c:	441c      	add	r4, r3
 800571e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005722:	2b20      	cmp	r3, #32
 8005724:	bfc1      	itttt	gt
 8005726:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800572a:	fa09 f903 	lslgt.w	r9, r9, r3
 800572e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005732:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005736:	bfd6      	itet	le
 8005738:	f1c3 0320 	rsble	r3, r3, #32
 800573c:	ea49 0003 	orrgt.w	r0, r9, r3
 8005740:	fa06 f003 	lslle.w	r0, r6, r3
 8005744:	f7fa fe4e 	bl	80003e4 <__aeabi_ui2d>
 8005748:	2201      	movs	r2, #1
 800574a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800574e:	3c01      	subs	r4, #1
 8005750:	9213      	str	r2, [sp, #76]	; 0x4c
 8005752:	e76f      	b.n	8005634 <_dtoa_r+0x114>
 8005754:	2301      	movs	r3, #1
 8005756:	e7b3      	b.n	80056c0 <_dtoa_r+0x1a0>
 8005758:	900f      	str	r0, [sp, #60]	; 0x3c
 800575a:	e7b2      	b.n	80056c2 <_dtoa_r+0x1a2>
 800575c:	f1cb 0300 	rsb	r3, fp, #0
 8005760:	930a      	str	r3, [sp, #40]	; 0x28
 8005762:	2300      	movs	r3, #0
 8005764:	eba9 090b 	sub.w	r9, r9, fp
 8005768:	930e      	str	r3, [sp, #56]	; 0x38
 800576a:	e7c0      	b.n	80056ee <_dtoa_r+0x1ce>
 800576c:	2300      	movs	r3, #0
 800576e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005770:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005772:	2b00      	cmp	r3, #0
 8005774:	dc55      	bgt.n	8005822 <_dtoa_r+0x302>
 8005776:	2301      	movs	r3, #1
 8005778:	461a      	mov	r2, r3
 800577a:	9306      	str	r3, [sp, #24]
 800577c:	9308      	str	r3, [sp, #32]
 800577e:	9223      	str	r2, [sp, #140]	; 0x8c
 8005780:	e00b      	b.n	800579a <_dtoa_r+0x27a>
 8005782:	2301      	movs	r3, #1
 8005784:	e7f3      	b.n	800576e <_dtoa_r+0x24e>
 8005786:	2300      	movs	r3, #0
 8005788:	930b      	str	r3, [sp, #44]	; 0x2c
 800578a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800578c:	445b      	add	r3, fp
 800578e:	9306      	str	r3, [sp, #24]
 8005790:	3301      	adds	r3, #1
 8005792:	2b01      	cmp	r3, #1
 8005794:	9308      	str	r3, [sp, #32]
 8005796:	bfb8      	it	lt
 8005798:	2301      	movlt	r3, #1
 800579a:	2100      	movs	r1, #0
 800579c:	2204      	movs	r2, #4
 800579e:	69e8      	ldr	r0, [r5, #28]
 80057a0:	f102 0614 	add.w	r6, r2, #20
 80057a4:	429e      	cmp	r6, r3
 80057a6:	d940      	bls.n	800582a <_dtoa_r+0x30a>
 80057a8:	6041      	str	r1, [r0, #4]
 80057aa:	4628      	mov	r0, r5
 80057ac:	f000 fd98 	bl	80062e0 <_Balloc>
 80057b0:	9003      	str	r0, [sp, #12]
 80057b2:	2800      	cmp	r0, #0
 80057b4:	d13c      	bne.n	8005830 <_dtoa_r+0x310>
 80057b6:	4602      	mov	r2, r0
 80057b8:	f240 11af 	movw	r1, #431	; 0x1af
 80057bc:	4b16      	ldr	r3, [pc, #88]	; (8005818 <_dtoa_r+0x2f8>)
 80057be:	e6c3      	b.n	8005548 <_dtoa_r+0x28>
 80057c0:	2301      	movs	r3, #1
 80057c2:	e7e1      	b.n	8005788 <_dtoa_r+0x268>
 80057c4:	2401      	movs	r4, #1
 80057c6:	2300      	movs	r3, #0
 80057c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80057ca:	9322      	str	r3, [sp, #136]	; 0x88
 80057cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057d0:	2200      	movs	r2, #0
 80057d2:	9306      	str	r3, [sp, #24]
 80057d4:	9308      	str	r3, [sp, #32]
 80057d6:	2312      	movs	r3, #18
 80057d8:	e7d1      	b.n	800577e <_dtoa_r+0x25e>
 80057da:	bf00      	nop
 80057dc:	f3af 8000 	nop.w
 80057e0:	636f4361 	.word	0x636f4361
 80057e4:	3fd287a7 	.word	0x3fd287a7
 80057e8:	8b60c8b3 	.word	0x8b60c8b3
 80057ec:	3fc68a28 	.word	0x3fc68a28
 80057f0:	509f79fb 	.word	0x509f79fb
 80057f4:	3fd34413 	.word	0x3fd34413
 80057f8:	0800aca9 	.word	0x0800aca9
 80057fc:	0800acc0 	.word	0x0800acc0
 8005800:	7ff00000 	.word	0x7ff00000
 8005804:	0800aca5 	.word	0x0800aca5
 8005808:	0800ac9c 	.word	0x0800ac9c
 800580c:	0800ac74 	.word	0x0800ac74
 8005810:	3ff80000 	.word	0x3ff80000
 8005814:	0800adb0 	.word	0x0800adb0
 8005818:	0800ad18 	.word	0x0800ad18
 800581c:	2301      	movs	r3, #1
 800581e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005820:	e7d4      	b.n	80057cc <_dtoa_r+0x2ac>
 8005822:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005824:	9306      	str	r3, [sp, #24]
 8005826:	9308      	str	r3, [sp, #32]
 8005828:	e7b7      	b.n	800579a <_dtoa_r+0x27a>
 800582a:	3101      	adds	r1, #1
 800582c:	0052      	lsls	r2, r2, #1
 800582e:	e7b7      	b.n	80057a0 <_dtoa_r+0x280>
 8005830:	69eb      	ldr	r3, [r5, #28]
 8005832:	9a03      	ldr	r2, [sp, #12]
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	9b08      	ldr	r3, [sp, #32]
 8005838:	2b0e      	cmp	r3, #14
 800583a:	f200 80a8 	bhi.w	800598e <_dtoa_r+0x46e>
 800583e:	2c00      	cmp	r4, #0
 8005840:	f000 80a5 	beq.w	800598e <_dtoa_r+0x46e>
 8005844:	f1bb 0f00 	cmp.w	fp, #0
 8005848:	dd34      	ble.n	80058b4 <_dtoa_r+0x394>
 800584a:	4b9a      	ldr	r3, [pc, #616]	; (8005ab4 <_dtoa_r+0x594>)
 800584c:	f00b 020f 	and.w	r2, fp, #15
 8005850:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005854:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005858:	e9d3 3400 	ldrd	r3, r4, [r3]
 800585c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005860:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005864:	d016      	beq.n	8005894 <_dtoa_r+0x374>
 8005866:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800586a:	4b93      	ldr	r3, [pc, #588]	; (8005ab8 <_dtoa_r+0x598>)
 800586c:	2703      	movs	r7, #3
 800586e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005872:	f7fa ff5b 	bl	800072c <__aeabi_ddiv>
 8005876:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800587a:	f004 040f 	and.w	r4, r4, #15
 800587e:	4e8e      	ldr	r6, [pc, #568]	; (8005ab8 <_dtoa_r+0x598>)
 8005880:	b954      	cbnz	r4, 8005898 <_dtoa_r+0x378>
 8005882:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005886:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800588a:	f7fa ff4f 	bl	800072c <__aeabi_ddiv>
 800588e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005892:	e029      	b.n	80058e8 <_dtoa_r+0x3c8>
 8005894:	2702      	movs	r7, #2
 8005896:	e7f2      	b.n	800587e <_dtoa_r+0x35e>
 8005898:	07e1      	lsls	r1, r4, #31
 800589a:	d508      	bpl.n	80058ae <_dtoa_r+0x38e>
 800589c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80058a4:	f7fa fe18 	bl	80004d8 <__aeabi_dmul>
 80058a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058ac:	3701      	adds	r7, #1
 80058ae:	1064      	asrs	r4, r4, #1
 80058b0:	3608      	adds	r6, #8
 80058b2:	e7e5      	b.n	8005880 <_dtoa_r+0x360>
 80058b4:	f000 80a5 	beq.w	8005a02 <_dtoa_r+0x4e2>
 80058b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058bc:	f1cb 0400 	rsb	r4, fp, #0
 80058c0:	4b7c      	ldr	r3, [pc, #496]	; (8005ab4 <_dtoa_r+0x594>)
 80058c2:	f004 020f 	and.w	r2, r4, #15
 80058c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ce:	f7fa fe03 	bl	80004d8 <__aeabi_dmul>
 80058d2:	2702      	movs	r7, #2
 80058d4:	2300      	movs	r3, #0
 80058d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058da:	4e77      	ldr	r6, [pc, #476]	; (8005ab8 <_dtoa_r+0x598>)
 80058dc:	1124      	asrs	r4, r4, #4
 80058de:	2c00      	cmp	r4, #0
 80058e0:	f040 8084 	bne.w	80059ec <_dtoa_r+0x4cc>
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1d2      	bne.n	800588e <_dtoa_r+0x36e>
 80058e8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80058ec:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80058f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 8087 	beq.w	8005a06 <_dtoa_r+0x4e6>
 80058f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058fc:	2200      	movs	r2, #0
 80058fe:	4b6f      	ldr	r3, [pc, #444]	; (8005abc <_dtoa_r+0x59c>)
 8005900:	f7fb f85c 	bl	80009bc <__aeabi_dcmplt>
 8005904:	2800      	cmp	r0, #0
 8005906:	d07e      	beq.n	8005a06 <_dtoa_r+0x4e6>
 8005908:	9b08      	ldr	r3, [sp, #32]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d07b      	beq.n	8005a06 <_dtoa_r+0x4e6>
 800590e:	9b06      	ldr	r3, [sp, #24]
 8005910:	2b00      	cmp	r3, #0
 8005912:	dd38      	ble.n	8005986 <_dtoa_r+0x466>
 8005914:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005918:	2200      	movs	r2, #0
 800591a:	4b69      	ldr	r3, [pc, #420]	; (8005ac0 <_dtoa_r+0x5a0>)
 800591c:	f7fa fddc 	bl	80004d8 <__aeabi_dmul>
 8005920:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005924:	9c06      	ldr	r4, [sp, #24]
 8005926:	f10b 38ff 	add.w	r8, fp, #4294967295	; 0xffffffff
 800592a:	3701      	adds	r7, #1
 800592c:	4638      	mov	r0, r7
 800592e:	f7fa fd69 	bl	8000404 <__aeabi_i2d>
 8005932:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005936:	f7fa fdcf 	bl	80004d8 <__aeabi_dmul>
 800593a:	2200      	movs	r2, #0
 800593c:	4b61      	ldr	r3, [pc, #388]	; (8005ac4 <_dtoa_r+0x5a4>)
 800593e:	f7fa fc15 	bl	800016c <__adddf3>
 8005942:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005946:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800594a:	9611      	str	r6, [sp, #68]	; 0x44
 800594c:	2c00      	cmp	r4, #0
 800594e:	d15d      	bne.n	8005a0c <_dtoa_r+0x4ec>
 8005950:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005954:	2200      	movs	r2, #0
 8005956:	4b5c      	ldr	r3, [pc, #368]	; (8005ac8 <_dtoa_r+0x5a8>)
 8005958:	f7fa fc06 	bl	8000168 <__aeabi_dsub>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005964:	4633      	mov	r3, r6
 8005966:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005968:	f7fb f846 	bl	80009f8 <__aeabi_dcmpgt>
 800596c:	2800      	cmp	r0, #0
 800596e:	f040 8295 	bne.w	8005e9c <_dtoa_r+0x97c>
 8005972:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005976:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005978:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800597c:	f7fb f81e 	bl	80009bc <__aeabi_dcmplt>
 8005980:	2800      	cmp	r0, #0
 8005982:	f040 8289 	bne.w	8005e98 <_dtoa_r+0x978>
 8005986:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800598a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800598e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005990:	2b00      	cmp	r3, #0
 8005992:	f2c0 8151 	blt.w	8005c38 <_dtoa_r+0x718>
 8005996:	f1bb 0f0e 	cmp.w	fp, #14
 800599a:	f300 814d 	bgt.w	8005c38 <_dtoa_r+0x718>
 800599e:	4b45      	ldr	r3, [pc, #276]	; (8005ab4 <_dtoa_r+0x594>)
 80059a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80059a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80059a8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80059ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f280 80da 	bge.w	8005b68 <_dtoa_r+0x648>
 80059b4:	9b08      	ldr	r3, [sp, #32]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f300 80d6 	bgt.w	8005b68 <_dtoa_r+0x648>
 80059bc:	f040 826b 	bne.w	8005e96 <_dtoa_r+0x976>
 80059c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059c4:	2200      	movs	r2, #0
 80059c6:	4b40      	ldr	r3, [pc, #256]	; (8005ac8 <_dtoa_r+0x5a8>)
 80059c8:	f7fa fd86 	bl	80004d8 <__aeabi_dmul>
 80059cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059d0:	f7fb f808 	bl	80009e4 <__aeabi_dcmpge>
 80059d4:	9c08      	ldr	r4, [sp, #32]
 80059d6:	4626      	mov	r6, r4
 80059d8:	2800      	cmp	r0, #0
 80059da:	f040 8241 	bne.w	8005e60 <_dtoa_r+0x940>
 80059de:	2331      	movs	r3, #49	; 0x31
 80059e0:	9f03      	ldr	r7, [sp, #12]
 80059e2:	f10b 0b01 	add.w	fp, fp, #1
 80059e6:	f807 3b01 	strb.w	r3, [r7], #1
 80059ea:	e23d      	b.n	8005e68 <_dtoa_r+0x948>
 80059ec:	07e2      	lsls	r2, r4, #31
 80059ee:	d505      	bpl.n	80059fc <_dtoa_r+0x4dc>
 80059f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80059f4:	f7fa fd70 	bl	80004d8 <__aeabi_dmul>
 80059f8:	2301      	movs	r3, #1
 80059fa:	3701      	adds	r7, #1
 80059fc:	1064      	asrs	r4, r4, #1
 80059fe:	3608      	adds	r6, #8
 8005a00:	e76d      	b.n	80058de <_dtoa_r+0x3be>
 8005a02:	2702      	movs	r7, #2
 8005a04:	e770      	b.n	80058e8 <_dtoa_r+0x3c8>
 8005a06:	46d8      	mov	r8, fp
 8005a08:	9c08      	ldr	r4, [sp, #32]
 8005a0a:	e78f      	b.n	800592c <_dtoa_r+0x40c>
 8005a0c:	9903      	ldr	r1, [sp, #12]
 8005a0e:	4b29      	ldr	r3, [pc, #164]	; (8005ab4 <_dtoa_r+0x594>)
 8005a10:	4421      	add	r1, r4
 8005a12:	9112      	str	r1, [sp, #72]	; 0x48
 8005a14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a16:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005a1a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005a1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005a22:	2900      	cmp	r1, #0
 8005a24:	d054      	beq.n	8005ad0 <_dtoa_r+0x5b0>
 8005a26:	2000      	movs	r0, #0
 8005a28:	4928      	ldr	r1, [pc, #160]	; (8005acc <_dtoa_r+0x5ac>)
 8005a2a:	f7fa fe7f 	bl	800072c <__aeabi_ddiv>
 8005a2e:	463b      	mov	r3, r7
 8005a30:	4632      	mov	r2, r6
 8005a32:	f7fa fb99 	bl	8000168 <__aeabi_dsub>
 8005a36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a3a:	9f03      	ldr	r7, [sp, #12]
 8005a3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a40:	f7fa fffa 	bl	8000a38 <__aeabi_d2iz>
 8005a44:	4604      	mov	r4, r0
 8005a46:	f7fa fcdd 	bl	8000404 <__aeabi_i2d>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a52:	f7fa fb89 	bl	8000168 <__aeabi_dsub>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	3430      	adds	r4, #48	; 0x30
 8005a5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a64:	f807 4b01 	strb.w	r4, [r7], #1
 8005a68:	f7fa ffa8 	bl	80009bc <__aeabi_dcmplt>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d173      	bne.n	8005b58 <_dtoa_r+0x638>
 8005a70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a74:	2000      	movs	r0, #0
 8005a76:	4911      	ldr	r1, [pc, #68]	; (8005abc <_dtoa_r+0x59c>)
 8005a78:	f7fa fb76 	bl	8000168 <__aeabi_dsub>
 8005a7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a80:	f7fa ff9c 	bl	80009bc <__aeabi_dcmplt>
 8005a84:	2800      	cmp	r0, #0
 8005a86:	f040 80b6 	bne.w	8005bf6 <_dtoa_r+0x6d6>
 8005a8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a8c:	429f      	cmp	r7, r3
 8005a8e:	f43f af7a 	beq.w	8005986 <_dtoa_r+0x466>
 8005a92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a96:	2200      	movs	r2, #0
 8005a98:	4b09      	ldr	r3, [pc, #36]	; (8005ac0 <_dtoa_r+0x5a0>)
 8005a9a:	f7fa fd1d 	bl	80004d8 <__aeabi_dmul>
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005aa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <_dtoa_r+0x5a0>)
 8005aaa:	f7fa fd15 	bl	80004d8 <__aeabi_dmul>
 8005aae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ab2:	e7c3      	b.n	8005a3c <_dtoa_r+0x51c>
 8005ab4:	0800adb0 	.word	0x0800adb0
 8005ab8:	0800ad88 	.word	0x0800ad88
 8005abc:	3ff00000 	.word	0x3ff00000
 8005ac0:	40240000 	.word	0x40240000
 8005ac4:	401c0000 	.word	0x401c0000
 8005ac8:	40140000 	.word	0x40140000
 8005acc:	3fe00000 	.word	0x3fe00000
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	4639      	mov	r1, r7
 8005ad4:	f7fa fd00 	bl	80004d8 <__aeabi_dmul>
 8005ad8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ada:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ade:	9c03      	ldr	r4, [sp, #12]
 8005ae0:	9314      	str	r3, [sp, #80]	; 0x50
 8005ae2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ae6:	f7fa ffa7 	bl	8000a38 <__aeabi_d2iz>
 8005aea:	9015      	str	r0, [sp, #84]	; 0x54
 8005aec:	f7fa fc8a 	bl	8000404 <__aeabi_i2d>
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005af8:	f7fa fb36 	bl	8000168 <__aeabi_dsub>
 8005afc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005afe:	4606      	mov	r6, r0
 8005b00:	3330      	adds	r3, #48	; 0x30
 8005b02:	f804 3b01 	strb.w	r3, [r4], #1
 8005b06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b08:	460f      	mov	r7, r1
 8005b0a:	429c      	cmp	r4, r3
 8005b0c:	f04f 0200 	mov.w	r2, #0
 8005b10:	d124      	bne.n	8005b5c <_dtoa_r+0x63c>
 8005b12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b16:	4baf      	ldr	r3, [pc, #700]	; (8005dd4 <_dtoa_r+0x8b4>)
 8005b18:	f7fa fb28 	bl	800016c <__adddf3>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4630      	mov	r0, r6
 8005b22:	4639      	mov	r1, r7
 8005b24:	f7fa ff68 	bl	80009f8 <__aeabi_dcmpgt>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	d163      	bne.n	8005bf4 <_dtoa_r+0x6d4>
 8005b2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b30:	2000      	movs	r0, #0
 8005b32:	49a8      	ldr	r1, [pc, #672]	; (8005dd4 <_dtoa_r+0x8b4>)
 8005b34:	f7fa fb18 	bl	8000168 <__aeabi_dsub>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	4639      	mov	r1, r7
 8005b40:	f7fa ff3c 	bl	80009bc <__aeabi_dcmplt>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	f43f af1e 	beq.w	8005986 <_dtoa_r+0x466>
 8005b4a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005b4c:	1e7b      	subs	r3, r7, #1
 8005b4e:	9314      	str	r3, [sp, #80]	; 0x50
 8005b50:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005b54:	2b30      	cmp	r3, #48	; 0x30
 8005b56:	d0f8      	beq.n	8005b4a <_dtoa_r+0x62a>
 8005b58:	46c3      	mov	fp, r8
 8005b5a:	e03b      	b.n	8005bd4 <_dtoa_r+0x6b4>
 8005b5c:	4b9e      	ldr	r3, [pc, #632]	; (8005dd8 <_dtoa_r+0x8b8>)
 8005b5e:	f7fa fcbb 	bl	80004d8 <__aeabi_dmul>
 8005b62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b66:	e7bc      	b.n	8005ae2 <_dtoa_r+0x5c2>
 8005b68:	9f03      	ldr	r7, [sp, #12]
 8005b6a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005b6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b72:	4640      	mov	r0, r8
 8005b74:	4649      	mov	r1, r9
 8005b76:	f7fa fdd9 	bl	800072c <__aeabi_ddiv>
 8005b7a:	f7fa ff5d 	bl	8000a38 <__aeabi_d2iz>
 8005b7e:	4604      	mov	r4, r0
 8005b80:	f7fa fc40 	bl	8000404 <__aeabi_i2d>
 8005b84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b88:	f7fa fca6 	bl	80004d8 <__aeabi_dmul>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4640      	mov	r0, r8
 8005b92:	4649      	mov	r1, r9
 8005b94:	f7fa fae8 	bl	8000168 <__aeabi_dsub>
 8005b98:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005b9c:	f807 6b01 	strb.w	r6, [r7], #1
 8005ba0:	9e03      	ldr	r6, [sp, #12]
 8005ba2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005ba6:	1bbe      	subs	r6, r7, r6
 8005ba8:	45b4      	cmp	ip, r6
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	d136      	bne.n	8005c1e <_dtoa_r+0x6fe>
 8005bb0:	f7fa fadc 	bl	800016c <__adddf3>
 8005bb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bb8:	4680      	mov	r8, r0
 8005bba:	4689      	mov	r9, r1
 8005bbc:	f7fa ff1c 	bl	80009f8 <__aeabi_dcmpgt>
 8005bc0:	bb58      	cbnz	r0, 8005c1a <_dtoa_r+0x6fa>
 8005bc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bc6:	4640      	mov	r0, r8
 8005bc8:	4649      	mov	r1, r9
 8005bca:	f7fa feed 	bl	80009a8 <__aeabi_dcmpeq>
 8005bce:	b108      	cbz	r0, 8005bd4 <_dtoa_r+0x6b4>
 8005bd0:	07e3      	lsls	r3, r4, #31
 8005bd2:	d422      	bmi.n	8005c1a <_dtoa_r+0x6fa>
 8005bd4:	4651      	mov	r1, sl
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f000 fbc2 	bl	8006360 <_Bfree>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005be0:	703b      	strb	r3, [r7, #0]
 8005be2:	f10b 0301 	add.w	r3, fp, #1
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f43f ace6 	beq.w	80055bc <_dtoa_r+0x9c>
 8005bf0:	601f      	str	r7, [r3, #0]
 8005bf2:	e4e3      	b.n	80055bc <_dtoa_r+0x9c>
 8005bf4:	4627      	mov	r7, r4
 8005bf6:	463b      	mov	r3, r7
 8005bf8:	461f      	mov	r7, r3
 8005bfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005bfe:	2a39      	cmp	r2, #57	; 0x39
 8005c00:	d107      	bne.n	8005c12 <_dtoa_r+0x6f2>
 8005c02:	9a03      	ldr	r2, [sp, #12]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d1f7      	bne.n	8005bf8 <_dtoa_r+0x6d8>
 8005c08:	2230      	movs	r2, #48	; 0x30
 8005c0a:	9903      	ldr	r1, [sp, #12]
 8005c0c:	f108 0801 	add.w	r8, r8, #1
 8005c10:	700a      	strb	r2, [r1, #0]
 8005c12:	781a      	ldrb	r2, [r3, #0]
 8005c14:	3201      	adds	r2, #1
 8005c16:	701a      	strb	r2, [r3, #0]
 8005c18:	e79e      	b.n	8005b58 <_dtoa_r+0x638>
 8005c1a:	46d8      	mov	r8, fp
 8005c1c:	e7eb      	b.n	8005bf6 <_dtoa_r+0x6d6>
 8005c1e:	2200      	movs	r2, #0
 8005c20:	4b6d      	ldr	r3, [pc, #436]	; (8005dd8 <_dtoa_r+0x8b8>)
 8005c22:	f7fa fc59 	bl	80004d8 <__aeabi_dmul>
 8005c26:	2200      	movs	r2, #0
 8005c28:	2300      	movs	r3, #0
 8005c2a:	4680      	mov	r8, r0
 8005c2c:	4689      	mov	r9, r1
 8005c2e:	f7fa febb 	bl	80009a8 <__aeabi_dcmpeq>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	d09b      	beq.n	8005b6e <_dtoa_r+0x64e>
 8005c36:	e7cd      	b.n	8005bd4 <_dtoa_r+0x6b4>
 8005c38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c3a:	2a00      	cmp	r2, #0
 8005c3c:	f000 80c4 	beq.w	8005dc8 <_dtoa_r+0x8a8>
 8005c40:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005c42:	2a01      	cmp	r2, #1
 8005c44:	f300 80a8 	bgt.w	8005d98 <_dtoa_r+0x878>
 8005c48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005c4a:	2a00      	cmp	r2, #0
 8005c4c:	f000 80a0 	beq.w	8005d90 <_dtoa_r+0x870>
 8005c50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c54:	464f      	mov	r7, r9
 8005c56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005c58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	441a      	add	r2, r3
 8005c5e:	4628      	mov	r0, r5
 8005c60:	4499      	add	r9, r3
 8005c62:	9209      	str	r2, [sp, #36]	; 0x24
 8005c64:	f000 fc7c 	bl	8006560 <__i2b>
 8005c68:	4606      	mov	r6, r0
 8005c6a:	b15f      	cbz	r7, 8005c84 <_dtoa_r+0x764>
 8005c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	dd08      	ble.n	8005c84 <_dtoa_r+0x764>
 8005c72:	42bb      	cmp	r3, r7
 8005c74:	bfa8      	it	ge
 8005c76:	463b      	movge	r3, r7
 8005c78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c7a:	eba9 0903 	sub.w	r9, r9, r3
 8005c7e:	1aff      	subs	r7, r7, r3
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	9309      	str	r3, [sp, #36]	; 0x24
 8005c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c86:	b1f3      	cbz	r3, 8005cc6 <_dtoa_r+0x7a6>
 8005c88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 80a0 	beq.w	8005dd0 <_dtoa_r+0x8b0>
 8005c90:	2c00      	cmp	r4, #0
 8005c92:	dd10      	ble.n	8005cb6 <_dtoa_r+0x796>
 8005c94:	4631      	mov	r1, r6
 8005c96:	4622      	mov	r2, r4
 8005c98:	4628      	mov	r0, r5
 8005c9a:	f000 fd1f 	bl	80066dc <__pow5mult>
 8005c9e:	4652      	mov	r2, sl
 8005ca0:	4601      	mov	r1, r0
 8005ca2:	4606      	mov	r6, r0
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	f000 fc71 	bl	800658c <__multiply>
 8005caa:	4680      	mov	r8, r0
 8005cac:	4651      	mov	r1, sl
 8005cae:	4628      	mov	r0, r5
 8005cb0:	f000 fb56 	bl	8006360 <_Bfree>
 8005cb4:	46c2      	mov	sl, r8
 8005cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cb8:	1b1a      	subs	r2, r3, r4
 8005cba:	d004      	beq.n	8005cc6 <_dtoa_r+0x7a6>
 8005cbc:	4651      	mov	r1, sl
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f000 fd0c 	bl	80066dc <__pow5mult>
 8005cc4:	4682      	mov	sl, r0
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	4628      	mov	r0, r5
 8005cca:	f000 fc49 	bl	8006560 <__i2b>
 8005cce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cd0:	4604      	mov	r4, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f340 8082 	ble.w	8005ddc <_dtoa_r+0x8bc>
 8005cd8:	461a      	mov	r2, r3
 8005cda:	4601      	mov	r1, r0
 8005cdc:	4628      	mov	r0, r5
 8005cde:	f000 fcfd 	bl	80066dc <__pow5mult>
 8005ce2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	dd7b      	ble.n	8005de2 <_dtoa_r+0x8c2>
 8005cea:	f04f 0800 	mov.w	r8, #0
 8005cee:	6923      	ldr	r3, [r4, #16]
 8005cf0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005cf4:	6918      	ldr	r0, [r3, #16]
 8005cf6:	f000 fbe5 	bl	80064c4 <__hi0bits>
 8005cfa:	f1c0 0020 	rsb	r0, r0, #32
 8005cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d00:	4418      	add	r0, r3
 8005d02:	f010 001f 	ands.w	r0, r0, #31
 8005d06:	f000 8092 	beq.w	8005e2e <_dtoa_r+0x90e>
 8005d0a:	f1c0 0320 	rsb	r3, r0, #32
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	f340 8085 	ble.w	8005e1e <_dtoa_r+0x8fe>
 8005d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d16:	f1c0 001c 	rsb	r0, r0, #28
 8005d1a:	4403      	add	r3, r0
 8005d1c:	4481      	add	r9, r0
 8005d1e:	4407      	add	r7, r0
 8005d20:	9309      	str	r3, [sp, #36]	; 0x24
 8005d22:	f1b9 0f00 	cmp.w	r9, #0
 8005d26:	dd05      	ble.n	8005d34 <_dtoa_r+0x814>
 8005d28:	4651      	mov	r1, sl
 8005d2a:	464a      	mov	r2, r9
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	f000 fd2f 	bl	8006790 <__lshift>
 8005d32:	4682      	mov	sl, r0
 8005d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	dd05      	ble.n	8005d46 <_dtoa_r+0x826>
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	4628      	mov	r0, r5
 8005d40:	f000 fd26 	bl	8006790 <__lshift>
 8005d44:	4604      	mov	r4, r0
 8005d46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d072      	beq.n	8005e32 <_dtoa_r+0x912>
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	4650      	mov	r0, sl
 8005d50:	f000 fd8a 	bl	8006868 <__mcmp>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	da6c      	bge.n	8005e32 <_dtoa_r+0x912>
 8005d58:	2300      	movs	r3, #0
 8005d5a:	4651      	mov	r1, sl
 8005d5c:	220a      	movs	r2, #10
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f000 fb20 	bl	80063a4 <__multadd>
 8005d64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d66:	4682      	mov	sl, r0
 8005d68:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 81ac 	beq.w	80060ca <_dtoa_r+0xbaa>
 8005d72:	2300      	movs	r3, #0
 8005d74:	4631      	mov	r1, r6
 8005d76:	220a      	movs	r2, #10
 8005d78:	4628      	mov	r0, r5
 8005d7a:	f000 fb13 	bl	80063a4 <__multadd>
 8005d7e:	9b06      	ldr	r3, [sp, #24]
 8005d80:	4606      	mov	r6, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f300 8093 	bgt.w	8005eae <_dtoa_r+0x98e>
 8005d88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	dc59      	bgt.n	8005e42 <_dtoa_r+0x922>
 8005d8e:	e08e      	b.n	8005eae <_dtoa_r+0x98e>
 8005d90:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005d92:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d96:	e75d      	b.n	8005c54 <_dtoa_r+0x734>
 8005d98:	9b08      	ldr	r3, [sp, #32]
 8005d9a:	1e5c      	subs	r4, r3, #1
 8005d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d9e:	42a3      	cmp	r3, r4
 8005da0:	bfbf      	itttt	lt
 8005da2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005da4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005da6:	1ae3      	sublt	r3, r4, r3
 8005da8:	18d2      	addlt	r2, r2, r3
 8005daa:	bfa8      	it	ge
 8005dac:	1b1c      	subge	r4, r3, r4
 8005dae:	9b08      	ldr	r3, [sp, #32]
 8005db0:	bfbe      	ittt	lt
 8005db2:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005db4:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005db6:	2400      	movlt	r4, #0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	bfb5      	itete	lt
 8005dbc:	eba9 0703 	sublt.w	r7, r9, r3
 8005dc0:	464f      	movge	r7, r9
 8005dc2:	2300      	movlt	r3, #0
 8005dc4:	9b08      	ldrge	r3, [sp, #32]
 8005dc6:	e747      	b.n	8005c58 <_dtoa_r+0x738>
 8005dc8:	464f      	mov	r7, r9
 8005dca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005dcc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005dce:	e74c      	b.n	8005c6a <_dtoa_r+0x74a>
 8005dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dd2:	e773      	b.n	8005cbc <_dtoa_r+0x79c>
 8005dd4:	3fe00000 	.word	0x3fe00000
 8005dd8:	40240000 	.word	0x40240000
 8005ddc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	dc18      	bgt.n	8005e14 <_dtoa_r+0x8f4>
 8005de2:	9b04      	ldr	r3, [sp, #16]
 8005de4:	b9b3      	cbnz	r3, 8005e14 <_dtoa_r+0x8f4>
 8005de6:	9b05      	ldr	r3, [sp, #20]
 8005de8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dec:	b993      	cbnz	r3, 8005e14 <_dtoa_r+0x8f4>
 8005dee:	9b05      	ldr	r3, [sp, #20]
 8005df0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005df4:	0d1b      	lsrs	r3, r3, #20
 8005df6:	051b      	lsls	r3, r3, #20
 8005df8:	b17b      	cbz	r3, 8005e1a <_dtoa_r+0x8fa>
 8005dfa:	f04f 0801 	mov.w	r8, #1
 8005dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e00:	f109 0901 	add.w	r9, r9, #1
 8005e04:	3301      	adds	r3, #1
 8005e06:	9309      	str	r3, [sp, #36]	; 0x24
 8005e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f47f af6f 	bne.w	8005cee <_dtoa_r+0x7ce>
 8005e10:	2001      	movs	r0, #1
 8005e12:	e774      	b.n	8005cfe <_dtoa_r+0x7de>
 8005e14:	f04f 0800 	mov.w	r8, #0
 8005e18:	e7f6      	b.n	8005e08 <_dtoa_r+0x8e8>
 8005e1a:	4698      	mov	r8, r3
 8005e1c:	e7f4      	b.n	8005e08 <_dtoa_r+0x8e8>
 8005e1e:	d080      	beq.n	8005d22 <_dtoa_r+0x802>
 8005e20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e22:	331c      	adds	r3, #28
 8005e24:	441a      	add	r2, r3
 8005e26:	4499      	add	r9, r3
 8005e28:	441f      	add	r7, r3
 8005e2a:	9209      	str	r2, [sp, #36]	; 0x24
 8005e2c:	e779      	b.n	8005d22 <_dtoa_r+0x802>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	e7f6      	b.n	8005e20 <_dtoa_r+0x900>
 8005e32:	9b08      	ldr	r3, [sp, #32]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	dc34      	bgt.n	8005ea2 <_dtoa_r+0x982>
 8005e38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	dd31      	ble.n	8005ea2 <_dtoa_r+0x982>
 8005e3e:	9b08      	ldr	r3, [sp, #32]
 8005e40:	9306      	str	r3, [sp, #24]
 8005e42:	9b06      	ldr	r3, [sp, #24]
 8005e44:	b963      	cbnz	r3, 8005e60 <_dtoa_r+0x940>
 8005e46:	4621      	mov	r1, r4
 8005e48:	2205      	movs	r2, #5
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	f000 faaa 	bl	80063a4 <__multadd>
 8005e50:	4601      	mov	r1, r0
 8005e52:	4604      	mov	r4, r0
 8005e54:	4650      	mov	r0, sl
 8005e56:	f000 fd07 	bl	8006868 <__mcmp>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	f73f adbf 	bgt.w	80059de <_dtoa_r+0x4be>
 8005e60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e62:	9f03      	ldr	r7, [sp, #12]
 8005e64:	ea6f 0b03 	mvn.w	fp, r3
 8005e68:	f04f 0800 	mov.w	r8, #0
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	4628      	mov	r0, r5
 8005e70:	f000 fa76 	bl	8006360 <_Bfree>
 8005e74:	2e00      	cmp	r6, #0
 8005e76:	f43f aead 	beq.w	8005bd4 <_dtoa_r+0x6b4>
 8005e7a:	f1b8 0f00 	cmp.w	r8, #0
 8005e7e:	d005      	beq.n	8005e8c <_dtoa_r+0x96c>
 8005e80:	45b0      	cmp	r8, r6
 8005e82:	d003      	beq.n	8005e8c <_dtoa_r+0x96c>
 8005e84:	4641      	mov	r1, r8
 8005e86:	4628      	mov	r0, r5
 8005e88:	f000 fa6a 	bl	8006360 <_Bfree>
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	4628      	mov	r0, r5
 8005e90:	f000 fa66 	bl	8006360 <_Bfree>
 8005e94:	e69e      	b.n	8005bd4 <_dtoa_r+0x6b4>
 8005e96:	2400      	movs	r4, #0
 8005e98:	4626      	mov	r6, r4
 8005e9a:	e7e1      	b.n	8005e60 <_dtoa_r+0x940>
 8005e9c:	46c3      	mov	fp, r8
 8005e9e:	4626      	mov	r6, r4
 8005ea0:	e59d      	b.n	80059de <_dtoa_r+0x4be>
 8005ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 80c8 	beq.w	800603a <_dtoa_r+0xb1a>
 8005eaa:	9b08      	ldr	r3, [sp, #32]
 8005eac:	9306      	str	r3, [sp, #24]
 8005eae:	2f00      	cmp	r7, #0
 8005eb0:	dd05      	ble.n	8005ebe <_dtoa_r+0x99e>
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	463a      	mov	r2, r7
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	f000 fc6a 	bl	8006790 <__lshift>
 8005ebc:	4606      	mov	r6, r0
 8005ebe:	f1b8 0f00 	cmp.w	r8, #0
 8005ec2:	d05b      	beq.n	8005f7c <_dtoa_r+0xa5c>
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	6871      	ldr	r1, [r6, #4]
 8005ec8:	f000 fa0a 	bl	80062e0 <_Balloc>
 8005ecc:	4607      	mov	r7, r0
 8005ece:	b928      	cbnz	r0, 8005edc <_dtoa_r+0x9bc>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005ed6:	4b81      	ldr	r3, [pc, #516]	; (80060dc <_dtoa_r+0xbbc>)
 8005ed8:	f7ff bb36 	b.w	8005548 <_dtoa_r+0x28>
 8005edc:	6932      	ldr	r2, [r6, #16]
 8005ede:	f106 010c 	add.w	r1, r6, #12
 8005ee2:	3202      	adds	r2, #2
 8005ee4:	0092      	lsls	r2, r2, #2
 8005ee6:	300c      	adds	r0, #12
 8005ee8:	f001 ff72 	bl	8007dd0 <memcpy>
 8005eec:	2201      	movs	r2, #1
 8005eee:	4639      	mov	r1, r7
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	f000 fc4d 	bl	8006790 <__lshift>
 8005ef6:	46b0      	mov	r8, r6
 8005ef8:	4606      	mov	r6, r0
 8005efa:	9b03      	ldr	r3, [sp, #12]
 8005efc:	9a03      	ldr	r2, [sp, #12]
 8005efe:	3301      	adds	r3, #1
 8005f00:	9308      	str	r3, [sp, #32]
 8005f02:	9b06      	ldr	r3, [sp, #24]
 8005f04:	4413      	add	r3, r2
 8005f06:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f08:	9b04      	ldr	r3, [sp, #16]
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8005f10:	9b08      	ldr	r3, [sp, #32]
 8005f12:	4621      	mov	r1, r4
 8005f14:	3b01      	subs	r3, #1
 8005f16:	4650      	mov	r0, sl
 8005f18:	9304      	str	r3, [sp, #16]
 8005f1a:	f7ff fa75 	bl	8005408 <quorem>
 8005f1e:	4641      	mov	r1, r8
 8005f20:	9006      	str	r0, [sp, #24]
 8005f22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005f26:	4650      	mov	r0, sl
 8005f28:	f000 fc9e 	bl	8006868 <__mcmp>
 8005f2c:	4632      	mov	r2, r6
 8005f2e:	9009      	str	r0, [sp, #36]	; 0x24
 8005f30:	4621      	mov	r1, r4
 8005f32:	4628      	mov	r0, r5
 8005f34:	f000 fcb4 	bl	80068a0 <__mdiff>
 8005f38:	68c2      	ldr	r2, [r0, #12]
 8005f3a:	4607      	mov	r7, r0
 8005f3c:	bb02      	cbnz	r2, 8005f80 <_dtoa_r+0xa60>
 8005f3e:	4601      	mov	r1, r0
 8005f40:	4650      	mov	r0, sl
 8005f42:	f000 fc91 	bl	8006868 <__mcmp>
 8005f46:	4602      	mov	r2, r0
 8005f48:	4639      	mov	r1, r7
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	920c      	str	r2, [sp, #48]	; 0x30
 8005f4e:	f000 fa07 	bl	8006360 <_Bfree>
 8005f52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f56:	9f08      	ldr	r7, [sp, #32]
 8005f58:	ea43 0102 	orr.w	r1, r3, r2
 8005f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f5e:	4319      	orrs	r1, r3
 8005f60:	d110      	bne.n	8005f84 <_dtoa_r+0xa64>
 8005f62:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005f66:	d029      	beq.n	8005fbc <_dtoa_r+0xa9c>
 8005f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	dd02      	ble.n	8005f74 <_dtoa_r+0xa54>
 8005f6e:	9b06      	ldr	r3, [sp, #24]
 8005f70:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005f74:	9b04      	ldr	r3, [sp, #16]
 8005f76:	f883 9000 	strb.w	r9, [r3]
 8005f7a:	e777      	b.n	8005e6c <_dtoa_r+0x94c>
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	e7ba      	b.n	8005ef6 <_dtoa_r+0x9d6>
 8005f80:	2201      	movs	r2, #1
 8005f82:	e7e1      	b.n	8005f48 <_dtoa_r+0xa28>
 8005f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	db04      	blt.n	8005f94 <_dtoa_r+0xa74>
 8005f8a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005f8c:	430b      	orrs	r3, r1
 8005f8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f90:	430b      	orrs	r3, r1
 8005f92:	d120      	bne.n	8005fd6 <_dtoa_r+0xab6>
 8005f94:	2a00      	cmp	r2, #0
 8005f96:	dded      	ble.n	8005f74 <_dtoa_r+0xa54>
 8005f98:	4651      	mov	r1, sl
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	f000 fbf7 	bl	8006790 <__lshift>
 8005fa2:	4621      	mov	r1, r4
 8005fa4:	4682      	mov	sl, r0
 8005fa6:	f000 fc5f 	bl	8006868 <__mcmp>
 8005faa:	2800      	cmp	r0, #0
 8005fac:	dc03      	bgt.n	8005fb6 <_dtoa_r+0xa96>
 8005fae:	d1e1      	bne.n	8005f74 <_dtoa_r+0xa54>
 8005fb0:	f019 0f01 	tst.w	r9, #1
 8005fb4:	d0de      	beq.n	8005f74 <_dtoa_r+0xa54>
 8005fb6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005fba:	d1d8      	bne.n	8005f6e <_dtoa_r+0xa4e>
 8005fbc:	2339      	movs	r3, #57	; 0x39
 8005fbe:	9a04      	ldr	r2, [sp, #16]
 8005fc0:	7013      	strb	r3, [r2, #0]
 8005fc2:	463b      	mov	r3, r7
 8005fc4:	461f      	mov	r7, r3
 8005fc6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	2a39      	cmp	r2, #57	; 0x39
 8005fce:	d06b      	beq.n	80060a8 <_dtoa_r+0xb88>
 8005fd0:	3201      	adds	r2, #1
 8005fd2:	701a      	strb	r2, [r3, #0]
 8005fd4:	e74a      	b.n	8005e6c <_dtoa_r+0x94c>
 8005fd6:	2a00      	cmp	r2, #0
 8005fd8:	dd07      	ble.n	8005fea <_dtoa_r+0xaca>
 8005fda:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005fde:	d0ed      	beq.n	8005fbc <_dtoa_r+0xa9c>
 8005fe0:	9a04      	ldr	r2, [sp, #16]
 8005fe2:	f109 0301 	add.w	r3, r9, #1
 8005fe6:	7013      	strb	r3, [r2, #0]
 8005fe8:	e740      	b.n	8005e6c <_dtoa_r+0x94c>
 8005fea:	9b08      	ldr	r3, [sp, #32]
 8005fec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fee:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d042      	beq.n	800607c <_dtoa_r+0xb5c>
 8005ff6:	4651      	mov	r1, sl
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	220a      	movs	r2, #10
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	f000 f9d1 	bl	80063a4 <__multadd>
 8006002:	45b0      	cmp	r8, r6
 8006004:	4682      	mov	sl, r0
 8006006:	f04f 0300 	mov.w	r3, #0
 800600a:	f04f 020a 	mov.w	r2, #10
 800600e:	4641      	mov	r1, r8
 8006010:	4628      	mov	r0, r5
 8006012:	d107      	bne.n	8006024 <_dtoa_r+0xb04>
 8006014:	f000 f9c6 	bl	80063a4 <__multadd>
 8006018:	4680      	mov	r8, r0
 800601a:	4606      	mov	r6, r0
 800601c:	9b08      	ldr	r3, [sp, #32]
 800601e:	3301      	adds	r3, #1
 8006020:	9308      	str	r3, [sp, #32]
 8006022:	e775      	b.n	8005f10 <_dtoa_r+0x9f0>
 8006024:	f000 f9be 	bl	80063a4 <__multadd>
 8006028:	4631      	mov	r1, r6
 800602a:	4680      	mov	r8, r0
 800602c:	2300      	movs	r3, #0
 800602e:	220a      	movs	r2, #10
 8006030:	4628      	mov	r0, r5
 8006032:	f000 f9b7 	bl	80063a4 <__multadd>
 8006036:	4606      	mov	r6, r0
 8006038:	e7f0      	b.n	800601c <_dtoa_r+0xafc>
 800603a:	9b08      	ldr	r3, [sp, #32]
 800603c:	9306      	str	r3, [sp, #24]
 800603e:	9f03      	ldr	r7, [sp, #12]
 8006040:	4621      	mov	r1, r4
 8006042:	4650      	mov	r0, sl
 8006044:	f7ff f9e0 	bl	8005408 <quorem>
 8006048:	9b03      	ldr	r3, [sp, #12]
 800604a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800604e:	f807 9b01 	strb.w	r9, [r7], #1
 8006052:	1afa      	subs	r2, r7, r3
 8006054:	9b06      	ldr	r3, [sp, #24]
 8006056:	4293      	cmp	r3, r2
 8006058:	dd07      	ble.n	800606a <_dtoa_r+0xb4a>
 800605a:	4651      	mov	r1, sl
 800605c:	2300      	movs	r3, #0
 800605e:	220a      	movs	r2, #10
 8006060:	4628      	mov	r0, r5
 8006062:	f000 f99f 	bl	80063a4 <__multadd>
 8006066:	4682      	mov	sl, r0
 8006068:	e7ea      	b.n	8006040 <_dtoa_r+0xb20>
 800606a:	9b06      	ldr	r3, [sp, #24]
 800606c:	f04f 0800 	mov.w	r8, #0
 8006070:	2b00      	cmp	r3, #0
 8006072:	bfcc      	ite	gt
 8006074:	461f      	movgt	r7, r3
 8006076:	2701      	movle	r7, #1
 8006078:	9b03      	ldr	r3, [sp, #12]
 800607a:	441f      	add	r7, r3
 800607c:	4651      	mov	r1, sl
 800607e:	2201      	movs	r2, #1
 8006080:	4628      	mov	r0, r5
 8006082:	f000 fb85 	bl	8006790 <__lshift>
 8006086:	4621      	mov	r1, r4
 8006088:	4682      	mov	sl, r0
 800608a:	f000 fbed 	bl	8006868 <__mcmp>
 800608e:	2800      	cmp	r0, #0
 8006090:	dc97      	bgt.n	8005fc2 <_dtoa_r+0xaa2>
 8006092:	d102      	bne.n	800609a <_dtoa_r+0xb7a>
 8006094:	f019 0f01 	tst.w	r9, #1
 8006098:	d193      	bne.n	8005fc2 <_dtoa_r+0xaa2>
 800609a:	463b      	mov	r3, r7
 800609c:	461f      	mov	r7, r3
 800609e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060a2:	2a30      	cmp	r2, #48	; 0x30
 80060a4:	d0fa      	beq.n	800609c <_dtoa_r+0xb7c>
 80060a6:	e6e1      	b.n	8005e6c <_dtoa_r+0x94c>
 80060a8:	9a03      	ldr	r2, [sp, #12]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d18a      	bne.n	8005fc4 <_dtoa_r+0xaa4>
 80060ae:	2331      	movs	r3, #49	; 0x31
 80060b0:	f10b 0b01 	add.w	fp, fp, #1
 80060b4:	e797      	b.n	8005fe6 <_dtoa_r+0xac6>
 80060b6:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <_dtoa_r+0xbc0>)
 80060b8:	f7ff ba9f 	b.w	80055fa <_dtoa_r+0xda>
 80060bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f47f aa77 	bne.w	80055b2 <_dtoa_r+0x92>
 80060c4:	4b07      	ldr	r3, [pc, #28]	; (80060e4 <_dtoa_r+0xbc4>)
 80060c6:	f7ff ba98 	b.w	80055fa <_dtoa_r+0xda>
 80060ca:	9b06      	ldr	r3, [sp, #24]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	dcb6      	bgt.n	800603e <_dtoa_r+0xb1e>
 80060d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	f73f aeb5 	bgt.w	8005e42 <_dtoa_r+0x922>
 80060d8:	e7b1      	b.n	800603e <_dtoa_r+0xb1e>
 80060da:	bf00      	nop
 80060dc:	0800ad18 	.word	0x0800ad18
 80060e0:	0800ac73 	.word	0x0800ac73
 80060e4:	0800ac9c 	.word	0x0800ac9c

080060e8 <_free_r>:
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	4605      	mov	r5, r0
 80060ec:	2900      	cmp	r1, #0
 80060ee:	d040      	beq.n	8006172 <_free_r+0x8a>
 80060f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060f4:	1f0c      	subs	r4, r1, #4
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	bfb8      	it	lt
 80060fa:	18e4      	addlt	r4, r4, r3
 80060fc:	f000 f8e4 	bl	80062c8 <__malloc_lock>
 8006100:	4a1c      	ldr	r2, [pc, #112]	; (8006174 <_free_r+0x8c>)
 8006102:	6813      	ldr	r3, [r2, #0]
 8006104:	b933      	cbnz	r3, 8006114 <_free_r+0x2c>
 8006106:	6063      	str	r3, [r4, #4]
 8006108:	6014      	str	r4, [r2, #0]
 800610a:	4628      	mov	r0, r5
 800610c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006110:	f000 b8e0 	b.w	80062d4 <__malloc_unlock>
 8006114:	42a3      	cmp	r3, r4
 8006116:	d908      	bls.n	800612a <_free_r+0x42>
 8006118:	6820      	ldr	r0, [r4, #0]
 800611a:	1821      	adds	r1, r4, r0
 800611c:	428b      	cmp	r3, r1
 800611e:	bf01      	itttt	eq
 8006120:	6819      	ldreq	r1, [r3, #0]
 8006122:	685b      	ldreq	r3, [r3, #4]
 8006124:	1809      	addeq	r1, r1, r0
 8006126:	6021      	streq	r1, [r4, #0]
 8006128:	e7ed      	b.n	8006106 <_free_r+0x1e>
 800612a:	461a      	mov	r2, r3
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	b10b      	cbz	r3, 8006134 <_free_r+0x4c>
 8006130:	42a3      	cmp	r3, r4
 8006132:	d9fa      	bls.n	800612a <_free_r+0x42>
 8006134:	6811      	ldr	r1, [r2, #0]
 8006136:	1850      	adds	r0, r2, r1
 8006138:	42a0      	cmp	r0, r4
 800613a:	d10b      	bne.n	8006154 <_free_r+0x6c>
 800613c:	6820      	ldr	r0, [r4, #0]
 800613e:	4401      	add	r1, r0
 8006140:	1850      	adds	r0, r2, r1
 8006142:	4283      	cmp	r3, r0
 8006144:	6011      	str	r1, [r2, #0]
 8006146:	d1e0      	bne.n	800610a <_free_r+0x22>
 8006148:	6818      	ldr	r0, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	4408      	add	r0, r1
 800614e:	6010      	str	r0, [r2, #0]
 8006150:	6053      	str	r3, [r2, #4]
 8006152:	e7da      	b.n	800610a <_free_r+0x22>
 8006154:	d902      	bls.n	800615c <_free_r+0x74>
 8006156:	230c      	movs	r3, #12
 8006158:	602b      	str	r3, [r5, #0]
 800615a:	e7d6      	b.n	800610a <_free_r+0x22>
 800615c:	6820      	ldr	r0, [r4, #0]
 800615e:	1821      	adds	r1, r4, r0
 8006160:	428b      	cmp	r3, r1
 8006162:	bf01      	itttt	eq
 8006164:	6819      	ldreq	r1, [r3, #0]
 8006166:	685b      	ldreq	r3, [r3, #4]
 8006168:	1809      	addeq	r1, r1, r0
 800616a:	6021      	streq	r1, [r4, #0]
 800616c:	6063      	str	r3, [r4, #4]
 800616e:	6054      	str	r4, [r2, #4]
 8006170:	e7cb      	b.n	800610a <_free_r+0x22>
 8006172:	bd38      	pop	{r3, r4, r5, pc}
 8006174:	20000880 	.word	0x20000880

08006178 <malloc>:
 8006178:	4b02      	ldr	r3, [pc, #8]	; (8006184 <malloc+0xc>)
 800617a:	4601      	mov	r1, r0
 800617c:	6818      	ldr	r0, [r3, #0]
 800617e:	f000 b823 	b.w	80061c8 <_malloc_r>
 8006182:	bf00      	nop
 8006184:	20000074 	.word	0x20000074

08006188 <sbrk_aligned>:
 8006188:	b570      	push	{r4, r5, r6, lr}
 800618a:	4e0e      	ldr	r6, [pc, #56]	; (80061c4 <sbrk_aligned+0x3c>)
 800618c:	460c      	mov	r4, r1
 800618e:	6831      	ldr	r1, [r6, #0]
 8006190:	4605      	mov	r5, r0
 8006192:	b911      	cbnz	r1, 800619a <sbrk_aligned+0x12>
 8006194:	f001 fe0c 	bl	8007db0 <_sbrk_r>
 8006198:	6030      	str	r0, [r6, #0]
 800619a:	4621      	mov	r1, r4
 800619c:	4628      	mov	r0, r5
 800619e:	f001 fe07 	bl	8007db0 <_sbrk_r>
 80061a2:	1c43      	adds	r3, r0, #1
 80061a4:	d00a      	beq.n	80061bc <sbrk_aligned+0x34>
 80061a6:	1cc4      	adds	r4, r0, #3
 80061a8:	f024 0403 	bic.w	r4, r4, #3
 80061ac:	42a0      	cmp	r0, r4
 80061ae:	d007      	beq.n	80061c0 <sbrk_aligned+0x38>
 80061b0:	1a21      	subs	r1, r4, r0
 80061b2:	4628      	mov	r0, r5
 80061b4:	f001 fdfc 	bl	8007db0 <_sbrk_r>
 80061b8:	3001      	adds	r0, #1
 80061ba:	d101      	bne.n	80061c0 <sbrk_aligned+0x38>
 80061bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80061c0:	4620      	mov	r0, r4
 80061c2:	bd70      	pop	{r4, r5, r6, pc}
 80061c4:	20000884 	.word	0x20000884

080061c8 <_malloc_r>:
 80061c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061cc:	1ccd      	adds	r5, r1, #3
 80061ce:	f025 0503 	bic.w	r5, r5, #3
 80061d2:	3508      	adds	r5, #8
 80061d4:	2d0c      	cmp	r5, #12
 80061d6:	bf38      	it	cc
 80061d8:	250c      	movcc	r5, #12
 80061da:	2d00      	cmp	r5, #0
 80061dc:	4607      	mov	r7, r0
 80061de:	db01      	blt.n	80061e4 <_malloc_r+0x1c>
 80061e0:	42a9      	cmp	r1, r5
 80061e2:	d905      	bls.n	80061f0 <_malloc_r+0x28>
 80061e4:	230c      	movs	r3, #12
 80061e6:	2600      	movs	r6, #0
 80061e8:	603b      	str	r3, [r7, #0]
 80061ea:	4630      	mov	r0, r6
 80061ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80062c4 <_malloc_r+0xfc>
 80061f4:	f000 f868 	bl	80062c8 <__malloc_lock>
 80061f8:	f8d8 3000 	ldr.w	r3, [r8]
 80061fc:	461c      	mov	r4, r3
 80061fe:	bb5c      	cbnz	r4, 8006258 <_malloc_r+0x90>
 8006200:	4629      	mov	r1, r5
 8006202:	4638      	mov	r0, r7
 8006204:	f7ff ffc0 	bl	8006188 <sbrk_aligned>
 8006208:	1c43      	adds	r3, r0, #1
 800620a:	4604      	mov	r4, r0
 800620c:	d155      	bne.n	80062ba <_malloc_r+0xf2>
 800620e:	f8d8 4000 	ldr.w	r4, [r8]
 8006212:	4626      	mov	r6, r4
 8006214:	2e00      	cmp	r6, #0
 8006216:	d145      	bne.n	80062a4 <_malloc_r+0xdc>
 8006218:	2c00      	cmp	r4, #0
 800621a:	d048      	beq.n	80062ae <_malloc_r+0xe6>
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	4631      	mov	r1, r6
 8006220:	4638      	mov	r0, r7
 8006222:	eb04 0903 	add.w	r9, r4, r3
 8006226:	f001 fdc3 	bl	8007db0 <_sbrk_r>
 800622a:	4581      	cmp	r9, r0
 800622c:	d13f      	bne.n	80062ae <_malloc_r+0xe6>
 800622e:	6821      	ldr	r1, [r4, #0]
 8006230:	4638      	mov	r0, r7
 8006232:	1a6d      	subs	r5, r5, r1
 8006234:	4629      	mov	r1, r5
 8006236:	f7ff ffa7 	bl	8006188 <sbrk_aligned>
 800623a:	3001      	adds	r0, #1
 800623c:	d037      	beq.n	80062ae <_malloc_r+0xe6>
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	442b      	add	r3, r5
 8006242:	6023      	str	r3, [r4, #0]
 8006244:	f8d8 3000 	ldr.w	r3, [r8]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d038      	beq.n	80062be <_malloc_r+0xf6>
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	42a2      	cmp	r2, r4
 8006250:	d12b      	bne.n	80062aa <_malloc_r+0xe2>
 8006252:	2200      	movs	r2, #0
 8006254:	605a      	str	r2, [r3, #4]
 8006256:	e00f      	b.n	8006278 <_malloc_r+0xb0>
 8006258:	6822      	ldr	r2, [r4, #0]
 800625a:	1b52      	subs	r2, r2, r5
 800625c:	d41f      	bmi.n	800629e <_malloc_r+0xd6>
 800625e:	2a0b      	cmp	r2, #11
 8006260:	d917      	bls.n	8006292 <_malloc_r+0xca>
 8006262:	1961      	adds	r1, r4, r5
 8006264:	42a3      	cmp	r3, r4
 8006266:	6025      	str	r5, [r4, #0]
 8006268:	bf18      	it	ne
 800626a:	6059      	strne	r1, [r3, #4]
 800626c:	6863      	ldr	r3, [r4, #4]
 800626e:	bf08      	it	eq
 8006270:	f8c8 1000 	streq.w	r1, [r8]
 8006274:	5162      	str	r2, [r4, r5]
 8006276:	604b      	str	r3, [r1, #4]
 8006278:	4638      	mov	r0, r7
 800627a:	f104 060b 	add.w	r6, r4, #11
 800627e:	f000 f829 	bl	80062d4 <__malloc_unlock>
 8006282:	f026 0607 	bic.w	r6, r6, #7
 8006286:	1d23      	adds	r3, r4, #4
 8006288:	1af2      	subs	r2, r6, r3
 800628a:	d0ae      	beq.n	80061ea <_malloc_r+0x22>
 800628c:	1b9b      	subs	r3, r3, r6
 800628e:	50a3      	str	r3, [r4, r2]
 8006290:	e7ab      	b.n	80061ea <_malloc_r+0x22>
 8006292:	42a3      	cmp	r3, r4
 8006294:	6862      	ldr	r2, [r4, #4]
 8006296:	d1dd      	bne.n	8006254 <_malloc_r+0x8c>
 8006298:	f8c8 2000 	str.w	r2, [r8]
 800629c:	e7ec      	b.n	8006278 <_malloc_r+0xb0>
 800629e:	4623      	mov	r3, r4
 80062a0:	6864      	ldr	r4, [r4, #4]
 80062a2:	e7ac      	b.n	80061fe <_malloc_r+0x36>
 80062a4:	4634      	mov	r4, r6
 80062a6:	6876      	ldr	r6, [r6, #4]
 80062a8:	e7b4      	b.n	8006214 <_malloc_r+0x4c>
 80062aa:	4613      	mov	r3, r2
 80062ac:	e7cc      	b.n	8006248 <_malloc_r+0x80>
 80062ae:	230c      	movs	r3, #12
 80062b0:	4638      	mov	r0, r7
 80062b2:	603b      	str	r3, [r7, #0]
 80062b4:	f000 f80e 	bl	80062d4 <__malloc_unlock>
 80062b8:	e797      	b.n	80061ea <_malloc_r+0x22>
 80062ba:	6025      	str	r5, [r4, #0]
 80062bc:	e7dc      	b.n	8006278 <_malloc_r+0xb0>
 80062be:	605b      	str	r3, [r3, #4]
 80062c0:	deff      	udf	#255	; 0xff
 80062c2:	bf00      	nop
 80062c4:	20000880 	.word	0x20000880

080062c8 <__malloc_lock>:
 80062c8:	4801      	ldr	r0, [pc, #4]	; (80062d0 <__malloc_lock+0x8>)
 80062ca:	f7ff b889 	b.w	80053e0 <__retarget_lock_acquire_recursive>
 80062ce:	bf00      	nop
 80062d0:	2000087c 	.word	0x2000087c

080062d4 <__malloc_unlock>:
 80062d4:	4801      	ldr	r0, [pc, #4]	; (80062dc <__malloc_unlock+0x8>)
 80062d6:	f7ff b884 	b.w	80053e2 <__retarget_lock_release_recursive>
 80062da:	bf00      	nop
 80062dc:	2000087c 	.word	0x2000087c

080062e0 <_Balloc>:
 80062e0:	b570      	push	{r4, r5, r6, lr}
 80062e2:	69c6      	ldr	r6, [r0, #28]
 80062e4:	4604      	mov	r4, r0
 80062e6:	460d      	mov	r5, r1
 80062e8:	b976      	cbnz	r6, 8006308 <_Balloc+0x28>
 80062ea:	2010      	movs	r0, #16
 80062ec:	f7ff ff44 	bl	8006178 <malloc>
 80062f0:	4602      	mov	r2, r0
 80062f2:	61e0      	str	r0, [r4, #28]
 80062f4:	b920      	cbnz	r0, 8006300 <_Balloc+0x20>
 80062f6:	216b      	movs	r1, #107	; 0x6b
 80062f8:	4b17      	ldr	r3, [pc, #92]	; (8006358 <_Balloc+0x78>)
 80062fa:	4818      	ldr	r0, [pc, #96]	; (800635c <_Balloc+0x7c>)
 80062fc:	f001 fd7c 	bl	8007df8 <__assert_func>
 8006300:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006304:	6006      	str	r6, [r0, #0]
 8006306:	60c6      	str	r6, [r0, #12]
 8006308:	69e6      	ldr	r6, [r4, #28]
 800630a:	68f3      	ldr	r3, [r6, #12]
 800630c:	b183      	cbz	r3, 8006330 <_Balloc+0x50>
 800630e:	69e3      	ldr	r3, [r4, #28]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006316:	b9b8      	cbnz	r0, 8006348 <_Balloc+0x68>
 8006318:	2101      	movs	r1, #1
 800631a:	fa01 f605 	lsl.w	r6, r1, r5
 800631e:	1d72      	adds	r2, r6, #5
 8006320:	4620      	mov	r0, r4
 8006322:	0092      	lsls	r2, r2, #2
 8006324:	f001 fd86 	bl	8007e34 <_calloc_r>
 8006328:	b160      	cbz	r0, 8006344 <_Balloc+0x64>
 800632a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800632e:	e00e      	b.n	800634e <_Balloc+0x6e>
 8006330:	2221      	movs	r2, #33	; 0x21
 8006332:	2104      	movs	r1, #4
 8006334:	4620      	mov	r0, r4
 8006336:	f001 fd7d 	bl	8007e34 <_calloc_r>
 800633a:	69e3      	ldr	r3, [r4, #28]
 800633c:	60f0      	str	r0, [r6, #12]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1e4      	bne.n	800630e <_Balloc+0x2e>
 8006344:	2000      	movs	r0, #0
 8006346:	bd70      	pop	{r4, r5, r6, pc}
 8006348:	6802      	ldr	r2, [r0, #0]
 800634a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800634e:	2300      	movs	r3, #0
 8006350:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006354:	e7f7      	b.n	8006346 <_Balloc+0x66>
 8006356:	bf00      	nop
 8006358:	0800aca9 	.word	0x0800aca9
 800635c:	0800ad29 	.word	0x0800ad29

08006360 <_Bfree>:
 8006360:	b570      	push	{r4, r5, r6, lr}
 8006362:	69c6      	ldr	r6, [r0, #28]
 8006364:	4605      	mov	r5, r0
 8006366:	460c      	mov	r4, r1
 8006368:	b976      	cbnz	r6, 8006388 <_Bfree+0x28>
 800636a:	2010      	movs	r0, #16
 800636c:	f7ff ff04 	bl	8006178 <malloc>
 8006370:	4602      	mov	r2, r0
 8006372:	61e8      	str	r0, [r5, #28]
 8006374:	b920      	cbnz	r0, 8006380 <_Bfree+0x20>
 8006376:	218f      	movs	r1, #143	; 0x8f
 8006378:	4b08      	ldr	r3, [pc, #32]	; (800639c <_Bfree+0x3c>)
 800637a:	4809      	ldr	r0, [pc, #36]	; (80063a0 <_Bfree+0x40>)
 800637c:	f001 fd3c 	bl	8007df8 <__assert_func>
 8006380:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006384:	6006      	str	r6, [r0, #0]
 8006386:	60c6      	str	r6, [r0, #12]
 8006388:	b13c      	cbz	r4, 800639a <_Bfree+0x3a>
 800638a:	69eb      	ldr	r3, [r5, #28]
 800638c:	6862      	ldr	r2, [r4, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006394:	6021      	str	r1, [r4, #0]
 8006396:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800639a:	bd70      	pop	{r4, r5, r6, pc}
 800639c:	0800aca9 	.word	0x0800aca9
 80063a0:	0800ad29 	.word	0x0800ad29

080063a4 <__multadd>:
 80063a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063a8:	4607      	mov	r7, r0
 80063aa:	460c      	mov	r4, r1
 80063ac:	461e      	mov	r6, r3
 80063ae:	2000      	movs	r0, #0
 80063b0:	690d      	ldr	r5, [r1, #16]
 80063b2:	f101 0c14 	add.w	ip, r1, #20
 80063b6:	f8dc 3000 	ldr.w	r3, [ip]
 80063ba:	3001      	adds	r0, #1
 80063bc:	b299      	uxth	r1, r3
 80063be:	fb02 6101 	mla	r1, r2, r1, r6
 80063c2:	0c1e      	lsrs	r6, r3, #16
 80063c4:	0c0b      	lsrs	r3, r1, #16
 80063c6:	fb02 3306 	mla	r3, r2, r6, r3
 80063ca:	b289      	uxth	r1, r1
 80063cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80063d0:	4285      	cmp	r5, r0
 80063d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80063d6:	f84c 1b04 	str.w	r1, [ip], #4
 80063da:	dcec      	bgt.n	80063b6 <__multadd+0x12>
 80063dc:	b30e      	cbz	r6, 8006422 <__multadd+0x7e>
 80063de:	68a3      	ldr	r3, [r4, #8]
 80063e0:	42ab      	cmp	r3, r5
 80063e2:	dc19      	bgt.n	8006418 <__multadd+0x74>
 80063e4:	6861      	ldr	r1, [r4, #4]
 80063e6:	4638      	mov	r0, r7
 80063e8:	3101      	adds	r1, #1
 80063ea:	f7ff ff79 	bl	80062e0 <_Balloc>
 80063ee:	4680      	mov	r8, r0
 80063f0:	b928      	cbnz	r0, 80063fe <__multadd+0x5a>
 80063f2:	4602      	mov	r2, r0
 80063f4:	21ba      	movs	r1, #186	; 0xba
 80063f6:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <__multadd+0x84>)
 80063f8:	480c      	ldr	r0, [pc, #48]	; (800642c <__multadd+0x88>)
 80063fa:	f001 fcfd 	bl	8007df8 <__assert_func>
 80063fe:	6922      	ldr	r2, [r4, #16]
 8006400:	f104 010c 	add.w	r1, r4, #12
 8006404:	3202      	adds	r2, #2
 8006406:	0092      	lsls	r2, r2, #2
 8006408:	300c      	adds	r0, #12
 800640a:	f001 fce1 	bl	8007dd0 <memcpy>
 800640e:	4621      	mov	r1, r4
 8006410:	4638      	mov	r0, r7
 8006412:	f7ff ffa5 	bl	8006360 <_Bfree>
 8006416:	4644      	mov	r4, r8
 8006418:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800641c:	3501      	adds	r5, #1
 800641e:	615e      	str	r6, [r3, #20]
 8006420:	6125      	str	r5, [r4, #16]
 8006422:	4620      	mov	r0, r4
 8006424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006428:	0800ad18 	.word	0x0800ad18
 800642c:	0800ad29 	.word	0x0800ad29

08006430 <__s2b>:
 8006430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006434:	4615      	mov	r5, r2
 8006436:	2209      	movs	r2, #9
 8006438:	461f      	mov	r7, r3
 800643a:	3308      	adds	r3, #8
 800643c:	460c      	mov	r4, r1
 800643e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006442:	4606      	mov	r6, r0
 8006444:	2201      	movs	r2, #1
 8006446:	2100      	movs	r1, #0
 8006448:	429a      	cmp	r2, r3
 800644a:	db09      	blt.n	8006460 <__s2b+0x30>
 800644c:	4630      	mov	r0, r6
 800644e:	f7ff ff47 	bl	80062e0 <_Balloc>
 8006452:	b940      	cbnz	r0, 8006466 <__s2b+0x36>
 8006454:	4602      	mov	r2, r0
 8006456:	21d3      	movs	r1, #211	; 0xd3
 8006458:	4b18      	ldr	r3, [pc, #96]	; (80064bc <__s2b+0x8c>)
 800645a:	4819      	ldr	r0, [pc, #100]	; (80064c0 <__s2b+0x90>)
 800645c:	f001 fccc 	bl	8007df8 <__assert_func>
 8006460:	0052      	lsls	r2, r2, #1
 8006462:	3101      	adds	r1, #1
 8006464:	e7f0      	b.n	8006448 <__s2b+0x18>
 8006466:	9b08      	ldr	r3, [sp, #32]
 8006468:	2d09      	cmp	r5, #9
 800646a:	6143      	str	r3, [r0, #20]
 800646c:	f04f 0301 	mov.w	r3, #1
 8006470:	6103      	str	r3, [r0, #16]
 8006472:	dd16      	ble.n	80064a2 <__s2b+0x72>
 8006474:	f104 0909 	add.w	r9, r4, #9
 8006478:	46c8      	mov	r8, r9
 800647a:	442c      	add	r4, r5
 800647c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006480:	4601      	mov	r1, r0
 8006482:	220a      	movs	r2, #10
 8006484:	4630      	mov	r0, r6
 8006486:	3b30      	subs	r3, #48	; 0x30
 8006488:	f7ff ff8c 	bl	80063a4 <__multadd>
 800648c:	45a0      	cmp	r8, r4
 800648e:	d1f5      	bne.n	800647c <__s2b+0x4c>
 8006490:	f1a5 0408 	sub.w	r4, r5, #8
 8006494:	444c      	add	r4, r9
 8006496:	1b2d      	subs	r5, r5, r4
 8006498:	1963      	adds	r3, r4, r5
 800649a:	42bb      	cmp	r3, r7
 800649c:	db04      	blt.n	80064a8 <__s2b+0x78>
 800649e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064a2:	2509      	movs	r5, #9
 80064a4:	340a      	adds	r4, #10
 80064a6:	e7f6      	b.n	8006496 <__s2b+0x66>
 80064a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80064ac:	4601      	mov	r1, r0
 80064ae:	220a      	movs	r2, #10
 80064b0:	4630      	mov	r0, r6
 80064b2:	3b30      	subs	r3, #48	; 0x30
 80064b4:	f7ff ff76 	bl	80063a4 <__multadd>
 80064b8:	e7ee      	b.n	8006498 <__s2b+0x68>
 80064ba:	bf00      	nop
 80064bc:	0800ad18 	.word	0x0800ad18
 80064c0:	0800ad29 	.word	0x0800ad29

080064c4 <__hi0bits>:
 80064c4:	0c02      	lsrs	r2, r0, #16
 80064c6:	0412      	lsls	r2, r2, #16
 80064c8:	4603      	mov	r3, r0
 80064ca:	b9ca      	cbnz	r2, 8006500 <__hi0bits+0x3c>
 80064cc:	0403      	lsls	r3, r0, #16
 80064ce:	2010      	movs	r0, #16
 80064d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80064d4:	bf04      	itt	eq
 80064d6:	021b      	lsleq	r3, r3, #8
 80064d8:	3008      	addeq	r0, #8
 80064da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80064de:	bf04      	itt	eq
 80064e0:	011b      	lsleq	r3, r3, #4
 80064e2:	3004      	addeq	r0, #4
 80064e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80064e8:	bf04      	itt	eq
 80064ea:	009b      	lsleq	r3, r3, #2
 80064ec:	3002      	addeq	r0, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	db05      	blt.n	80064fe <__hi0bits+0x3a>
 80064f2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80064f6:	f100 0001 	add.w	r0, r0, #1
 80064fa:	bf08      	it	eq
 80064fc:	2020      	moveq	r0, #32
 80064fe:	4770      	bx	lr
 8006500:	2000      	movs	r0, #0
 8006502:	e7e5      	b.n	80064d0 <__hi0bits+0xc>

08006504 <__lo0bits>:
 8006504:	6803      	ldr	r3, [r0, #0]
 8006506:	4602      	mov	r2, r0
 8006508:	f013 0007 	ands.w	r0, r3, #7
 800650c:	d00b      	beq.n	8006526 <__lo0bits+0x22>
 800650e:	07d9      	lsls	r1, r3, #31
 8006510:	d421      	bmi.n	8006556 <__lo0bits+0x52>
 8006512:	0798      	lsls	r0, r3, #30
 8006514:	bf49      	itett	mi
 8006516:	085b      	lsrmi	r3, r3, #1
 8006518:	089b      	lsrpl	r3, r3, #2
 800651a:	2001      	movmi	r0, #1
 800651c:	6013      	strmi	r3, [r2, #0]
 800651e:	bf5c      	itt	pl
 8006520:	2002      	movpl	r0, #2
 8006522:	6013      	strpl	r3, [r2, #0]
 8006524:	4770      	bx	lr
 8006526:	b299      	uxth	r1, r3
 8006528:	b909      	cbnz	r1, 800652e <__lo0bits+0x2a>
 800652a:	2010      	movs	r0, #16
 800652c:	0c1b      	lsrs	r3, r3, #16
 800652e:	b2d9      	uxtb	r1, r3
 8006530:	b909      	cbnz	r1, 8006536 <__lo0bits+0x32>
 8006532:	3008      	adds	r0, #8
 8006534:	0a1b      	lsrs	r3, r3, #8
 8006536:	0719      	lsls	r1, r3, #28
 8006538:	bf04      	itt	eq
 800653a:	091b      	lsreq	r3, r3, #4
 800653c:	3004      	addeq	r0, #4
 800653e:	0799      	lsls	r1, r3, #30
 8006540:	bf04      	itt	eq
 8006542:	089b      	lsreq	r3, r3, #2
 8006544:	3002      	addeq	r0, #2
 8006546:	07d9      	lsls	r1, r3, #31
 8006548:	d403      	bmi.n	8006552 <__lo0bits+0x4e>
 800654a:	085b      	lsrs	r3, r3, #1
 800654c:	f100 0001 	add.w	r0, r0, #1
 8006550:	d003      	beq.n	800655a <__lo0bits+0x56>
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	4770      	bx	lr
 8006556:	2000      	movs	r0, #0
 8006558:	4770      	bx	lr
 800655a:	2020      	movs	r0, #32
 800655c:	4770      	bx	lr
	...

08006560 <__i2b>:
 8006560:	b510      	push	{r4, lr}
 8006562:	460c      	mov	r4, r1
 8006564:	2101      	movs	r1, #1
 8006566:	f7ff febb 	bl	80062e0 <_Balloc>
 800656a:	4602      	mov	r2, r0
 800656c:	b928      	cbnz	r0, 800657a <__i2b+0x1a>
 800656e:	f240 1145 	movw	r1, #325	; 0x145
 8006572:	4b04      	ldr	r3, [pc, #16]	; (8006584 <__i2b+0x24>)
 8006574:	4804      	ldr	r0, [pc, #16]	; (8006588 <__i2b+0x28>)
 8006576:	f001 fc3f 	bl	8007df8 <__assert_func>
 800657a:	2301      	movs	r3, #1
 800657c:	6144      	str	r4, [r0, #20]
 800657e:	6103      	str	r3, [r0, #16]
 8006580:	bd10      	pop	{r4, pc}
 8006582:	bf00      	nop
 8006584:	0800ad18 	.word	0x0800ad18
 8006588:	0800ad29 	.word	0x0800ad29

0800658c <__multiply>:
 800658c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006590:	4691      	mov	r9, r2
 8006592:	690a      	ldr	r2, [r1, #16]
 8006594:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006598:	460c      	mov	r4, r1
 800659a:	429a      	cmp	r2, r3
 800659c:	bfbe      	ittt	lt
 800659e:	460b      	movlt	r3, r1
 80065a0:	464c      	movlt	r4, r9
 80065a2:	4699      	movlt	r9, r3
 80065a4:	6927      	ldr	r7, [r4, #16]
 80065a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80065aa:	68a3      	ldr	r3, [r4, #8]
 80065ac:	6861      	ldr	r1, [r4, #4]
 80065ae:	eb07 060a 	add.w	r6, r7, sl
 80065b2:	42b3      	cmp	r3, r6
 80065b4:	b085      	sub	sp, #20
 80065b6:	bfb8      	it	lt
 80065b8:	3101      	addlt	r1, #1
 80065ba:	f7ff fe91 	bl	80062e0 <_Balloc>
 80065be:	b930      	cbnz	r0, 80065ce <__multiply+0x42>
 80065c0:	4602      	mov	r2, r0
 80065c2:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80065c6:	4b43      	ldr	r3, [pc, #268]	; (80066d4 <__multiply+0x148>)
 80065c8:	4843      	ldr	r0, [pc, #268]	; (80066d8 <__multiply+0x14c>)
 80065ca:	f001 fc15 	bl	8007df8 <__assert_func>
 80065ce:	f100 0514 	add.w	r5, r0, #20
 80065d2:	462b      	mov	r3, r5
 80065d4:	2200      	movs	r2, #0
 80065d6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80065da:	4543      	cmp	r3, r8
 80065dc:	d321      	bcc.n	8006622 <__multiply+0x96>
 80065de:	f104 0314 	add.w	r3, r4, #20
 80065e2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80065e6:	f109 0314 	add.w	r3, r9, #20
 80065ea:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80065ee:	9202      	str	r2, [sp, #8]
 80065f0:	1b3a      	subs	r2, r7, r4
 80065f2:	3a15      	subs	r2, #21
 80065f4:	f022 0203 	bic.w	r2, r2, #3
 80065f8:	3204      	adds	r2, #4
 80065fa:	f104 0115 	add.w	r1, r4, #21
 80065fe:	428f      	cmp	r7, r1
 8006600:	bf38      	it	cc
 8006602:	2204      	movcc	r2, #4
 8006604:	9201      	str	r2, [sp, #4]
 8006606:	9a02      	ldr	r2, [sp, #8]
 8006608:	9303      	str	r3, [sp, #12]
 800660a:	429a      	cmp	r2, r3
 800660c:	d80c      	bhi.n	8006628 <__multiply+0x9c>
 800660e:	2e00      	cmp	r6, #0
 8006610:	dd03      	ble.n	800661a <__multiply+0x8e>
 8006612:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006616:	2b00      	cmp	r3, #0
 8006618:	d05a      	beq.n	80066d0 <__multiply+0x144>
 800661a:	6106      	str	r6, [r0, #16]
 800661c:	b005      	add	sp, #20
 800661e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006622:	f843 2b04 	str.w	r2, [r3], #4
 8006626:	e7d8      	b.n	80065da <__multiply+0x4e>
 8006628:	f8b3 a000 	ldrh.w	sl, [r3]
 800662c:	f1ba 0f00 	cmp.w	sl, #0
 8006630:	d023      	beq.n	800667a <__multiply+0xee>
 8006632:	46a9      	mov	r9, r5
 8006634:	f04f 0c00 	mov.w	ip, #0
 8006638:	f104 0e14 	add.w	lr, r4, #20
 800663c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006640:	f8d9 1000 	ldr.w	r1, [r9]
 8006644:	fa1f fb82 	uxth.w	fp, r2
 8006648:	b289      	uxth	r1, r1
 800664a:	fb0a 110b 	mla	r1, sl, fp, r1
 800664e:	4461      	add	r1, ip
 8006650:	f8d9 c000 	ldr.w	ip, [r9]
 8006654:	0c12      	lsrs	r2, r2, #16
 8006656:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800665a:	fb0a c202 	mla	r2, sl, r2, ip
 800665e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006662:	b289      	uxth	r1, r1
 8006664:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006668:	4577      	cmp	r7, lr
 800666a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800666e:	f849 1b04 	str.w	r1, [r9], #4
 8006672:	d8e3      	bhi.n	800663c <__multiply+0xb0>
 8006674:	9a01      	ldr	r2, [sp, #4]
 8006676:	f845 c002 	str.w	ip, [r5, r2]
 800667a:	9a03      	ldr	r2, [sp, #12]
 800667c:	3304      	adds	r3, #4
 800667e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006682:	f1b9 0f00 	cmp.w	r9, #0
 8006686:	d021      	beq.n	80066cc <__multiply+0x140>
 8006688:	46ae      	mov	lr, r5
 800668a:	f04f 0a00 	mov.w	sl, #0
 800668e:	6829      	ldr	r1, [r5, #0]
 8006690:	f104 0c14 	add.w	ip, r4, #20
 8006694:	f8bc b000 	ldrh.w	fp, [ip]
 8006698:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800669c:	b289      	uxth	r1, r1
 800669e:	fb09 220b 	mla	r2, r9, fp, r2
 80066a2:	4452      	add	r2, sl
 80066a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80066a8:	f84e 1b04 	str.w	r1, [lr], #4
 80066ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 80066b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80066b4:	f8be 1000 	ldrh.w	r1, [lr]
 80066b8:	4567      	cmp	r7, ip
 80066ba:	fb09 110a 	mla	r1, r9, sl, r1
 80066be:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80066c2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80066c6:	d8e5      	bhi.n	8006694 <__multiply+0x108>
 80066c8:	9a01      	ldr	r2, [sp, #4]
 80066ca:	50a9      	str	r1, [r5, r2]
 80066cc:	3504      	adds	r5, #4
 80066ce:	e79a      	b.n	8006606 <__multiply+0x7a>
 80066d0:	3e01      	subs	r6, #1
 80066d2:	e79c      	b.n	800660e <__multiply+0x82>
 80066d4:	0800ad18 	.word	0x0800ad18
 80066d8:	0800ad29 	.word	0x0800ad29

080066dc <__pow5mult>:
 80066dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066e0:	4615      	mov	r5, r2
 80066e2:	f012 0203 	ands.w	r2, r2, #3
 80066e6:	4606      	mov	r6, r0
 80066e8:	460f      	mov	r7, r1
 80066ea:	d007      	beq.n	80066fc <__pow5mult+0x20>
 80066ec:	4c25      	ldr	r4, [pc, #148]	; (8006784 <__pow5mult+0xa8>)
 80066ee:	3a01      	subs	r2, #1
 80066f0:	2300      	movs	r3, #0
 80066f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066f6:	f7ff fe55 	bl	80063a4 <__multadd>
 80066fa:	4607      	mov	r7, r0
 80066fc:	10ad      	asrs	r5, r5, #2
 80066fe:	d03d      	beq.n	800677c <__pow5mult+0xa0>
 8006700:	69f4      	ldr	r4, [r6, #28]
 8006702:	b97c      	cbnz	r4, 8006724 <__pow5mult+0x48>
 8006704:	2010      	movs	r0, #16
 8006706:	f7ff fd37 	bl	8006178 <malloc>
 800670a:	4602      	mov	r2, r0
 800670c:	61f0      	str	r0, [r6, #28]
 800670e:	b928      	cbnz	r0, 800671c <__pow5mult+0x40>
 8006710:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006714:	4b1c      	ldr	r3, [pc, #112]	; (8006788 <__pow5mult+0xac>)
 8006716:	481d      	ldr	r0, [pc, #116]	; (800678c <__pow5mult+0xb0>)
 8006718:	f001 fb6e 	bl	8007df8 <__assert_func>
 800671c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006720:	6004      	str	r4, [r0, #0]
 8006722:	60c4      	str	r4, [r0, #12]
 8006724:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006728:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800672c:	b94c      	cbnz	r4, 8006742 <__pow5mult+0x66>
 800672e:	f240 2171 	movw	r1, #625	; 0x271
 8006732:	4630      	mov	r0, r6
 8006734:	f7ff ff14 	bl	8006560 <__i2b>
 8006738:	2300      	movs	r3, #0
 800673a:	4604      	mov	r4, r0
 800673c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006740:	6003      	str	r3, [r0, #0]
 8006742:	f04f 0900 	mov.w	r9, #0
 8006746:	07eb      	lsls	r3, r5, #31
 8006748:	d50a      	bpl.n	8006760 <__pow5mult+0x84>
 800674a:	4639      	mov	r1, r7
 800674c:	4622      	mov	r2, r4
 800674e:	4630      	mov	r0, r6
 8006750:	f7ff ff1c 	bl	800658c <__multiply>
 8006754:	4680      	mov	r8, r0
 8006756:	4639      	mov	r1, r7
 8006758:	4630      	mov	r0, r6
 800675a:	f7ff fe01 	bl	8006360 <_Bfree>
 800675e:	4647      	mov	r7, r8
 8006760:	106d      	asrs	r5, r5, #1
 8006762:	d00b      	beq.n	800677c <__pow5mult+0xa0>
 8006764:	6820      	ldr	r0, [r4, #0]
 8006766:	b938      	cbnz	r0, 8006778 <__pow5mult+0x9c>
 8006768:	4622      	mov	r2, r4
 800676a:	4621      	mov	r1, r4
 800676c:	4630      	mov	r0, r6
 800676e:	f7ff ff0d 	bl	800658c <__multiply>
 8006772:	6020      	str	r0, [r4, #0]
 8006774:	f8c0 9000 	str.w	r9, [r0]
 8006778:	4604      	mov	r4, r0
 800677a:	e7e4      	b.n	8006746 <__pow5mult+0x6a>
 800677c:	4638      	mov	r0, r7
 800677e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006782:	bf00      	nop
 8006784:	0800ae78 	.word	0x0800ae78
 8006788:	0800aca9 	.word	0x0800aca9
 800678c:	0800ad29 	.word	0x0800ad29

08006790 <__lshift>:
 8006790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006794:	460c      	mov	r4, r1
 8006796:	4607      	mov	r7, r0
 8006798:	4691      	mov	r9, r2
 800679a:	6923      	ldr	r3, [r4, #16]
 800679c:	6849      	ldr	r1, [r1, #4]
 800679e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067a2:	68a3      	ldr	r3, [r4, #8]
 80067a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067a8:	f108 0601 	add.w	r6, r8, #1
 80067ac:	42b3      	cmp	r3, r6
 80067ae:	db0b      	blt.n	80067c8 <__lshift+0x38>
 80067b0:	4638      	mov	r0, r7
 80067b2:	f7ff fd95 	bl	80062e0 <_Balloc>
 80067b6:	4605      	mov	r5, r0
 80067b8:	b948      	cbnz	r0, 80067ce <__lshift+0x3e>
 80067ba:	4602      	mov	r2, r0
 80067bc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80067c0:	4b27      	ldr	r3, [pc, #156]	; (8006860 <__lshift+0xd0>)
 80067c2:	4828      	ldr	r0, [pc, #160]	; (8006864 <__lshift+0xd4>)
 80067c4:	f001 fb18 	bl	8007df8 <__assert_func>
 80067c8:	3101      	adds	r1, #1
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	e7ee      	b.n	80067ac <__lshift+0x1c>
 80067ce:	2300      	movs	r3, #0
 80067d0:	f100 0114 	add.w	r1, r0, #20
 80067d4:	f100 0210 	add.w	r2, r0, #16
 80067d8:	4618      	mov	r0, r3
 80067da:	4553      	cmp	r3, sl
 80067dc:	db33      	blt.n	8006846 <__lshift+0xb6>
 80067de:	6920      	ldr	r0, [r4, #16]
 80067e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067e4:	f104 0314 	add.w	r3, r4, #20
 80067e8:	f019 091f 	ands.w	r9, r9, #31
 80067ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80067f4:	d02b      	beq.n	800684e <__lshift+0xbe>
 80067f6:	468a      	mov	sl, r1
 80067f8:	2200      	movs	r2, #0
 80067fa:	f1c9 0e20 	rsb	lr, r9, #32
 80067fe:	6818      	ldr	r0, [r3, #0]
 8006800:	fa00 f009 	lsl.w	r0, r0, r9
 8006804:	4310      	orrs	r0, r2
 8006806:	f84a 0b04 	str.w	r0, [sl], #4
 800680a:	f853 2b04 	ldr.w	r2, [r3], #4
 800680e:	459c      	cmp	ip, r3
 8006810:	fa22 f20e 	lsr.w	r2, r2, lr
 8006814:	d8f3      	bhi.n	80067fe <__lshift+0x6e>
 8006816:	ebac 0304 	sub.w	r3, ip, r4
 800681a:	3b15      	subs	r3, #21
 800681c:	f023 0303 	bic.w	r3, r3, #3
 8006820:	3304      	adds	r3, #4
 8006822:	f104 0015 	add.w	r0, r4, #21
 8006826:	4584      	cmp	ip, r0
 8006828:	bf38      	it	cc
 800682a:	2304      	movcc	r3, #4
 800682c:	50ca      	str	r2, [r1, r3]
 800682e:	b10a      	cbz	r2, 8006834 <__lshift+0xa4>
 8006830:	f108 0602 	add.w	r6, r8, #2
 8006834:	3e01      	subs	r6, #1
 8006836:	4638      	mov	r0, r7
 8006838:	4621      	mov	r1, r4
 800683a:	612e      	str	r6, [r5, #16]
 800683c:	f7ff fd90 	bl	8006360 <_Bfree>
 8006840:	4628      	mov	r0, r5
 8006842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006846:	f842 0f04 	str.w	r0, [r2, #4]!
 800684a:	3301      	adds	r3, #1
 800684c:	e7c5      	b.n	80067da <__lshift+0x4a>
 800684e:	3904      	subs	r1, #4
 8006850:	f853 2b04 	ldr.w	r2, [r3], #4
 8006854:	459c      	cmp	ip, r3
 8006856:	f841 2f04 	str.w	r2, [r1, #4]!
 800685a:	d8f9      	bhi.n	8006850 <__lshift+0xc0>
 800685c:	e7ea      	b.n	8006834 <__lshift+0xa4>
 800685e:	bf00      	nop
 8006860:	0800ad18 	.word	0x0800ad18
 8006864:	0800ad29 	.word	0x0800ad29

08006868 <__mcmp>:
 8006868:	4603      	mov	r3, r0
 800686a:	690a      	ldr	r2, [r1, #16]
 800686c:	6900      	ldr	r0, [r0, #16]
 800686e:	b530      	push	{r4, r5, lr}
 8006870:	1a80      	subs	r0, r0, r2
 8006872:	d10d      	bne.n	8006890 <__mcmp+0x28>
 8006874:	3314      	adds	r3, #20
 8006876:	3114      	adds	r1, #20
 8006878:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800687c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006880:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006884:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006888:	4295      	cmp	r5, r2
 800688a:	d002      	beq.n	8006892 <__mcmp+0x2a>
 800688c:	d304      	bcc.n	8006898 <__mcmp+0x30>
 800688e:	2001      	movs	r0, #1
 8006890:	bd30      	pop	{r4, r5, pc}
 8006892:	42a3      	cmp	r3, r4
 8006894:	d3f4      	bcc.n	8006880 <__mcmp+0x18>
 8006896:	e7fb      	b.n	8006890 <__mcmp+0x28>
 8006898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800689c:	e7f8      	b.n	8006890 <__mcmp+0x28>
	...

080068a0 <__mdiff>:
 80068a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a4:	460d      	mov	r5, r1
 80068a6:	4607      	mov	r7, r0
 80068a8:	4611      	mov	r1, r2
 80068aa:	4628      	mov	r0, r5
 80068ac:	4614      	mov	r4, r2
 80068ae:	f7ff ffdb 	bl	8006868 <__mcmp>
 80068b2:	1e06      	subs	r6, r0, #0
 80068b4:	d111      	bne.n	80068da <__mdiff+0x3a>
 80068b6:	4631      	mov	r1, r6
 80068b8:	4638      	mov	r0, r7
 80068ba:	f7ff fd11 	bl	80062e0 <_Balloc>
 80068be:	4602      	mov	r2, r0
 80068c0:	b928      	cbnz	r0, 80068ce <__mdiff+0x2e>
 80068c2:	f240 2137 	movw	r1, #567	; 0x237
 80068c6:	4b3a      	ldr	r3, [pc, #232]	; (80069b0 <__mdiff+0x110>)
 80068c8:	483a      	ldr	r0, [pc, #232]	; (80069b4 <__mdiff+0x114>)
 80068ca:	f001 fa95 	bl	8007df8 <__assert_func>
 80068ce:	2301      	movs	r3, #1
 80068d0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80068d4:	4610      	mov	r0, r2
 80068d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068da:	bfa4      	itt	ge
 80068dc:	4623      	movge	r3, r4
 80068de:	462c      	movge	r4, r5
 80068e0:	4638      	mov	r0, r7
 80068e2:	6861      	ldr	r1, [r4, #4]
 80068e4:	bfa6      	itte	ge
 80068e6:	461d      	movge	r5, r3
 80068e8:	2600      	movge	r6, #0
 80068ea:	2601      	movlt	r6, #1
 80068ec:	f7ff fcf8 	bl	80062e0 <_Balloc>
 80068f0:	4602      	mov	r2, r0
 80068f2:	b918      	cbnz	r0, 80068fc <__mdiff+0x5c>
 80068f4:	f240 2145 	movw	r1, #581	; 0x245
 80068f8:	4b2d      	ldr	r3, [pc, #180]	; (80069b0 <__mdiff+0x110>)
 80068fa:	e7e5      	b.n	80068c8 <__mdiff+0x28>
 80068fc:	f102 0814 	add.w	r8, r2, #20
 8006900:	46c2      	mov	sl, r8
 8006902:	f04f 0c00 	mov.w	ip, #0
 8006906:	6927      	ldr	r7, [r4, #16]
 8006908:	60c6      	str	r6, [r0, #12]
 800690a:	692e      	ldr	r6, [r5, #16]
 800690c:	f104 0014 	add.w	r0, r4, #20
 8006910:	f105 0914 	add.w	r9, r5, #20
 8006914:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006918:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800691c:	3410      	adds	r4, #16
 800691e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006922:	f859 3b04 	ldr.w	r3, [r9], #4
 8006926:	fa1f f18b 	uxth.w	r1, fp
 800692a:	4461      	add	r1, ip
 800692c:	fa1f fc83 	uxth.w	ip, r3
 8006930:	0c1b      	lsrs	r3, r3, #16
 8006932:	eba1 010c 	sub.w	r1, r1, ip
 8006936:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800693a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800693e:	b289      	uxth	r1, r1
 8006940:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006944:	454e      	cmp	r6, r9
 8006946:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800694a:	f84a 1b04 	str.w	r1, [sl], #4
 800694e:	d8e6      	bhi.n	800691e <__mdiff+0x7e>
 8006950:	1b73      	subs	r3, r6, r5
 8006952:	3b15      	subs	r3, #21
 8006954:	f023 0303 	bic.w	r3, r3, #3
 8006958:	3515      	adds	r5, #21
 800695a:	3304      	adds	r3, #4
 800695c:	42ae      	cmp	r6, r5
 800695e:	bf38      	it	cc
 8006960:	2304      	movcc	r3, #4
 8006962:	4418      	add	r0, r3
 8006964:	4443      	add	r3, r8
 8006966:	461e      	mov	r6, r3
 8006968:	4605      	mov	r5, r0
 800696a:	4575      	cmp	r5, lr
 800696c:	d30e      	bcc.n	800698c <__mdiff+0xec>
 800696e:	f10e 0103 	add.w	r1, lr, #3
 8006972:	1a09      	subs	r1, r1, r0
 8006974:	f021 0103 	bic.w	r1, r1, #3
 8006978:	3803      	subs	r0, #3
 800697a:	4586      	cmp	lr, r0
 800697c:	bf38      	it	cc
 800697e:	2100      	movcc	r1, #0
 8006980:	440b      	add	r3, r1
 8006982:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006986:	b189      	cbz	r1, 80069ac <__mdiff+0x10c>
 8006988:	6117      	str	r7, [r2, #16]
 800698a:	e7a3      	b.n	80068d4 <__mdiff+0x34>
 800698c:	f855 8b04 	ldr.w	r8, [r5], #4
 8006990:	fa1f f188 	uxth.w	r1, r8
 8006994:	4461      	add	r1, ip
 8006996:	140c      	asrs	r4, r1, #16
 8006998:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800699c:	b289      	uxth	r1, r1
 800699e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80069a2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80069a6:	f846 1b04 	str.w	r1, [r6], #4
 80069aa:	e7de      	b.n	800696a <__mdiff+0xca>
 80069ac:	3f01      	subs	r7, #1
 80069ae:	e7e8      	b.n	8006982 <__mdiff+0xe2>
 80069b0:	0800ad18 	.word	0x0800ad18
 80069b4:	0800ad29 	.word	0x0800ad29

080069b8 <__ulp>:
 80069b8:	4b0e      	ldr	r3, [pc, #56]	; (80069f4 <__ulp+0x3c>)
 80069ba:	400b      	ands	r3, r1
 80069bc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	dc08      	bgt.n	80069d6 <__ulp+0x1e>
 80069c4:	425b      	negs	r3, r3
 80069c6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80069ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 80069ce:	da04      	bge.n	80069da <__ulp+0x22>
 80069d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80069d4:	4113      	asrs	r3, r2
 80069d6:	2200      	movs	r2, #0
 80069d8:	e008      	b.n	80069ec <__ulp+0x34>
 80069da:	f1a2 0314 	sub.w	r3, r2, #20
 80069de:	2b1e      	cmp	r3, #30
 80069e0:	bfd6      	itet	le
 80069e2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80069e6:	2201      	movgt	r2, #1
 80069e8:	40da      	lsrle	r2, r3
 80069ea:	2300      	movs	r3, #0
 80069ec:	4619      	mov	r1, r3
 80069ee:	4610      	mov	r0, r2
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	7ff00000 	.word	0x7ff00000

080069f8 <__b2d>:
 80069f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fa:	6905      	ldr	r5, [r0, #16]
 80069fc:	f100 0714 	add.w	r7, r0, #20
 8006a00:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006a04:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006a08:	1f2e      	subs	r6, r5, #4
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f7ff fd5a 	bl	80064c4 <__hi0bits>
 8006a10:	f1c0 0220 	rsb	r2, r0, #32
 8006a14:	280a      	cmp	r0, #10
 8006a16:	4603      	mov	r3, r0
 8006a18:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006a84 <__b2d+0x8c>
 8006a1c:	600a      	str	r2, [r1, #0]
 8006a1e:	dc12      	bgt.n	8006a46 <__b2d+0x4e>
 8006a20:	f1c0 0e0b 	rsb	lr, r0, #11
 8006a24:	fa24 f20e 	lsr.w	r2, r4, lr
 8006a28:	42b7      	cmp	r7, r6
 8006a2a:	ea42 010c 	orr.w	r1, r2, ip
 8006a2e:	bf2c      	ite	cs
 8006a30:	2200      	movcs	r2, #0
 8006a32:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006a36:	3315      	adds	r3, #21
 8006a38:	fa04 f303 	lsl.w	r3, r4, r3
 8006a3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a40:	431a      	orrs	r2, r3
 8006a42:	4610      	mov	r0, r2
 8006a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a46:	42b7      	cmp	r7, r6
 8006a48:	bf2e      	itee	cs
 8006a4a:	2200      	movcs	r2, #0
 8006a4c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006a50:	f1a5 0608 	subcc.w	r6, r5, #8
 8006a54:	3b0b      	subs	r3, #11
 8006a56:	d012      	beq.n	8006a7e <__b2d+0x86>
 8006a58:	f1c3 0520 	rsb	r5, r3, #32
 8006a5c:	fa22 f105 	lsr.w	r1, r2, r5
 8006a60:	409c      	lsls	r4, r3
 8006a62:	430c      	orrs	r4, r1
 8006a64:	42be      	cmp	r6, r7
 8006a66:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8006a6a:	bf94      	ite	ls
 8006a6c:	2400      	movls	r4, #0
 8006a6e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006a72:	409a      	lsls	r2, r3
 8006a74:	40ec      	lsrs	r4, r5
 8006a76:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006a7a:	4322      	orrs	r2, r4
 8006a7c:	e7e1      	b.n	8006a42 <__b2d+0x4a>
 8006a7e:	ea44 010c 	orr.w	r1, r4, ip
 8006a82:	e7de      	b.n	8006a42 <__b2d+0x4a>
 8006a84:	3ff00000 	.word	0x3ff00000

08006a88 <__d2b>:
 8006a88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	4617      	mov	r7, r2
 8006a8e:	461c      	mov	r4, r3
 8006a90:	9e08      	ldr	r6, [sp, #32]
 8006a92:	f7ff fc25 	bl	80062e0 <_Balloc>
 8006a96:	4605      	mov	r5, r0
 8006a98:	b930      	cbnz	r0, 8006aa8 <__d2b+0x20>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	f240 310f 	movw	r1, #783	; 0x30f
 8006aa0:	4b22      	ldr	r3, [pc, #136]	; (8006b2c <__d2b+0xa4>)
 8006aa2:	4823      	ldr	r0, [pc, #140]	; (8006b30 <__d2b+0xa8>)
 8006aa4:	f001 f9a8 	bl	8007df8 <__assert_func>
 8006aa8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006aac:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006ab0:	bb24      	cbnz	r4, 8006afc <__d2b+0x74>
 8006ab2:	2f00      	cmp	r7, #0
 8006ab4:	9301      	str	r3, [sp, #4]
 8006ab6:	d026      	beq.n	8006b06 <__d2b+0x7e>
 8006ab8:	4668      	mov	r0, sp
 8006aba:	9700      	str	r7, [sp, #0]
 8006abc:	f7ff fd22 	bl	8006504 <__lo0bits>
 8006ac0:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ac4:	b1e8      	cbz	r0, 8006b02 <__d2b+0x7a>
 8006ac6:	f1c0 0320 	rsb	r3, r0, #32
 8006aca:	fa02 f303 	lsl.w	r3, r2, r3
 8006ace:	430b      	orrs	r3, r1
 8006ad0:	40c2      	lsrs	r2, r0
 8006ad2:	616b      	str	r3, [r5, #20]
 8006ad4:	9201      	str	r2, [sp, #4]
 8006ad6:	9b01      	ldr	r3, [sp, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	bf14      	ite	ne
 8006adc:	2102      	movne	r1, #2
 8006ade:	2101      	moveq	r1, #1
 8006ae0:	61ab      	str	r3, [r5, #24]
 8006ae2:	6129      	str	r1, [r5, #16]
 8006ae4:	b1bc      	cbz	r4, 8006b16 <__d2b+0x8e>
 8006ae6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006aea:	4404      	add	r4, r0
 8006aec:	6034      	str	r4, [r6, #0]
 8006aee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af4:	6018      	str	r0, [r3, #0]
 8006af6:	4628      	mov	r0, r5
 8006af8:	b003      	add	sp, #12
 8006afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b00:	e7d7      	b.n	8006ab2 <__d2b+0x2a>
 8006b02:	6169      	str	r1, [r5, #20]
 8006b04:	e7e7      	b.n	8006ad6 <__d2b+0x4e>
 8006b06:	a801      	add	r0, sp, #4
 8006b08:	f7ff fcfc 	bl	8006504 <__lo0bits>
 8006b0c:	9b01      	ldr	r3, [sp, #4]
 8006b0e:	2101      	movs	r1, #1
 8006b10:	616b      	str	r3, [r5, #20]
 8006b12:	3020      	adds	r0, #32
 8006b14:	e7e5      	b.n	8006ae2 <__d2b+0x5a>
 8006b16:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b1a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006b1e:	6030      	str	r0, [r6, #0]
 8006b20:	6918      	ldr	r0, [r3, #16]
 8006b22:	f7ff fccf 	bl	80064c4 <__hi0bits>
 8006b26:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006b2a:	e7e2      	b.n	8006af2 <__d2b+0x6a>
 8006b2c:	0800ad18 	.word	0x0800ad18
 8006b30:	0800ad29 	.word	0x0800ad29

08006b34 <__ratio>:
 8006b34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b38:	4688      	mov	r8, r1
 8006b3a:	4669      	mov	r1, sp
 8006b3c:	4681      	mov	r9, r0
 8006b3e:	f7ff ff5b 	bl	80069f8 <__b2d>
 8006b42:	460f      	mov	r7, r1
 8006b44:	4604      	mov	r4, r0
 8006b46:	460d      	mov	r5, r1
 8006b48:	4640      	mov	r0, r8
 8006b4a:	a901      	add	r1, sp, #4
 8006b4c:	f7ff ff54 	bl	80069f8 <__b2d>
 8006b50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b54:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006b58:	468b      	mov	fp, r1
 8006b5a:	eba3 0c02 	sub.w	ip, r3, r2
 8006b5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006b62:	1a9b      	subs	r3, r3, r2
 8006b64:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	bfd5      	itete	le
 8006b6c:	460a      	movle	r2, r1
 8006b6e:	462a      	movgt	r2, r5
 8006b70:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006b74:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006b78:	bfd8      	it	le
 8006b7a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006b7e:	465b      	mov	r3, fp
 8006b80:	4602      	mov	r2, r0
 8006b82:	4639      	mov	r1, r7
 8006b84:	4620      	mov	r0, r4
 8006b86:	f7f9 fdd1 	bl	800072c <__aeabi_ddiv>
 8006b8a:	b003      	add	sp, #12
 8006b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006b90 <__copybits>:
 8006b90:	3901      	subs	r1, #1
 8006b92:	b570      	push	{r4, r5, r6, lr}
 8006b94:	1149      	asrs	r1, r1, #5
 8006b96:	6914      	ldr	r4, [r2, #16]
 8006b98:	3101      	adds	r1, #1
 8006b9a:	f102 0314 	add.w	r3, r2, #20
 8006b9e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006ba2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006ba6:	1f05      	subs	r5, r0, #4
 8006ba8:	42a3      	cmp	r3, r4
 8006baa:	d30c      	bcc.n	8006bc6 <__copybits+0x36>
 8006bac:	1aa3      	subs	r3, r4, r2
 8006bae:	3b11      	subs	r3, #17
 8006bb0:	f023 0303 	bic.w	r3, r3, #3
 8006bb4:	3211      	adds	r2, #17
 8006bb6:	42a2      	cmp	r2, r4
 8006bb8:	bf88      	it	hi
 8006bba:	2300      	movhi	r3, #0
 8006bbc:	4418      	add	r0, r3
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	4288      	cmp	r0, r1
 8006bc2:	d305      	bcc.n	8006bd0 <__copybits+0x40>
 8006bc4:	bd70      	pop	{r4, r5, r6, pc}
 8006bc6:	f853 6b04 	ldr.w	r6, [r3], #4
 8006bca:	f845 6f04 	str.w	r6, [r5, #4]!
 8006bce:	e7eb      	b.n	8006ba8 <__copybits+0x18>
 8006bd0:	f840 3b04 	str.w	r3, [r0], #4
 8006bd4:	e7f4      	b.n	8006bc0 <__copybits+0x30>

08006bd6 <__any_on>:
 8006bd6:	f100 0214 	add.w	r2, r0, #20
 8006bda:	6900      	ldr	r0, [r0, #16]
 8006bdc:	114b      	asrs	r3, r1, #5
 8006bde:	4298      	cmp	r0, r3
 8006be0:	b510      	push	{r4, lr}
 8006be2:	db11      	blt.n	8006c08 <__any_on+0x32>
 8006be4:	dd0a      	ble.n	8006bfc <__any_on+0x26>
 8006be6:	f011 011f 	ands.w	r1, r1, #31
 8006bea:	d007      	beq.n	8006bfc <__any_on+0x26>
 8006bec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006bf0:	fa24 f001 	lsr.w	r0, r4, r1
 8006bf4:	fa00 f101 	lsl.w	r1, r0, r1
 8006bf8:	428c      	cmp	r4, r1
 8006bfa:	d10b      	bne.n	8006c14 <__any_on+0x3e>
 8006bfc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d803      	bhi.n	8006c0c <__any_on+0x36>
 8006c04:	2000      	movs	r0, #0
 8006c06:	bd10      	pop	{r4, pc}
 8006c08:	4603      	mov	r3, r0
 8006c0a:	e7f7      	b.n	8006bfc <__any_on+0x26>
 8006c0c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c10:	2900      	cmp	r1, #0
 8006c12:	d0f5      	beq.n	8006c00 <__any_on+0x2a>
 8006c14:	2001      	movs	r0, #1
 8006c16:	e7f6      	b.n	8006c06 <__any_on+0x30>

08006c18 <sulp>:
 8006c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c1c:	460f      	mov	r7, r1
 8006c1e:	4690      	mov	r8, r2
 8006c20:	f7ff feca 	bl	80069b8 <__ulp>
 8006c24:	4604      	mov	r4, r0
 8006c26:	460d      	mov	r5, r1
 8006c28:	f1b8 0f00 	cmp.w	r8, #0
 8006c2c:	d011      	beq.n	8006c52 <sulp+0x3a>
 8006c2e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006c32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	dd0b      	ble.n	8006c52 <sulp+0x3a>
 8006c3a:	2400      	movs	r4, #0
 8006c3c:	051b      	lsls	r3, r3, #20
 8006c3e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006c42:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006c46:	4622      	mov	r2, r4
 8006c48:	462b      	mov	r3, r5
 8006c4a:	f7f9 fc45 	bl	80004d8 <__aeabi_dmul>
 8006c4e:	4604      	mov	r4, r0
 8006c50:	460d      	mov	r5, r1
 8006c52:	4620      	mov	r0, r4
 8006c54:	4629      	mov	r1, r5
 8006c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c5a:	0000      	movs	r0, r0
 8006c5c:	0000      	movs	r0, r0
	...

08006c60 <_strtod_l>:
 8006c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c64:	b09f      	sub	sp, #124	; 0x7c
 8006c66:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c68:	2200      	movs	r2, #0
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	921a      	str	r2, [sp, #104]	; 0x68
 8006c6e:	460d      	mov	r5, r1
 8006c70:	f04f 0800 	mov.w	r8, #0
 8006c74:	f04f 0900 	mov.w	r9, #0
 8006c78:	460a      	mov	r2, r1
 8006c7a:	9219      	str	r2, [sp, #100]	; 0x64
 8006c7c:	7811      	ldrb	r1, [r2, #0]
 8006c7e:	292b      	cmp	r1, #43	; 0x2b
 8006c80:	d04a      	beq.n	8006d18 <_strtod_l+0xb8>
 8006c82:	d838      	bhi.n	8006cf6 <_strtod_l+0x96>
 8006c84:	290d      	cmp	r1, #13
 8006c86:	d832      	bhi.n	8006cee <_strtod_l+0x8e>
 8006c88:	2908      	cmp	r1, #8
 8006c8a:	d832      	bhi.n	8006cf2 <_strtod_l+0x92>
 8006c8c:	2900      	cmp	r1, #0
 8006c8e:	d03b      	beq.n	8006d08 <_strtod_l+0xa8>
 8006c90:	2200      	movs	r2, #0
 8006c92:	920e      	str	r2, [sp, #56]	; 0x38
 8006c94:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006c96:	7832      	ldrb	r2, [r6, #0]
 8006c98:	2a30      	cmp	r2, #48	; 0x30
 8006c9a:	f040 80b2 	bne.w	8006e02 <_strtod_l+0x1a2>
 8006c9e:	7872      	ldrb	r2, [r6, #1]
 8006ca0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006ca4:	2a58      	cmp	r2, #88	; 0x58
 8006ca6:	d16e      	bne.n	8006d86 <_strtod_l+0x126>
 8006ca8:	9302      	str	r3, [sp, #8]
 8006caa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cac:	4620      	mov	r0, r4
 8006cae:	9301      	str	r3, [sp, #4]
 8006cb0:	ab1a      	add	r3, sp, #104	; 0x68
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	4a8c      	ldr	r2, [pc, #560]	; (8006ee8 <_strtod_l+0x288>)
 8006cb6:	ab1b      	add	r3, sp, #108	; 0x6c
 8006cb8:	a919      	add	r1, sp, #100	; 0x64
 8006cba:	f001 f937 	bl	8007f2c <__gethex>
 8006cbe:	f010 070f 	ands.w	r7, r0, #15
 8006cc2:	4605      	mov	r5, r0
 8006cc4:	d005      	beq.n	8006cd2 <_strtod_l+0x72>
 8006cc6:	2f06      	cmp	r7, #6
 8006cc8:	d128      	bne.n	8006d1c <_strtod_l+0xbc>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	3601      	adds	r6, #1
 8006cce:	9619      	str	r6, [sp, #100]	; 0x64
 8006cd0:	930e      	str	r3, [sp, #56]	; 0x38
 8006cd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f040 85a0 	bne.w	800781a <_strtod_l+0xbba>
 8006cda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cdc:	b1cb      	cbz	r3, 8006d12 <_strtod_l+0xb2>
 8006cde:	4642      	mov	r2, r8
 8006ce0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	b01f      	add	sp, #124	; 0x7c
 8006cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cee:	2920      	cmp	r1, #32
 8006cf0:	d1ce      	bne.n	8006c90 <_strtod_l+0x30>
 8006cf2:	3201      	adds	r2, #1
 8006cf4:	e7c1      	b.n	8006c7a <_strtod_l+0x1a>
 8006cf6:	292d      	cmp	r1, #45	; 0x2d
 8006cf8:	d1ca      	bne.n	8006c90 <_strtod_l+0x30>
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	910e      	str	r1, [sp, #56]	; 0x38
 8006cfe:	1c51      	adds	r1, r2, #1
 8006d00:	9119      	str	r1, [sp, #100]	; 0x64
 8006d02:	7852      	ldrb	r2, [r2, #1]
 8006d04:	2a00      	cmp	r2, #0
 8006d06:	d1c5      	bne.n	8006c94 <_strtod_l+0x34>
 8006d08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d0a:	9519      	str	r5, [sp, #100]	; 0x64
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f040 8582 	bne.w	8007816 <_strtod_l+0xbb6>
 8006d12:	4642      	mov	r2, r8
 8006d14:	464b      	mov	r3, r9
 8006d16:	e7e5      	b.n	8006ce4 <_strtod_l+0x84>
 8006d18:	2100      	movs	r1, #0
 8006d1a:	e7ef      	b.n	8006cfc <_strtod_l+0x9c>
 8006d1c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006d1e:	b13a      	cbz	r2, 8006d30 <_strtod_l+0xd0>
 8006d20:	2135      	movs	r1, #53	; 0x35
 8006d22:	a81c      	add	r0, sp, #112	; 0x70
 8006d24:	f7ff ff34 	bl	8006b90 <__copybits>
 8006d28:	4620      	mov	r0, r4
 8006d2a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d2c:	f7ff fb18 	bl	8006360 <_Bfree>
 8006d30:	3f01      	subs	r7, #1
 8006d32:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006d34:	2f04      	cmp	r7, #4
 8006d36:	d806      	bhi.n	8006d46 <_strtod_l+0xe6>
 8006d38:	e8df f007 	tbb	[pc, r7]
 8006d3c:	201d0314 	.word	0x201d0314
 8006d40:	14          	.byte	0x14
 8006d41:	00          	.byte	0x00
 8006d42:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006d46:	05e9      	lsls	r1, r5, #23
 8006d48:	bf48      	it	mi
 8006d4a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006d4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d52:	0d1b      	lsrs	r3, r3, #20
 8006d54:	051b      	lsls	r3, r3, #20
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1bb      	bne.n	8006cd2 <_strtod_l+0x72>
 8006d5a:	f7fe fb17 	bl	800538c <__errno>
 8006d5e:	2322      	movs	r3, #34	; 0x22
 8006d60:	6003      	str	r3, [r0, #0]
 8006d62:	e7b6      	b.n	8006cd2 <_strtod_l+0x72>
 8006d64:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006d68:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006d6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006d70:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006d74:	e7e7      	b.n	8006d46 <_strtod_l+0xe6>
 8006d76:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8006eec <_strtod_l+0x28c>
 8006d7a:	e7e4      	b.n	8006d46 <_strtod_l+0xe6>
 8006d7c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006d80:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006d84:	e7df      	b.n	8006d46 <_strtod_l+0xe6>
 8006d86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	9219      	str	r2, [sp, #100]	; 0x64
 8006d8c:	785b      	ldrb	r3, [r3, #1]
 8006d8e:	2b30      	cmp	r3, #48	; 0x30
 8006d90:	d0f9      	beq.n	8006d86 <_strtod_l+0x126>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d09d      	beq.n	8006cd2 <_strtod_l+0x72>
 8006d96:	2301      	movs	r3, #1
 8006d98:	f04f 0a00 	mov.w	sl, #0
 8006d9c:	220a      	movs	r2, #10
 8006d9e:	46d3      	mov	fp, sl
 8006da0:	9305      	str	r3, [sp, #20]
 8006da2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006da4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006da8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006daa:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006dac:	7806      	ldrb	r6, [r0, #0]
 8006dae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006db2:	b2d9      	uxtb	r1, r3
 8006db4:	2909      	cmp	r1, #9
 8006db6:	d926      	bls.n	8006e06 <_strtod_l+0x1a6>
 8006db8:	2201      	movs	r2, #1
 8006dba:	494d      	ldr	r1, [pc, #308]	; (8006ef0 <_strtod_l+0x290>)
 8006dbc:	f000 ffe6 	bl	8007d8c <strncmp>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	d030      	beq.n	8006e26 <_strtod_l+0x1c6>
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	4632      	mov	r2, r6
 8006dc8:	4603      	mov	r3, r0
 8006dca:	465e      	mov	r6, fp
 8006dcc:	9008      	str	r0, [sp, #32]
 8006dce:	2a65      	cmp	r2, #101	; 0x65
 8006dd0:	d001      	beq.n	8006dd6 <_strtod_l+0x176>
 8006dd2:	2a45      	cmp	r2, #69	; 0x45
 8006dd4:	d113      	bne.n	8006dfe <_strtod_l+0x19e>
 8006dd6:	b91e      	cbnz	r6, 8006de0 <_strtod_l+0x180>
 8006dd8:	9a05      	ldr	r2, [sp, #20]
 8006dda:	4302      	orrs	r2, r0
 8006ddc:	d094      	beq.n	8006d08 <_strtod_l+0xa8>
 8006dde:	2600      	movs	r6, #0
 8006de0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006de2:	1c6a      	adds	r2, r5, #1
 8006de4:	9219      	str	r2, [sp, #100]	; 0x64
 8006de6:	786a      	ldrb	r2, [r5, #1]
 8006de8:	2a2b      	cmp	r2, #43	; 0x2b
 8006dea:	d074      	beq.n	8006ed6 <_strtod_l+0x276>
 8006dec:	2a2d      	cmp	r2, #45	; 0x2d
 8006dee:	d078      	beq.n	8006ee2 <_strtod_l+0x282>
 8006df0:	f04f 0c00 	mov.w	ip, #0
 8006df4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006df8:	2909      	cmp	r1, #9
 8006dfa:	d97f      	bls.n	8006efc <_strtod_l+0x29c>
 8006dfc:	9519      	str	r5, [sp, #100]	; 0x64
 8006dfe:	2700      	movs	r7, #0
 8006e00:	e09e      	b.n	8006f40 <_strtod_l+0x2e0>
 8006e02:	2300      	movs	r3, #0
 8006e04:	e7c8      	b.n	8006d98 <_strtod_l+0x138>
 8006e06:	f1bb 0f08 	cmp.w	fp, #8
 8006e0a:	bfd8      	it	le
 8006e0c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8006e0e:	f100 0001 	add.w	r0, r0, #1
 8006e12:	bfd6      	itet	le
 8006e14:	fb02 3301 	mlale	r3, r2, r1, r3
 8006e18:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006e1c:	930a      	strle	r3, [sp, #40]	; 0x28
 8006e1e:	f10b 0b01 	add.w	fp, fp, #1
 8006e22:	9019      	str	r0, [sp, #100]	; 0x64
 8006e24:	e7c1      	b.n	8006daa <_strtod_l+0x14a>
 8006e26:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	9219      	str	r2, [sp, #100]	; 0x64
 8006e2c:	785a      	ldrb	r2, [r3, #1]
 8006e2e:	f1bb 0f00 	cmp.w	fp, #0
 8006e32:	d037      	beq.n	8006ea4 <_strtod_l+0x244>
 8006e34:	465e      	mov	r6, fp
 8006e36:	9008      	str	r0, [sp, #32]
 8006e38:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006e3c:	2b09      	cmp	r3, #9
 8006e3e:	d912      	bls.n	8006e66 <_strtod_l+0x206>
 8006e40:	2301      	movs	r3, #1
 8006e42:	e7c4      	b.n	8006dce <_strtod_l+0x16e>
 8006e44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e46:	3001      	adds	r0, #1
 8006e48:	1c5a      	adds	r2, r3, #1
 8006e4a:	9219      	str	r2, [sp, #100]	; 0x64
 8006e4c:	785a      	ldrb	r2, [r3, #1]
 8006e4e:	2a30      	cmp	r2, #48	; 0x30
 8006e50:	d0f8      	beq.n	8006e44 <_strtod_l+0x1e4>
 8006e52:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006e56:	2b08      	cmp	r3, #8
 8006e58:	f200 84e4 	bhi.w	8007824 <_strtod_l+0xbc4>
 8006e5c:	9008      	str	r0, [sp, #32]
 8006e5e:	2000      	movs	r0, #0
 8006e60:	4606      	mov	r6, r0
 8006e62:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e64:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e66:	3a30      	subs	r2, #48	; 0x30
 8006e68:	f100 0301 	add.w	r3, r0, #1
 8006e6c:	d014      	beq.n	8006e98 <_strtod_l+0x238>
 8006e6e:	9908      	ldr	r1, [sp, #32]
 8006e70:	eb00 0c06 	add.w	ip, r0, r6
 8006e74:	4419      	add	r1, r3
 8006e76:	9108      	str	r1, [sp, #32]
 8006e78:	4633      	mov	r3, r6
 8006e7a:	210a      	movs	r1, #10
 8006e7c:	4563      	cmp	r3, ip
 8006e7e:	d113      	bne.n	8006ea8 <_strtod_l+0x248>
 8006e80:	1833      	adds	r3, r6, r0
 8006e82:	2b08      	cmp	r3, #8
 8006e84:	f106 0601 	add.w	r6, r6, #1
 8006e88:	4406      	add	r6, r0
 8006e8a:	dc1a      	bgt.n	8006ec2 <_strtod_l+0x262>
 8006e8c:	230a      	movs	r3, #10
 8006e8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e90:	fb03 2301 	mla	r3, r3, r1, r2
 8006e94:	930a      	str	r3, [sp, #40]	; 0x28
 8006e96:	2300      	movs	r3, #0
 8006e98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	1c51      	adds	r1, r2, #1
 8006e9e:	9119      	str	r1, [sp, #100]	; 0x64
 8006ea0:	7852      	ldrb	r2, [r2, #1]
 8006ea2:	e7c9      	b.n	8006e38 <_strtod_l+0x1d8>
 8006ea4:	4658      	mov	r0, fp
 8006ea6:	e7d2      	b.n	8006e4e <_strtod_l+0x1ee>
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	f103 0301 	add.w	r3, r3, #1
 8006eae:	dc03      	bgt.n	8006eb8 <_strtod_l+0x258>
 8006eb0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006eb2:	434f      	muls	r7, r1
 8006eb4:	970a      	str	r7, [sp, #40]	; 0x28
 8006eb6:	e7e1      	b.n	8006e7c <_strtod_l+0x21c>
 8006eb8:	2b10      	cmp	r3, #16
 8006eba:	bfd8      	it	le
 8006ebc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006ec0:	e7dc      	b.n	8006e7c <_strtod_l+0x21c>
 8006ec2:	2e10      	cmp	r6, #16
 8006ec4:	bfdc      	itt	le
 8006ec6:	230a      	movle	r3, #10
 8006ec8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006ecc:	e7e3      	b.n	8006e96 <_strtod_l+0x236>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	9308      	str	r3, [sp, #32]
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e780      	b.n	8006dd8 <_strtod_l+0x178>
 8006ed6:	f04f 0c00 	mov.w	ip, #0
 8006eda:	1caa      	adds	r2, r5, #2
 8006edc:	9219      	str	r2, [sp, #100]	; 0x64
 8006ede:	78aa      	ldrb	r2, [r5, #2]
 8006ee0:	e788      	b.n	8006df4 <_strtod_l+0x194>
 8006ee2:	f04f 0c01 	mov.w	ip, #1
 8006ee6:	e7f8      	b.n	8006eda <_strtod_l+0x27a>
 8006ee8:	0800ae88 	.word	0x0800ae88
 8006eec:	7ff00000 	.word	0x7ff00000
 8006ef0:	0800ae84 	.word	0x0800ae84
 8006ef4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006ef6:	1c51      	adds	r1, r2, #1
 8006ef8:	9119      	str	r1, [sp, #100]	; 0x64
 8006efa:	7852      	ldrb	r2, [r2, #1]
 8006efc:	2a30      	cmp	r2, #48	; 0x30
 8006efe:	d0f9      	beq.n	8006ef4 <_strtod_l+0x294>
 8006f00:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006f04:	2908      	cmp	r1, #8
 8006f06:	f63f af7a 	bhi.w	8006dfe <_strtod_l+0x19e>
 8006f0a:	3a30      	subs	r2, #48	; 0x30
 8006f0c:	9209      	str	r2, [sp, #36]	; 0x24
 8006f0e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f10:	920c      	str	r2, [sp, #48]	; 0x30
 8006f12:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f14:	1c57      	adds	r7, r2, #1
 8006f16:	9719      	str	r7, [sp, #100]	; 0x64
 8006f18:	7852      	ldrb	r2, [r2, #1]
 8006f1a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006f1e:	f1be 0f09 	cmp.w	lr, #9
 8006f22:	d938      	bls.n	8006f96 <_strtod_l+0x336>
 8006f24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f26:	1a7f      	subs	r7, r7, r1
 8006f28:	2f08      	cmp	r7, #8
 8006f2a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006f2e:	dc03      	bgt.n	8006f38 <_strtod_l+0x2d8>
 8006f30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f32:	428f      	cmp	r7, r1
 8006f34:	bfa8      	it	ge
 8006f36:	460f      	movge	r7, r1
 8006f38:	f1bc 0f00 	cmp.w	ip, #0
 8006f3c:	d000      	beq.n	8006f40 <_strtod_l+0x2e0>
 8006f3e:	427f      	negs	r7, r7
 8006f40:	2e00      	cmp	r6, #0
 8006f42:	d14f      	bne.n	8006fe4 <_strtod_l+0x384>
 8006f44:	9905      	ldr	r1, [sp, #20]
 8006f46:	4301      	orrs	r1, r0
 8006f48:	f47f aec3 	bne.w	8006cd2 <_strtod_l+0x72>
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f47f aedb 	bne.w	8006d08 <_strtod_l+0xa8>
 8006f52:	2a69      	cmp	r2, #105	; 0x69
 8006f54:	d029      	beq.n	8006faa <_strtod_l+0x34a>
 8006f56:	dc26      	bgt.n	8006fa6 <_strtod_l+0x346>
 8006f58:	2a49      	cmp	r2, #73	; 0x49
 8006f5a:	d026      	beq.n	8006faa <_strtod_l+0x34a>
 8006f5c:	2a4e      	cmp	r2, #78	; 0x4e
 8006f5e:	f47f aed3 	bne.w	8006d08 <_strtod_l+0xa8>
 8006f62:	499a      	ldr	r1, [pc, #616]	; (80071cc <_strtod_l+0x56c>)
 8006f64:	a819      	add	r0, sp, #100	; 0x64
 8006f66:	f001 fa23 	bl	80083b0 <__match>
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	f43f aecc 	beq.w	8006d08 <_strtod_l+0xa8>
 8006f70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2b28      	cmp	r3, #40	; 0x28
 8006f76:	d12f      	bne.n	8006fd8 <_strtod_l+0x378>
 8006f78:	4995      	ldr	r1, [pc, #596]	; (80071d0 <_strtod_l+0x570>)
 8006f7a:	aa1c      	add	r2, sp, #112	; 0x70
 8006f7c:	a819      	add	r0, sp, #100	; 0x64
 8006f7e:	f001 fa2b 	bl	80083d8 <__hexnan>
 8006f82:	2805      	cmp	r0, #5
 8006f84:	d128      	bne.n	8006fd8 <_strtod_l+0x378>
 8006f86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f88:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006f8c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006f90:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006f94:	e69d      	b.n	8006cd2 <_strtod_l+0x72>
 8006f96:	210a      	movs	r1, #10
 8006f98:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006f9a:	fb01 2107 	mla	r1, r1, r7, r2
 8006f9e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006fa2:	9209      	str	r2, [sp, #36]	; 0x24
 8006fa4:	e7b5      	b.n	8006f12 <_strtod_l+0x2b2>
 8006fa6:	2a6e      	cmp	r2, #110	; 0x6e
 8006fa8:	e7d9      	b.n	8006f5e <_strtod_l+0x2fe>
 8006faa:	498a      	ldr	r1, [pc, #552]	; (80071d4 <_strtod_l+0x574>)
 8006fac:	a819      	add	r0, sp, #100	; 0x64
 8006fae:	f001 f9ff 	bl	80083b0 <__match>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	f43f aea8 	beq.w	8006d08 <_strtod_l+0xa8>
 8006fb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fba:	4987      	ldr	r1, [pc, #540]	; (80071d8 <_strtod_l+0x578>)
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	a819      	add	r0, sp, #100	; 0x64
 8006fc0:	9319      	str	r3, [sp, #100]	; 0x64
 8006fc2:	f001 f9f5 	bl	80083b0 <__match>
 8006fc6:	b910      	cbnz	r0, 8006fce <_strtod_l+0x36e>
 8006fc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fca:	3301      	adds	r3, #1
 8006fcc:	9319      	str	r3, [sp, #100]	; 0x64
 8006fce:	f04f 0800 	mov.w	r8, #0
 8006fd2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80071dc <_strtod_l+0x57c>
 8006fd6:	e67c      	b.n	8006cd2 <_strtod_l+0x72>
 8006fd8:	4881      	ldr	r0, [pc, #516]	; (80071e0 <_strtod_l+0x580>)
 8006fda:	f000 ff07 	bl	8007dec <nan>
 8006fde:	4680      	mov	r8, r0
 8006fe0:	4689      	mov	r9, r1
 8006fe2:	e676      	b.n	8006cd2 <_strtod_l+0x72>
 8006fe4:	9b08      	ldr	r3, [sp, #32]
 8006fe6:	f1bb 0f00 	cmp.w	fp, #0
 8006fea:	bf08      	it	eq
 8006fec:	46b3      	moveq	fp, r6
 8006fee:	1afb      	subs	r3, r7, r3
 8006ff0:	2e10      	cmp	r6, #16
 8006ff2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006ff4:	4635      	mov	r5, r6
 8006ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff8:	bfa8      	it	ge
 8006ffa:	2510      	movge	r5, #16
 8006ffc:	f7f9 f9f2 	bl	80003e4 <__aeabi_ui2d>
 8007000:	2e09      	cmp	r6, #9
 8007002:	4680      	mov	r8, r0
 8007004:	4689      	mov	r9, r1
 8007006:	dd13      	ble.n	8007030 <_strtod_l+0x3d0>
 8007008:	4b76      	ldr	r3, [pc, #472]	; (80071e4 <_strtod_l+0x584>)
 800700a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800700e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007012:	f7f9 fa61 	bl	80004d8 <__aeabi_dmul>
 8007016:	4680      	mov	r8, r0
 8007018:	4650      	mov	r0, sl
 800701a:	4689      	mov	r9, r1
 800701c:	f7f9 f9e2 	bl	80003e4 <__aeabi_ui2d>
 8007020:	4602      	mov	r2, r0
 8007022:	460b      	mov	r3, r1
 8007024:	4640      	mov	r0, r8
 8007026:	4649      	mov	r1, r9
 8007028:	f7f9 f8a0 	bl	800016c <__adddf3>
 800702c:	4680      	mov	r8, r0
 800702e:	4689      	mov	r9, r1
 8007030:	2e0f      	cmp	r6, #15
 8007032:	dc36      	bgt.n	80070a2 <_strtod_l+0x442>
 8007034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007036:	2b00      	cmp	r3, #0
 8007038:	f43f ae4b 	beq.w	8006cd2 <_strtod_l+0x72>
 800703c:	dd22      	ble.n	8007084 <_strtod_l+0x424>
 800703e:	2b16      	cmp	r3, #22
 8007040:	dc09      	bgt.n	8007056 <_strtod_l+0x3f6>
 8007042:	4968      	ldr	r1, [pc, #416]	; (80071e4 <_strtod_l+0x584>)
 8007044:	4642      	mov	r2, r8
 8007046:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800704a:	464b      	mov	r3, r9
 800704c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007050:	f7f9 fa42 	bl	80004d8 <__aeabi_dmul>
 8007054:	e7c3      	b.n	8006fde <_strtod_l+0x37e>
 8007056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007058:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800705c:	4293      	cmp	r3, r2
 800705e:	db20      	blt.n	80070a2 <_strtod_l+0x442>
 8007060:	4c60      	ldr	r4, [pc, #384]	; (80071e4 <_strtod_l+0x584>)
 8007062:	f1c6 060f 	rsb	r6, r6, #15
 8007066:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800706a:	4642      	mov	r2, r8
 800706c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007070:	464b      	mov	r3, r9
 8007072:	f7f9 fa31 	bl	80004d8 <__aeabi_dmul>
 8007076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007078:	1b9e      	subs	r6, r3, r6
 800707a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800707e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007082:	e7e5      	b.n	8007050 <_strtod_l+0x3f0>
 8007084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007086:	3316      	adds	r3, #22
 8007088:	db0b      	blt.n	80070a2 <_strtod_l+0x442>
 800708a:	9b08      	ldr	r3, [sp, #32]
 800708c:	4640      	mov	r0, r8
 800708e:	1bdf      	subs	r7, r3, r7
 8007090:	4b54      	ldr	r3, [pc, #336]	; (80071e4 <_strtod_l+0x584>)
 8007092:	4649      	mov	r1, r9
 8007094:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800709c:	f7f9 fb46 	bl	800072c <__aeabi_ddiv>
 80070a0:	e79d      	b.n	8006fde <_strtod_l+0x37e>
 80070a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070a4:	1b75      	subs	r5, r6, r5
 80070a6:	441d      	add	r5, r3
 80070a8:	2d00      	cmp	r5, #0
 80070aa:	dd70      	ble.n	800718e <_strtod_l+0x52e>
 80070ac:	f015 030f 	ands.w	r3, r5, #15
 80070b0:	d00a      	beq.n	80070c8 <_strtod_l+0x468>
 80070b2:	494c      	ldr	r1, [pc, #304]	; (80071e4 <_strtod_l+0x584>)
 80070b4:	4642      	mov	r2, r8
 80070b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070be:	464b      	mov	r3, r9
 80070c0:	f7f9 fa0a 	bl	80004d8 <__aeabi_dmul>
 80070c4:	4680      	mov	r8, r0
 80070c6:	4689      	mov	r9, r1
 80070c8:	f035 050f 	bics.w	r5, r5, #15
 80070cc:	d04d      	beq.n	800716a <_strtod_l+0x50a>
 80070ce:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80070d2:	dd22      	ble.n	800711a <_strtod_l+0x4ba>
 80070d4:	2600      	movs	r6, #0
 80070d6:	46b3      	mov	fp, r6
 80070d8:	960b      	str	r6, [sp, #44]	; 0x2c
 80070da:	9608      	str	r6, [sp, #32]
 80070dc:	2322      	movs	r3, #34	; 0x22
 80070de:	f04f 0800 	mov.w	r8, #0
 80070e2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80071dc <_strtod_l+0x57c>
 80070e6:	6023      	str	r3, [r4, #0]
 80070e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f43f adf1 	beq.w	8006cd2 <_strtod_l+0x72>
 80070f0:	4620      	mov	r0, r4
 80070f2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80070f4:	f7ff f934 	bl	8006360 <_Bfree>
 80070f8:	4620      	mov	r0, r4
 80070fa:	9908      	ldr	r1, [sp, #32]
 80070fc:	f7ff f930 	bl	8006360 <_Bfree>
 8007100:	4659      	mov	r1, fp
 8007102:	4620      	mov	r0, r4
 8007104:	f7ff f92c 	bl	8006360 <_Bfree>
 8007108:	4620      	mov	r0, r4
 800710a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800710c:	f7ff f928 	bl	8006360 <_Bfree>
 8007110:	4631      	mov	r1, r6
 8007112:	4620      	mov	r0, r4
 8007114:	f7ff f924 	bl	8006360 <_Bfree>
 8007118:	e5db      	b.n	8006cd2 <_strtod_l+0x72>
 800711a:	4b33      	ldr	r3, [pc, #204]	; (80071e8 <_strtod_l+0x588>)
 800711c:	4640      	mov	r0, r8
 800711e:	9305      	str	r3, [sp, #20]
 8007120:	2300      	movs	r3, #0
 8007122:	4649      	mov	r1, r9
 8007124:	469a      	mov	sl, r3
 8007126:	112d      	asrs	r5, r5, #4
 8007128:	2d01      	cmp	r5, #1
 800712a:	dc21      	bgt.n	8007170 <_strtod_l+0x510>
 800712c:	b10b      	cbz	r3, 8007132 <_strtod_l+0x4d2>
 800712e:	4680      	mov	r8, r0
 8007130:	4689      	mov	r9, r1
 8007132:	492d      	ldr	r1, [pc, #180]	; (80071e8 <_strtod_l+0x588>)
 8007134:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007138:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800713c:	4642      	mov	r2, r8
 800713e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007142:	464b      	mov	r3, r9
 8007144:	f7f9 f9c8 	bl	80004d8 <__aeabi_dmul>
 8007148:	4b24      	ldr	r3, [pc, #144]	; (80071dc <_strtod_l+0x57c>)
 800714a:	460a      	mov	r2, r1
 800714c:	400b      	ands	r3, r1
 800714e:	4927      	ldr	r1, [pc, #156]	; (80071ec <_strtod_l+0x58c>)
 8007150:	4680      	mov	r8, r0
 8007152:	428b      	cmp	r3, r1
 8007154:	d8be      	bhi.n	80070d4 <_strtod_l+0x474>
 8007156:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800715a:	428b      	cmp	r3, r1
 800715c:	bf86      	itte	hi
 800715e:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8007162:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80071f0 <_strtod_l+0x590>
 8007166:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800716a:	2300      	movs	r3, #0
 800716c:	9305      	str	r3, [sp, #20]
 800716e:	e07b      	b.n	8007268 <_strtod_l+0x608>
 8007170:	07ea      	lsls	r2, r5, #31
 8007172:	d505      	bpl.n	8007180 <_strtod_l+0x520>
 8007174:	9b05      	ldr	r3, [sp, #20]
 8007176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717a:	f7f9 f9ad 	bl	80004d8 <__aeabi_dmul>
 800717e:	2301      	movs	r3, #1
 8007180:	9a05      	ldr	r2, [sp, #20]
 8007182:	f10a 0a01 	add.w	sl, sl, #1
 8007186:	3208      	adds	r2, #8
 8007188:	106d      	asrs	r5, r5, #1
 800718a:	9205      	str	r2, [sp, #20]
 800718c:	e7cc      	b.n	8007128 <_strtod_l+0x4c8>
 800718e:	d0ec      	beq.n	800716a <_strtod_l+0x50a>
 8007190:	426d      	negs	r5, r5
 8007192:	f015 020f 	ands.w	r2, r5, #15
 8007196:	d00a      	beq.n	80071ae <_strtod_l+0x54e>
 8007198:	4b12      	ldr	r3, [pc, #72]	; (80071e4 <_strtod_l+0x584>)
 800719a:	4640      	mov	r0, r8
 800719c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071a0:	4649      	mov	r1, r9
 80071a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a6:	f7f9 fac1 	bl	800072c <__aeabi_ddiv>
 80071aa:	4680      	mov	r8, r0
 80071ac:	4689      	mov	r9, r1
 80071ae:	112d      	asrs	r5, r5, #4
 80071b0:	d0db      	beq.n	800716a <_strtod_l+0x50a>
 80071b2:	2d1f      	cmp	r5, #31
 80071b4:	dd1e      	ble.n	80071f4 <_strtod_l+0x594>
 80071b6:	2600      	movs	r6, #0
 80071b8:	46b3      	mov	fp, r6
 80071ba:	960b      	str	r6, [sp, #44]	; 0x2c
 80071bc:	9608      	str	r6, [sp, #32]
 80071be:	2322      	movs	r3, #34	; 0x22
 80071c0:	f04f 0800 	mov.w	r8, #0
 80071c4:	f04f 0900 	mov.w	r9, #0
 80071c8:	6023      	str	r3, [r4, #0]
 80071ca:	e78d      	b.n	80070e8 <_strtod_l+0x488>
 80071cc:	0800ac70 	.word	0x0800ac70
 80071d0:	0800ae9c 	.word	0x0800ae9c
 80071d4:	0800ac68 	.word	0x0800ac68
 80071d8:	0800ac9f 	.word	0x0800ac9f
 80071dc:	7ff00000 	.word	0x7ff00000
 80071e0:	0800b02d 	.word	0x0800b02d
 80071e4:	0800adb0 	.word	0x0800adb0
 80071e8:	0800ad88 	.word	0x0800ad88
 80071ec:	7ca00000 	.word	0x7ca00000
 80071f0:	7fefffff 	.word	0x7fefffff
 80071f4:	f015 0310 	ands.w	r3, r5, #16
 80071f8:	bf18      	it	ne
 80071fa:	236a      	movne	r3, #106	; 0x6a
 80071fc:	4640      	mov	r0, r8
 80071fe:	9305      	str	r3, [sp, #20]
 8007200:	4649      	mov	r1, r9
 8007202:	2300      	movs	r3, #0
 8007204:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80074d0 <_strtod_l+0x870>
 8007208:	07ea      	lsls	r2, r5, #31
 800720a:	d504      	bpl.n	8007216 <_strtod_l+0x5b6>
 800720c:	e9da 2300 	ldrd	r2, r3, [sl]
 8007210:	f7f9 f962 	bl	80004d8 <__aeabi_dmul>
 8007214:	2301      	movs	r3, #1
 8007216:	106d      	asrs	r5, r5, #1
 8007218:	f10a 0a08 	add.w	sl, sl, #8
 800721c:	d1f4      	bne.n	8007208 <_strtod_l+0x5a8>
 800721e:	b10b      	cbz	r3, 8007224 <_strtod_l+0x5c4>
 8007220:	4680      	mov	r8, r0
 8007222:	4689      	mov	r9, r1
 8007224:	9b05      	ldr	r3, [sp, #20]
 8007226:	b1bb      	cbz	r3, 8007258 <_strtod_l+0x5f8>
 8007228:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800722c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007230:	2b00      	cmp	r3, #0
 8007232:	4649      	mov	r1, r9
 8007234:	dd10      	ble.n	8007258 <_strtod_l+0x5f8>
 8007236:	2b1f      	cmp	r3, #31
 8007238:	f340 8128 	ble.w	800748c <_strtod_l+0x82c>
 800723c:	2b34      	cmp	r3, #52	; 0x34
 800723e:	bfd8      	it	le
 8007240:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8007244:	f04f 0800 	mov.w	r8, #0
 8007248:	bfcf      	iteee	gt
 800724a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800724e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007252:	4093      	lslle	r3, r2
 8007254:	ea03 0901 	andle.w	r9, r3, r1
 8007258:	2200      	movs	r2, #0
 800725a:	2300      	movs	r3, #0
 800725c:	4640      	mov	r0, r8
 800725e:	4649      	mov	r1, r9
 8007260:	f7f9 fba2 	bl	80009a8 <__aeabi_dcmpeq>
 8007264:	2800      	cmp	r0, #0
 8007266:	d1a6      	bne.n	80071b6 <_strtod_l+0x556>
 8007268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800726a:	465a      	mov	r2, fp
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	4620      	mov	r0, r4
 8007270:	4633      	mov	r3, r6
 8007272:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007274:	f7ff f8dc 	bl	8006430 <__s2b>
 8007278:	900b      	str	r0, [sp, #44]	; 0x2c
 800727a:	2800      	cmp	r0, #0
 800727c:	f43f af2a 	beq.w	80070d4 <_strtod_l+0x474>
 8007280:	2600      	movs	r6, #0
 8007282:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007284:	9b08      	ldr	r3, [sp, #32]
 8007286:	2a00      	cmp	r2, #0
 8007288:	eba3 0307 	sub.w	r3, r3, r7
 800728c:	bfa8      	it	ge
 800728e:	2300      	movge	r3, #0
 8007290:	46b3      	mov	fp, r6
 8007292:	9312      	str	r3, [sp, #72]	; 0x48
 8007294:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007298:	9316      	str	r3, [sp, #88]	; 0x58
 800729a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800729c:	4620      	mov	r0, r4
 800729e:	6859      	ldr	r1, [r3, #4]
 80072a0:	f7ff f81e 	bl	80062e0 <_Balloc>
 80072a4:	9008      	str	r0, [sp, #32]
 80072a6:	2800      	cmp	r0, #0
 80072a8:	f43f af18 	beq.w	80070dc <_strtod_l+0x47c>
 80072ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072ae:	300c      	adds	r0, #12
 80072b0:	691a      	ldr	r2, [r3, #16]
 80072b2:	f103 010c 	add.w	r1, r3, #12
 80072b6:	3202      	adds	r2, #2
 80072b8:	0092      	lsls	r2, r2, #2
 80072ba:	f000 fd89 	bl	8007dd0 <memcpy>
 80072be:	ab1c      	add	r3, sp, #112	; 0x70
 80072c0:	9301      	str	r3, [sp, #4]
 80072c2:	ab1b      	add	r3, sp, #108	; 0x6c
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	4642      	mov	r2, r8
 80072c8:	464b      	mov	r3, r9
 80072ca:	4620      	mov	r0, r4
 80072cc:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80072d0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80072d4:	f7ff fbd8 	bl	8006a88 <__d2b>
 80072d8:	901a      	str	r0, [sp, #104]	; 0x68
 80072da:	2800      	cmp	r0, #0
 80072dc:	f43f aefe 	beq.w	80070dc <_strtod_l+0x47c>
 80072e0:	2101      	movs	r1, #1
 80072e2:	4620      	mov	r0, r4
 80072e4:	f7ff f93c 	bl	8006560 <__i2b>
 80072e8:	4683      	mov	fp, r0
 80072ea:	2800      	cmp	r0, #0
 80072ec:	f43f aef6 	beq.w	80070dc <_strtod_l+0x47c>
 80072f0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80072f2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80072f4:	2f00      	cmp	r7, #0
 80072f6:	bfab      	itete	ge
 80072f8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80072fa:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80072fc:	eb07 0a03 	addge.w	sl, r7, r3
 8007300:	1bdd      	sublt	r5, r3, r7
 8007302:	9b05      	ldr	r3, [sp, #20]
 8007304:	bfa8      	it	ge
 8007306:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007308:	eba7 0703 	sub.w	r7, r7, r3
 800730c:	4417      	add	r7, r2
 800730e:	4b71      	ldr	r3, [pc, #452]	; (80074d4 <_strtod_l+0x874>)
 8007310:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 8007314:	bfb8      	it	lt
 8007316:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800731a:	429f      	cmp	r7, r3
 800731c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007320:	f280 80c7 	bge.w	80074b2 <_strtod_l+0x852>
 8007324:	1bdb      	subs	r3, r3, r7
 8007326:	2b1f      	cmp	r3, #31
 8007328:	f04f 0101 	mov.w	r1, #1
 800732c:	eba2 0203 	sub.w	r2, r2, r3
 8007330:	f300 80b3 	bgt.w	800749a <_strtod_l+0x83a>
 8007334:	fa01 f303 	lsl.w	r3, r1, r3
 8007338:	9313      	str	r3, [sp, #76]	; 0x4c
 800733a:	2300      	movs	r3, #0
 800733c:	9310      	str	r3, [sp, #64]	; 0x40
 800733e:	eb0a 0702 	add.w	r7, sl, r2
 8007342:	9b05      	ldr	r3, [sp, #20]
 8007344:	45ba      	cmp	sl, r7
 8007346:	4415      	add	r5, r2
 8007348:	441d      	add	r5, r3
 800734a:	4653      	mov	r3, sl
 800734c:	bfa8      	it	ge
 800734e:	463b      	movge	r3, r7
 8007350:	42ab      	cmp	r3, r5
 8007352:	bfa8      	it	ge
 8007354:	462b      	movge	r3, r5
 8007356:	2b00      	cmp	r3, #0
 8007358:	bfc2      	ittt	gt
 800735a:	1aff      	subgt	r7, r7, r3
 800735c:	1aed      	subgt	r5, r5, r3
 800735e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007362:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007364:	2b00      	cmp	r3, #0
 8007366:	dd17      	ble.n	8007398 <_strtod_l+0x738>
 8007368:	4659      	mov	r1, fp
 800736a:	461a      	mov	r2, r3
 800736c:	4620      	mov	r0, r4
 800736e:	f7ff f9b5 	bl	80066dc <__pow5mult>
 8007372:	4683      	mov	fp, r0
 8007374:	2800      	cmp	r0, #0
 8007376:	f43f aeb1 	beq.w	80070dc <_strtod_l+0x47c>
 800737a:	4601      	mov	r1, r0
 800737c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800737e:	4620      	mov	r0, r4
 8007380:	f7ff f904 	bl	800658c <__multiply>
 8007384:	900a      	str	r0, [sp, #40]	; 0x28
 8007386:	2800      	cmp	r0, #0
 8007388:	f43f aea8 	beq.w	80070dc <_strtod_l+0x47c>
 800738c:	4620      	mov	r0, r4
 800738e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007390:	f7fe ffe6 	bl	8006360 <_Bfree>
 8007394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007396:	931a      	str	r3, [sp, #104]	; 0x68
 8007398:	2f00      	cmp	r7, #0
 800739a:	f300 808f 	bgt.w	80074bc <_strtod_l+0x85c>
 800739e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	dd08      	ble.n	80073b6 <_strtod_l+0x756>
 80073a4:	4620      	mov	r0, r4
 80073a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80073a8:	9908      	ldr	r1, [sp, #32]
 80073aa:	f7ff f997 	bl	80066dc <__pow5mult>
 80073ae:	9008      	str	r0, [sp, #32]
 80073b0:	2800      	cmp	r0, #0
 80073b2:	f43f ae93 	beq.w	80070dc <_strtod_l+0x47c>
 80073b6:	2d00      	cmp	r5, #0
 80073b8:	dd08      	ble.n	80073cc <_strtod_l+0x76c>
 80073ba:	462a      	mov	r2, r5
 80073bc:	4620      	mov	r0, r4
 80073be:	9908      	ldr	r1, [sp, #32]
 80073c0:	f7ff f9e6 	bl	8006790 <__lshift>
 80073c4:	9008      	str	r0, [sp, #32]
 80073c6:	2800      	cmp	r0, #0
 80073c8:	f43f ae88 	beq.w	80070dc <_strtod_l+0x47c>
 80073cc:	f1ba 0f00 	cmp.w	sl, #0
 80073d0:	dd08      	ble.n	80073e4 <_strtod_l+0x784>
 80073d2:	4659      	mov	r1, fp
 80073d4:	4652      	mov	r2, sl
 80073d6:	4620      	mov	r0, r4
 80073d8:	f7ff f9da 	bl	8006790 <__lshift>
 80073dc:	4683      	mov	fp, r0
 80073de:	2800      	cmp	r0, #0
 80073e0:	f43f ae7c 	beq.w	80070dc <_strtod_l+0x47c>
 80073e4:	4620      	mov	r0, r4
 80073e6:	9a08      	ldr	r2, [sp, #32]
 80073e8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80073ea:	f7ff fa59 	bl	80068a0 <__mdiff>
 80073ee:	4606      	mov	r6, r0
 80073f0:	2800      	cmp	r0, #0
 80073f2:	f43f ae73 	beq.w	80070dc <_strtod_l+0x47c>
 80073f6:	2500      	movs	r5, #0
 80073f8:	68c3      	ldr	r3, [r0, #12]
 80073fa:	4659      	mov	r1, fp
 80073fc:	60c5      	str	r5, [r0, #12]
 80073fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007400:	f7ff fa32 	bl	8006868 <__mcmp>
 8007404:	42a8      	cmp	r0, r5
 8007406:	da6b      	bge.n	80074e0 <_strtod_l+0x880>
 8007408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800740a:	ea53 0308 	orrs.w	r3, r3, r8
 800740e:	f040 808f 	bne.w	8007530 <_strtod_l+0x8d0>
 8007412:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007416:	2b00      	cmp	r3, #0
 8007418:	f040 808a 	bne.w	8007530 <_strtod_l+0x8d0>
 800741c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007420:	0d1b      	lsrs	r3, r3, #20
 8007422:	051b      	lsls	r3, r3, #20
 8007424:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007428:	f240 8082 	bls.w	8007530 <_strtod_l+0x8d0>
 800742c:	6973      	ldr	r3, [r6, #20]
 800742e:	b913      	cbnz	r3, 8007436 <_strtod_l+0x7d6>
 8007430:	6933      	ldr	r3, [r6, #16]
 8007432:	2b01      	cmp	r3, #1
 8007434:	dd7c      	ble.n	8007530 <_strtod_l+0x8d0>
 8007436:	4631      	mov	r1, r6
 8007438:	2201      	movs	r2, #1
 800743a:	4620      	mov	r0, r4
 800743c:	f7ff f9a8 	bl	8006790 <__lshift>
 8007440:	4659      	mov	r1, fp
 8007442:	4606      	mov	r6, r0
 8007444:	f7ff fa10 	bl	8006868 <__mcmp>
 8007448:	2800      	cmp	r0, #0
 800744a:	dd71      	ble.n	8007530 <_strtod_l+0x8d0>
 800744c:	9905      	ldr	r1, [sp, #20]
 800744e:	464b      	mov	r3, r9
 8007450:	4a21      	ldr	r2, [pc, #132]	; (80074d8 <_strtod_l+0x878>)
 8007452:	2900      	cmp	r1, #0
 8007454:	f000 808d 	beq.w	8007572 <_strtod_l+0x912>
 8007458:	ea02 0109 	and.w	r1, r2, r9
 800745c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007460:	f300 8087 	bgt.w	8007572 <_strtod_l+0x912>
 8007464:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007468:	f77f aea9 	ble.w	80071be <_strtod_l+0x55e>
 800746c:	4640      	mov	r0, r8
 800746e:	4649      	mov	r1, r9
 8007470:	4b1a      	ldr	r3, [pc, #104]	; (80074dc <_strtod_l+0x87c>)
 8007472:	2200      	movs	r2, #0
 8007474:	f7f9 f830 	bl	80004d8 <__aeabi_dmul>
 8007478:	4b17      	ldr	r3, [pc, #92]	; (80074d8 <_strtod_l+0x878>)
 800747a:	4680      	mov	r8, r0
 800747c:	400b      	ands	r3, r1
 800747e:	4689      	mov	r9, r1
 8007480:	2b00      	cmp	r3, #0
 8007482:	f47f ae35 	bne.w	80070f0 <_strtod_l+0x490>
 8007486:	2322      	movs	r3, #34	; 0x22
 8007488:	6023      	str	r3, [r4, #0]
 800748a:	e631      	b.n	80070f0 <_strtod_l+0x490>
 800748c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007490:	fa02 f303 	lsl.w	r3, r2, r3
 8007494:	ea03 0808 	and.w	r8, r3, r8
 8007498:	e6de      	b.n	8007258 <_strtod_l+0x5f8>
 800749a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800749e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80074a2:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80074a6:	37e2      	adds	r7, #226	; 0xe2
 80074a8:	fa01 f307 	lsl.w	r3, r1, r7
 80074ac:	9310      	str	r3, [sp, #64]	; 0x40
 80074ae:	9113      	str	r1, [sp, #76]	; 0x4c
 80074b0:	e745      	b.n	800733e <_strtod_l+0x6de>
 80074b2:	2300      	movs	r3, #0
 80074b4:	9310      	str	r3, [sp, #64]	; 0x40
 80074b6:	2301      	movs	r3, #1
 80074b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80074ba:	e740      	b.n	800733e <_strtod_l+0x6de>
 80074bc:	463a      	mov	r2, r7
 80074be:	4620      	mov	r0, r4
 80074c0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80074c2:	f7ff f965 	bl	8006790 <__lshift>
 80074c6:	901a      	str	r0, [sp, #104]	; 0x68
 80074c8:	2800      	cmp	r0, #0
 80074ca:	f47f af68 	bne.w	800739e <_strtod_l+0x73e>
 80074ce:	e605      	b.n	80070dc <_strtod_l+0x47c>
 80074d0:	0800aeb0 	.word	0x0800aeb0
 80074d4:	fffffc02 	.word	0xfffffc02
 80074d8:	7ff00000 	.word	0x7ff00000
 80074dc:	39500000 	.word	0x39500000
 80074e0:	46ca      	mov	sl, r9
 80074e2:	d165      	bne.n	80075b0 <_strtod_l+0x950>
 80074e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074ea:	b352      	cbz	r2, 8007542 <_strtod_l+0x8e2>
 80074ec:	4a9e      	ldr	r2, [pc, #632]	; (8007768 <_strtod_l+0xb08>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d12a      	bne.n	8007548 <_strtod_l+0x8e8>
 80074f2:	9b05      	ldr	r3, [sp, #20]
 80074f4:	4641      	mov	r1, r8
 80074f6:	b1fb      	cbz	r3, 8007538 <_strtod_l+0x8d8>
 80074f8:	4b9c      	ldr	r3, [pc, #624]	; (800776c <_strtod_l+0xb0c>)
 80074fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074fe:	ea09 0303 	and.w	r3, r9, r3
 8007502:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007506:	d81a      	bhi.n	800753e <_strtod_l+0x8de>
 8007508:	0d1b      	lsrs	r3, r3, #20
 800750a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800750e:	fa02 f303 	lsl.w	r3, r2, r3
 8007512:	4299      	cmp	r1, r3
 8007514:	d118      	bne.n	8007548 <_strtod_l+0x8e8>
 8007516:	4b96      	ldr	r3, [pc, #600]	; (8007770 <_strtod_l+0xb10>)
 8007518:	459a      	cmp	sl, r3
 800751a:	d102      	bne.n	8007522 <_strtod_l+0x8c2>
 800751c:	3101      	adds	r1, #1
 800751e:	f43f addd 	beq.w	80070dc <_strtod_l+0x47c>
 8007522:	f04f 0800 	mov.w	r8, #0
 8007526:	4b91      	ldr	r3, [pc, #580]	; (800776c <_strtod_l+0xb0c>)
 8007528:	ea0a 0303 	and.w	r3, sl, r3
 800752c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007530:	9b05      	ldr	r3, [sp, #20]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d19a      	bne.n	800746c <_strtod_l+0x80c>
 8007536:	e5db      	b.n	80070f0 <_strtod_l+0x490>
 8007538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800753c:	e7e9      	b.n	8007512 <_strtod_l+0x8b2>
 800753e:	4613      	mov	r3, r2
 8007540:	e7e7      	b.n	8007512 <_strtod_l+0x8b2>
 8007542:	ea53 0308 	orrs.w	r3, r3, r8
 8007546:	d081      	beq.n	800744c <_strtod_l+0x7ec>
 8007548:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800754a:	b1e3      	cbz	r3, 8007586 <_strtod_l+0x926>
 800754c:	ea13 0f0a 	tst.w	r3, sl
 8007550:	d0ee      	beq.n	8007530 <_strtod_l+0x8d0>
 8007552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007554:	4640      	mov	r0, r8
 8007556:	4649      	mov	r1, r9
 8007558:	9a05      	ldr	r2, [sp, #20]
 800755a:	b1c3      	cbz	r3, 800758e <_strtod_l+0x92e>
 800755c:	f7ff fb5c 	bl	8006c18 <sulp>
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007566:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007568:	f7f8 fe00 	bl	800016c <__adddf3>
 800756c:	4680      	mov	r8, r0
 800756e:	4689      	mov	r9, r1
 8007570:	e7de      	b.n	8007530 <_strtod_l+0x8d0>
 8007572:	4013      	ands	r3, r2
 8007574:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007578:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800757c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007580:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007584:	e7d4      	b.n	8007530 <_strtod_l+0x8d0>
 8007586:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007588:	ea13 0f08 	tst.w	r3, r8
 800758c:	e7e0      	b.n	8007550 <_strtod_l+0x8f0>
 800758e:	f7ff fb43 	bl	8006c18 <sulp>
 8007592:	4602      	mov	r2, r0
 8007594:	460b      	mov	r3, r1
 8007596:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007598:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800759a:	f7f8 fde5 	bl	8000168 <__aeabi_dsub>
 800759e:	2200      	movs	r2, #0
 80075a0:	2300      	movs	r3, #0
 80075a2:	4680      	mov	r8, r0
 80075a4:	4689      	mov	r9, r1
 80075a6:	f7f9 f9ff 	bl	80009a8 <__aeabi_dcmpeq>
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d0c0      	beq.n	8007530 <_strtod_l+0x8d0>
 80075ae:	e606      	b.n	80071be <_strtod_l+0x55e>
 80075b0:	4659      	mov	r1, fp
 80075b2:	4630      	mov	r0, r6
 80075b4:	f7ff fabe 	bl	8006b34 <__ratio>
 80075b8:	4602      	mov	r2, r0
 80075ba:	460b      	mov	r3, r1
 80075bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80075c0:	2200      	movs	r2, #0
 80075c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075c6:	f7f9 fa03 	bl	80009d0 <__aeabi_dcmple>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	d06f      	beq.n	80076ae <_strtod_l+0xa4e>
 80075ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d17c      	bne.n	80076ce <_strtod_l+0xa6e>
 80075d4:	f1b8 0f00 	cmp.w	r8, #0
 80075d8:	d159      	bne.n	800768e <_strtod_l+0xa2e>
 80075da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d17b      	bne.n	80076da <_strtod_l+0xa7a>
 80075e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075e6:	2200      	movs	r2, #0
 80075e8:	4b62      	ldr	r3, [pc, #392]	; (8007774 <_strtod_l+0xb14>)
 80075ea:	f7f9 f9e7 	bl	80009bc <__aeabi_dcmplt>
 80075ee:	2800      	cmp	r0, #0
 80075f0:	d15a      	bne.n	80076a8 <_strtod_l+0xa48>
 80075f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075f6:	2200      	movs	r2, #0
 80075f8:	4b5f      	ldr	r3, [pc, #380]	; (8007778 <_strtod_l+0xb18>)
 80075fa:	f7f8 ff6d 	bl	80004d8 <__aeabi_dmul>
 80075fe:	4605      	mov	r5, r0
 8007600:	460f      	mov	r7, r1
 8007602:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007606:	9506      	str	r5, [sp, #24]
 8007608:	9307      	str	r3, [sp, #28]
 800760a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800760e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007612:	4b56      	ldr	r3, [pc, #344]	; (800776c <_strtod_l+0xb0c>)
 8007614:	4a55      	ldr	r2, [pc, #340]	; (800776c <_strtod_l+0xb0c>)
 8007616:	ea0a 0303 	and.w	r3, sl, r3
 800761a:	9313      	str	r3, [sp, #76]	; 0x4c
 800761c:	4b57      	ldr	r3, [pc, #348]	; (800777c <_strtod_l+0xb1c>)
 800761e:	ea0a 0202 	and.w	r2, sl, r2
 8007622:	429a      	cmp	r2, r3
 8007624:	f040 80b0 	bne.w	8007788 <_strtod_l+0xb28>
 8007628:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800762c:	4640      	mov	r0, r8
 800762e:	4649      	mov	r1, r9
 8007630:	f7ff f9c2 	bl	80069b8 <__ulp>
 8007634:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007638:	f7f8 ff4e 	bl	80004d8 <__aeabi_dmul>
 800763c:	4642      	mov	r2, r8
 800763e:	464b      	mov	r3, r9
 8007640:	f7f8 fd94 	bl	800016c <__adddf3>
 8007644:	f8df a124 	ldr.w	sl, [pc, #292]	; 800776c <_strtod_l+0xb0c>
 8007648:	4a4d      	ldr	r2, [pc, #308]	; (8007780 <_strtod_l+0xb20>)
 800764a:	ea01 0a0a 	and.w	sl, r1, sl
 800764e:	4592      	cmp	sl, r2
 8007650:	4680      	mov	r8, r0
 8007652:	d948      	bls.n	80076e6 <_strtod_l+0xa86>
 8007654:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007656:	4b46      	ldr	r3, [pc, #280]	; (8007770 <_strtod_l+0xb10>)
 8007658:	429a      	cmp	r2, r3
 800765a:	d103      	bne.n	8007664 <_strtod_l+0xa04>
 800765c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800765e:	3301      	adds	r3, #1
 8007660:	f43f ad3c 	beq.w	80070dc <_strtod_l+0x47c>
 8007664:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007668:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007770 <_strtod_l+0xb10>
 800766c:	4620      	mov	r0, r4
 800766e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007670:	f7fe fe76 	bl	8006360 <_Bfree>
 8007674:	4620      	mov	r0, r4
 8007676:	9908      	ldr	r1, [sp, #32]
 8007678:	f7fe fe72 	bl	8006360 <_Bfree>
 800767c:	4659      	mov	r1, fp
 800767e:	4620      	mov	r0, r4
 8007680:	f7fe fe6e 	bl	8006360 <_Bfree>
 8007684:	4631      	mov	r1, r6
 8007686:	4620      	mov	r0, r4
 8007688:	f7fe fe6a 	bl	8006360 <_Bfree>
 800768c:	e605      	b.n	800729a <_strtod_l+0x63a>
 800768e:	f1b8 0f01 	cmp.w	r8, #1
 8007692:	d103      	bne.n	800769c <_strtod_l+0xa3c>
 8007694:	f1b9 0f00 	cmp.w	r9, #0
 8007698:	f43f ad91 	beq.w	80071be <_strtod_l+0x55e>
 800769c:	2200      	movs	r2, #0
 800769e:	4b39      	ldr	r3, [pc, #228]	; (8007784 <_strtod_l+0xb24>)
 80076a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80076a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80076a6:	e016      	b.n	80076d6 <_strtod_l+0xa76>
 80076a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80076aa:	4f33      	ldr	r7, [pc, #204]	; (8007778 <_strtod_l+0xb18>)
 80076ac:	e7a9      	b.n	8007602 <_strtod_l+0x9a2>
 80076ae:	4b32      	ldr	r3, [pc, #200]	; (8007778 <_strtod_l+0xb18>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076b6:	f7f8 ff0f 	bl	80004d8 <__aeabi_dmul>
 80076ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076bc:	4605      	mov	r5, r0
 80076be:	460f      	mov	r7, r1
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d09e      	beq.n	8007602 <_strtod_l+0x9a2>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80076cc:	e79d      	b.n	800760a <_strtod_l+0x9aa>
 80076ce:	2200      	movs	r2, #0
 80076d0:	4b28      	ldr	r3, [pc, #160]	; (8007774 <_strtod_l+0xb14>)
 80076d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80076d6:	4f27      	ldr	r7, [pc, #156]	; (8007774 <_strtod_l+0xb14>)
 80076d8:	e797      	b.n	800760a <_strtod_l+0x9aa>
 80076da:	2200      	movs	r2, #0
 80076dc:	4b29      	ldr	r3, [pc, #164]	; (8007784 <_strtod_l+0xb24>)
 80076de:	4645      	mov	r5, r8
 80076e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80076e4:	e7f7      	b.n	80076d6 <_strtod_l+0xa76>
 80076e6:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80076ea:	9b05      	ldr	r3, [sp, #20]
 80076ec:	46ca      	mov	sl, r9
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1bc      	bne.n	800766c <_strtod_l+0xa0c>
 80076f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80076f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80076f8:	0d1b      	lsrs	r3, r3, #20
 80076fa:	051b      	lsls	r3, r3, #20
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d1b5      	bne.n	800766c <_strtod_l+0xa0c>
 8007700:	4628      	mov	r0, r5
 8007702:	4639      	mov	r1, r7
 8007704:	f7f9 fa30 	bl	8000b68 <__aeabi_d2lz>
 8007708:	f7f8 feb8 	bl	800047c <__aeabi_l2d>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	4628      	mov	r0, r5
 8007712:	4639      	mov	r1, r7
 8007714:	f7f8 fd28 	bl	8000168 <__aeabi_dsub>
 8007718:	460b      	mov	r3, r1
 800771a:	4602      	mov	r2, r0
 800771c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007720:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007726:	ea4a 0a08 	orr.w	sl, sl, r8
 800772a:	ea5a 0a03 	orrs.w	sl, sl, r3
 800772e:	d06c      	beq.n	800780a <_strtod_l+0xbaa>
 8007730:	a309      	add	r3, pc, #36	; (adr r3, 8007758 <_strtod_l+0xaf8>)
 8007732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007736:	f7f9 f941 	bl	80009bc <__aeabi_dcmplt>
 800773a:	2800      	cmp	r0, #0
 800773c:	f47f acd8 	bne.w	80070f0 <_strtod_l+0x490>
 8007740:	a307      	add	r3, pc, #28	; (adr r3, 8007760 <_strtod_l+0xb00>)
 8007742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007746:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800774a:	f7f9 f955 	bl	80009f8 <__aeabi_dcmpgt>
 800774e:	2800      	cmp	r0, #0
 8007750:	d08c      	beq.n	800766c <_strtod_l+0xa0c>
 8007752:	e4cd      	b.n	80070f0 <_strtod_l+0x490>
 8007754:	f3af 8000 	nop.w
 8007758:	94a03595 	.word	0x94a03595
 800775c:	3fdfffff 	.word	0x3fdfffff
 8007760:	35afe535 	.word	0x35afe535
 8007764:	3fe00000 	.word	0x3fe00000
 8007768:	000fffff 	.word	0x000fffff
 800776c:	7ff00000 	.word	0x7ff00000
 8007770:	7fefffff 	.word	0x7fefffff
 8007774:	3ff00000 	.word	0x3ff00000
 8007778:	3fe00000 	.word	0x3fe00000
 800777c:	7fe00000 	.word	0x7fe00000
 8007780:	7c9fffff 	.word	0x7c9fffff
 8007784:	bff00000 	.word	0xbff00000
 8007788:	9b05      	ldr	r3, [sp, #20]
 800778a:	b333      	cbz	r3, 80077da <_strtod_l+0xb7a>
 800778c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800778e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007792:	d822      	bhi.n	80077da <_strtod_l+0xb7a>
 8007794:	a328      	add	r3, pc, #160	; (adr r3, 8007838 <_strtod_l+0xbd8>)
 8007796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779a:	4628      	mov	r0, r5
 800779c:	4639      	mov	r1, r7
 800779e:	f7f9 f917 	bl	80009d0 <__aeabi_dcmple>
 80077a2:	b1a0      	cbz	r0, 80077ce <_strtod_l+0xb6e>
 80077a4:	4639      	mov	r1, r7
 80077a6:	4628      	mov	r0, r5
 80077a8:	f7f9 f96e 	bl	8000a88 <__aeabi_d2uiz>
 80077ac:	2801      	cmp	r0, #1
 80077ae:	bf38      	it	cc
 80077b0:	2001      	movcc	r0, #1
 80077b2:	f7f8 fe17 	bl	80003e4 <__aeabi_ui2d>
 80077b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b8:	4605      	mov	r5, r0
 80077ba:	460f      	mov	r7, r1
 80077bc:	bb03      	cbnz	r3, 8007800 <_strtod_l+0xba0>
 80077be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077c2:	9014      	str	r0, [sp, #80]	; 0x50
 80077c4:	9315      	str	r3, [sp, #84]	; 0x54
 80077c6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80077ca:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80077ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80077d2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80077d6:	1a9b      	subs	r3, r3, r2
 80077d8:	9311      	str	r3, [sp, #68]	; 0x44
 80077da:	980c      	ldr	r0, [sp, #48]	; 0x30
 80077dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80077de:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80077e2:	f7ff f8e9 	bl	80069b8 <__ulp>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	4640      	mov	r0, r8
 80077ec:	4649      	mov	r1, r9
 80077ee:	f7f8 fe73 	bl	80004d8 <__aeabi_dmul>
 80077f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077f6:	f7f8 fcb9 	bl	800016c <__adddf3>
 80077fa:	4680      	mov	r8, r0
 80077fc:	4689      	mov	r9, r1
 80077fe:	e774      	b.n	80076ea <_strtod_l+0xa8a>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007808:	e7dd      	b.n	80077c6 <_strtod_l+0xb66>
 800780a:	a30d      	add	r3, pc, #52	; (adr r3, 8007840 <_strtod_l+0xbe0>)
 800780c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007810:	f7f9 f8d4 	bl	80009bc <__aeabi_dcmplt>
 8007814:	e79b      	b.n	800774e <_strtod_l+0xaee>
 8007816:	2300      	movs	r3, #0
 8007818:	930e      	str	r3, [sp, #56]	; 0x38
 800781a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800781c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800781e:	6013      	str	r3, [r2, #0]
 8007820:	f7ff ba5b 	b.w	8006cda <_strtod_l+0x7a>
 8007824:	2a65      	cmp	r2, #101	; 0x65
 8007826:	f43f ab52 	beq.w	8006ece <_strtod_l+0x26e>
 800782a:	2a45      	cmp	r2, #69	; 0x45
 800782c:	f43f ab4f 	beq.w	8006ece <_strtod_l+0x26e>
 8007830:	2301      	movs	r3, #1
 8007832:	f7ff bb87 	b.w	8006f44 <_strtod_l+0x2e4>
 8007836:	bf00      	nop
 8007838:	ffc00000 	.word	0xffc00000
 800783c:	41dfffff 	.word	0x41dfffff
 8007840:	94a03595 	.word	0x94a03595
 8007844:	3fcfffff 	.word	0x3fcfffff

08007848 <_strtod_r>:
 8007848:	4b01      	ldr	r3, [pc, #4]	; (8007850 <_strtod_r+0x8>)
 800784a:	f7ff ba09 	b.w	8006c60 <_strtod_l>
 800784e:	bf00      	nop
 8007850:	20000078 	.word	0x20000078

08007854 <_strtol_l.constprop.0>:
 8007854:	2b01      	cmp	r3, #1
 8007856:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800785a:	4686      	mov	lr, r0
 800785c:	4690      	mov	r8, r2
 800785e:	d001      	beq.n	8007864 <_strtol_l.constprop.0+0x10>
 8007860:	2b24      	cmp	r3, #36	; 0x24
 8007862:	d906      	bls.n	8007872 <_strtol_l.constprop.0+0x1e>
 8007864:	f7fd fd92 	bl	800538c <__errno>
 8007868:	2316      	movs	r3, #22
 800786a:	6003      	str	r3, [r0, #0]
 800786c:	2000      	movs	r0, #0
 800786e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007872:	460d      	mov	r5, r1
 8007874:	4835      	ldr	r0, [pc, #212]	; (800794c <_strtol_l.constprop.0+0xf8>)
 8007876:	462a      	mov	r2, r5
 8007878:	f815 4b01 	ldrb.w	r4, [r5], #1
 800787c:	5d06      	ldrb	r6, [r0, r4]
 800787e:	f016 0608 	ands.w	r6, r6, #8
 8007882:	d1f8      	bne.n	8007876 <_strtol_l.constprop.0+0x22>
 8007884:	2c2d      	cmp	r4, #45	; 0x2d
 8007886:	d12e      	bne.n	80078e6 <_strtol_l.constprop.0+0x92>
 8007888:	2601      	movs	r6, #1
 800788a:	782c      	ldrb	r4, [r5, #0]
 800788c:	1c95      	adds	r5, r2, #2
 800788e:	2b00      	cmp	r3, #0
 8007890:	d057      	beq.n	8007942 <_strtol_l.constprop.0+0xee>
 8007892:	2b10      	cmp	r3, #16
 8007894:	d109      	bne.n	80078aa <_strtol_l.constprop.0+0x56>
 8007896:	2c30      	cmp	r4, #48	; 0x30
 8007898:	d107      	bne.n	80078aa <_strtol_l.constprop.0+0x56>
 800789a:	782a      	ldrb	r2, [r5, #0]
 800789c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80078a0:	2a58      	cmp	r2, #88	; 0x58
 80078a2:	d149      	bne.n	8007938 <_strtol_l.constprop.0+0xe4>
 80078a4:	2310      	movs	r3, #16
 80078a6:	786c      	ldrb	r4, [r5, #1]
 80078a8:	3502      	adds	r5, #2
 80078aa:	2200      	movs	r2, #0
 80078ac:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80078b0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80078b4:	fbbc f9f3 	udiv	r9, ip, r3
 80078b8:	4610      	mov	r0, r2
 80078ba:	fb03 ca19 	mls	sl, r3, r9, ip
 80078be:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80078c2:	2f09      	cmp	r7, #9
 80078c4:	d814      	bhi.n	80078f0 <_strtol_l.constprop.0+0x9c>
 80078c6:	463c      	mov	r4, r7
 80078c8:	42a3      	cmp	r3, r4
 80078ca:	dd20      	ble.n	800790e <_strtol_l.constprop.0+0xba>
 80078cc:	1c57      	adds	r7, r2, #1
 80078ce:	d007      	beq.n	80078e0 <_strtol_l.constprop.0+0x8c>
 80078d0:	4581      	cmp	r9, r0
 80078d2:	d319      	bcc.n	8007908 <_strtol_l.constprop.0+0xb4>
 80078d4:	d101      	bne.n	80078da <_strtol_l.constprop.0+0x86>
 80078d6:	45a2      	cmp	sl, r4
 80078d8:	db16      	blt.n	8007908 <_strtol_l.constprop.0+0xb4>
 80078da:	2201      	movs	r2, #1
 80078dc:	fb00 4003 	mla	r0, r0, r3, r4
 80078e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078e4:	e7eb      	b.n	80078be <_strtol_l.constprop.0+0x6a>
 80078e6:	2c2b      	cmp	r4, #43	; 0x2b
 80078e8:	bf04      	itt	eq
 80078ea:	782c      	ldrbeq	r4, [r5, #0]
 80078ec:	1c95      	addeq	r5, r2, #2
 80078ee:	e7ce      	b.n	800788e <_strtol_l.constprop.0+0x3a>
 80078f0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80078f4:	2f19      	cmp	r7, #25
 80078f6:	d801      	bhi.n	80078fc <_strtol_l.constprop.0+0xa8>
 80078f8:	3c37      	subs	r4, #55	; 0x37
 80078fa:	e7e5      	b.n	80078c8 <_strtol_l.constprop.0+0x74>
 80078fc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007900:	2f19      	cmp	r7, #25
 8007902:	d804      	bhi.n	800790e <_strtol_l.constprop.0+0xba>
 8007904:	3c57      	subs	r4, #87	; 0x57
 8007906:	e7df      	b.n	80078c8 <_strtol_l.constprop.0+0x74>
 8007908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800790c:	e7e8      	b.n	80078e0 <_strtol_l.constprop.0+0x8c>
 800790e:	1c53      	adds	r3, r2, #1
 8007910:	d108      	bne.n	8007924 <_strtol_l.constprop.0+0xd0>
 8007912:	2322      	movs	r3, #34	; 0x22
 8007914:	4660      	mov	r0, ip
 8007916:	f8ce 3000 	str.w	r3, [lr]
 800791a:	f1b8 0f00 	cmp.w	r8, #0
 800791e:	d0a6      	beq.n	800786e <_strtol_l.constprop.0+0x1a>
 8007920:	1e69      	subs	r1, r5, #1
 8007922:	e006      	b.n	8007932 <_strtol_l.constprop.0+0xde>
 8007924:	b106      	cbz	r6, 8007928 <_strtol_l.constprop.0+0xd4>
 8007926:	4240      	negs	r0, r0
 8007928:	f1b8 0f00 	cmp.w	r8, #0
 800792c:	d09f      	beq.n	800786e <_strtol_l.constprop.0+0x1a>
 800792e:	2a00      	cmp	r2, #0
 8007930:	d1f6      	bne.n	8007920 <_strtol_l.constprop.0+0xcc>
 8007932:	f8c8 1000 	str.w	r1, [r8]
 8007936:	e79a      	b.n	800786e <_strtol_l.constprop.0+0x1a>
 8007938:	2430      	movs	r4, #48	; 0x30
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1b5      	bne.n	80078aa <_strtol_l.constprop.0+0x56>
 800793e:	2308      	movs	r3, #8
 8007940:	e7b3      	b.n	80078aa <_strtol_l.constprop.0+0x56>
 8007942:	2c30      	cmp	r4, #48	; 0x30
 8007944:	d0a9      	beq.n	800789a <_strtol_l.constprop.0+0x46>
 8007946:	230a      	movs	r3, #10
 8007948:	e7af      	b.n	80078aa <_strtol_l.constprop.0+0x56>
 800794a:	bf00      	nop
 800794c:	0800aed9 	.word	0x0800aed9

08007950 <_strtol_r>:
 8007950:	f7ff bf80 	b.w	8007854 <_strtol_l.constprop.0>

08007954 <__ssputs_r>:
 8007954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007958:	461f      	mov	r7, r3
 800795a:	688e      	ldr	r6, [r1, #8]
 800795c:	4682      	mov	sl, r0
 800795e:	42be      	cmp	r6, r7
 8007960:	460c      	mov	r4, r1
 8007962:	4690      	mov	r8, r2
 8007964:	680b      	ldr	r3, [r1, #0]
 8007966:	d82c      	bhi.n	80079c2 <__ssputs_r+0x6e>
 8007968:	898a      	ldrh	r2, [r1, #12]
 800796a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800796e:	d026      	beq.n	80079be <__ssputs_r+0x6a>
 8007970:	6965      	ldr	r5, [r4, #20]
 8007972:	6909      	ldr	r1, [r1, #16]
 8007974:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007978:	eba3 0901 	sub.w	r9, r3, r1
 800797c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007980:	1c7b      	adds	r3, r7, #1
 8007982:	444b      	add	r3, r9
 8007984:	106d      	asrs	r5, r5, #1
 8007986:	429d      	cmp	r5, r3
 8007988:	bf38      	it	cc
 800798a:	461d      	movcc	r5, r3
 800798c:	0553      	lsls	r3, r2, #21
 800798e:	d527      	bpl.n	80079e0 <__ssputs_r+0x8c>
 8007990:	4629      	mov	r1, r5
 8007992:	f7fe fc19 	bl	80061c8 <_malloc_r>
 8007996:	4606      	mov	r6, r0
 8007998:	b360      	cbz	r0, 80079f4 <__ssputs_r+0xa0>
 800799a:	464a      	mov	r2, r9
 800799c:	6921      	ldr	r1, [r4, #16]
 800799e:	f000 fa17 	bl	8007dd0 <memcpy>
 80079a2:	89a3      	ldrh	r3, [r4, #12]
 80079a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ac:	81a3      	strh	r3, [r4, #12]
 80079ae:	6126      	str	r6, [r4, #16]
 80079b0:	444e      	add	r6, r9
 80079b2:	6026      	str	r6, [r4, #0]
 80079b4:	463e      	mov	r6, r7
 80079b6:	6165      	str	r5, [r4, #20]
 80079b8:	eba5 0509 	sub.w	r5, r5, r9
 80079bc:	60a5      	str	r5, [r4, #8]
 80079be:	42be      	cmp	r6, r7
 80079c0:	d900      	bls.n	80079c4 <__ssputs_r+0x70>
 80079c2:	463e      	mov	r6, r7
 80079c4:	4632      	mov	r2, r6
 80079c6:	4641      	mov	r1, r8
 80079c8:	6820      	ldr	r0, [r4, #0]
 80079ca:	f000 f9c5 	bl	8007d58 <memmove>
 80079ce:	2000      	movs	r0, #0
 80079d0:	68a3      	ldr	r3, [r4, #8]
 80079d2:	1b9b      	subs	r3, r3, r6
 80079d4:	60a3      	str	r3, [r4, #8]
 80079d6:	6823      	ldr	r3, [r4, #0]
 80079d8:	4433      	add	r3, r6
 80079da:	6023      	str	r3, [r4, #0]
 80079dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079e0:	462a      	mov	r2, r5
 80079e2:	f000 fda6 	bl	8008532 <_realloc_r>
 80079e6:	4606      	mov	r6, r0
 80079e8:	2800      	cmp	r0, #0
 80079ea:	d1e0      	bne.n	80079ae <__ssputs_r+0x5a>
 80079ec:	4650      	mov	r0, sl
 80079ee:	6921      	ldr	r1, [r4, #16]
 80079f0:	f7fe fb7a 	bl	80060e8 <_free_r>
 80079f4:	230c      	movs	r3, #12
 80079f6:	f8ca 3000 	str.w	r3, [sl]
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a04:	81a3      	strh	r3, [r4, #12]
 8007a06:	e7e9      	b.n	80079dc <__ssputs_r+0x88>

08007a08 <_svfiprintf_r>:
 8007a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0c:	4698      	mov	r8, r3
 8007a0e:	898b      	ldrh	r3, [r1, #12]
 8007a10:	4607      	mov	r7, r0
 8007a12:	061b      	lsls	r3, r3, #24
 8007a14:	460d      	mov	r5, r1
 8007a16:	4614      	mov	r4, r2
 8007a18:	b09d      	sub	sp, #116	; 0x74
 8007a1a:	d50e      	bpl.n	8007a3a <_svfiprintf_r+0x32>
 8007a1c:	690b      	ldr	r3, [r1, #16]
 8007a1e:	b963      	cbnz	r3, 8007a3a <_svfiprintf_r+0x32>
 8007a20:	2140      	movs	r1, #64	; 0x40
 8007a22:	f7fe fbd1 	bl	80061c8 <_malloc_r>
 8007a26:	6028      	str	r0, [r5, #0]
 8007a28:	6128      	str	r0, [r5, #16]
 8007a2a:	b920      	cbnz	r0, 8007a36 <_svfiprintf_r+0x2e>
 8007a2c:	230c      	movs	r3, #12
 8007a2e:	603b      	str	r3, [r7, #0]
 8007a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a34:	e0d0      	b.n	8007bd8 <_svfiprintf_r+0x1d0>
 8007a36:	2340      	movs	r3, #64	; 0x40
 8007a38:	616b      	str	r3, [r5, #20]
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a3e:	2320      	movs	r3, #32
 8007a40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a44:	2330      	movs	r3, #48	; 0x30
 8007a46:	f04f 0901 	mov.w	r9, #1
 8007a4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a4e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007bf0 <_svfiprintf_r+0x1e8>
 8007a52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a56:	4623      	mov	r3, r4
 8007a58:	469a      	mov	sl, r3
 8007a5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a5e:	b10a      	cbz	r2, 8007a64 <_svfiprintf_r+0x5c>
 8007a60:	2a25      	cmp	r2, #37	; 0x25
 8007a62:	d1f9      	bne.n	8007a58 <_svfiprintf_r+0x50>
 8007a64:	ebba 0b04 	subs.w	fp, sl, r4
 8007a68:	d00b      	beq.n	8007a82 <_svfiprintf_r+0x7a>
 8007a6a:	465b      	mov	r3, fp
 8007a6c:	4622      	mov	r2, r4
 8007a6e:	4629      	mov	r1, r5
 8007a70:	4638      	mov	r0, r7
 8007a72:	f7ff ff6f 	bl	8007954 <__ssputs_r>
 8007a76:	3001      	adds	r0, #1
 8007a78:	f000 80a9 	beq.w	8007bce <_svfiprintf_r+0x1c6>
 8007a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a7e:	445a      	add	r2, fp
 8007a80:	9209      	str	r2, [sp, #36]	; 0x24
 8007a82:	f89a 3000 	ldrb.w	r3, [sl]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 80a1 	beq.w	8007bce <_svfiprintf_r+0x1c6>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a96:	f10a 0a01 	add.w	sl, sl, #1
 8007a9a:	9304      	str	r3, [sp, #16]
 8007a9c:	9307      	str	r3, [sp, #28]
 8007a9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007aa2:	931a      	str	r3, [sp, #104]	; 0x68
 8007aa4:	4654      	mov	r4, sl
 8007aa6:	2205      	movs	r2, #5
 8007aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aac:	4850      	ldr	r0, [pc, #320]	; (8007bf0 <_svfiprintf_r+0x1e8>)
 8007aae:	f7fd fc99 	bl	80053e4 <memchr>
 8007ab2:	9a04      	ldr	r2, [sp, #16]
 8007ab4:	b9d8      	cbnz	r0, 8007aee <_svfiprintf_r+0xe6>
 8007ab6:	06d0      	lsls	r0, r2, #27
 8007ab8:	bf44      	itt	mi
 8007aba:	2320      	movmi	r3, #32
 8007abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ac0:	0711      	lsls	r1, r2, #28
 8007ac2:	bf44      	itt	mi
 8007ac4:	232b      	movmi	r3, #43	; 0x2b
 8007ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aca:	f89a 3000 	ldrb.w	r3, [sl]
 8007ace:	2b2a      	cmp	r3, #42	; 0x2a
 8007ad0:	d015      	beq.n	8007afe <_svfiprintf_r+0xf6>
 8007ad2:	4654      	mov	r4, sl
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	f04f 0c0a 	mov.w	ip, #10
 8007ada:	9a07      	ldr	r2, [sp, #28]
 8007adc:	4621      	mov	r1, r4
 8007ade:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ae2:	3b30      	subs	r3, #48	; 0x30
 8007ae4:	2b09      	cmp	r3, #9
 8007ae6:	d94d      	bls.n	8007b84 <_svfiprintf_r+0x17c>
 8007ae8:	b1b0      	cbz	r0, 8007b18 <_svfiprintf_r+0x110>
 8007aea:	9207      	str	r2, [sp, #28]
 8007aec:	e014      	b.n	8007b18 <_svfiprintf_r+0x110>
 8007aee:	eba0 0308 	sub.w	r3, r0, r8
 8007af2:	fa09 f303 	lsl.w	r3, r9, r3
 8007af6:	4313      	orrs	r3, r2
 8007af8:	46a2      	mov	sl, r4
 8007afa:	9304      	str	r3, [sp, #16]
 8007afc:	e7d2      	b.n	8007aa4 <_svfiprintf_r+0x9c>
 8007afe:	9b03      	ldr	r3, [sp, #12]
 8007b00:	1d19      	adds	r1, r3, #4
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	9103      	str	r1, [sp, #12]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bfbb      	ittet	lt
 8007b0a:	425b      	neglt	r3, r3
 8007b0c:	f042 0202 	orrlt.w	r2, r2, #2
 8007b10:	9307      	strge	r3, [sp, #28]
 8007b12:	9307      	strlt	r3, [sp, #28]
 8007b14:	bfb8      	it	lt
 8007b16:	9204      	strlt	r2, [sp, #16]
 8007b18:	7823      	ldrb	r3, [r4, #0]
 8007b1a:	2b2e      	cmp	r3, #46	; 0x2e
 8007b1c:	d10c      	bne.n	8007b38 <_svfiprintf_r+0x130>
 8007b1e:	7863      	ldrb	r3, [r4, #1]
 8007b20:	2b2a      	cmp	r3, #42	; 0x2a
 8007b22:	d134      	bne.n	8007b8e <_svfiprintf_r+0x186>
 8007b24:	9b03      	ldr	r3, [sp, #12]
 8007b26:	3402      	adds	r4, #2
 8007b28:	1d1a      	adds	r2, r3, #4
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	9203      	str	r2, [sp, #12]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	bfb8      	it	lt
 8007b32:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007b36:	9305      	str	r3, [sp, #20]
 8007b38:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007bf4 <_svfiprintf_r+0x1ec>
 8007b3c:	2203      	movs	r2, #3
 8007b3e:	4650      	mov	r0, sl
 8007b40:	7821      	ldrb	r1, [r4, #0]
 8007b42:	f7fd fc4f 	bl	80053e4 <memchr>
 8007b46:	b138      	cbz	r0, 8007b58 <_svfiprintf_r+0x150>
 8007b48:	2240      	movs	r2, #64	; 0x40
 8007b4a:	9b04      	ldr	r3, [sp, #16]
 8007b4c:	eba0 000a 	sub.w	r0, r0, sl
 8007b50:	4082      	lsls	r2, r0
 8007b52:	4313      	orrs	r3, r2
 8007b54:	3401      	adds	r4, #1
 8007b56:	9304      	str	r3, [sp, #16]
 8007b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b5c:	2206      	movs	r2, #6
 8007b5e:	4826      	ldr	r0, [pc, #152]	; (8007bf8 <_svfiprintf_r+0x1f0>)
 8007b60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b64:	f7fd fc3e 	bl	80053e4 <memchr>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	d038      	beq.n	8007bde <_svfiprintf_r+0x1d6>
 8007b6c:	4b23      	ldr	r3, [pc, #140]	; (8007bfc <_svfiprintf_r+0x1f4>)
 8007b6e:	bb1b      	cbnz	r3, 8007bb8 <_svfiprintf_r+0x1b0>
 8007b70:	9b03      	ldr	r3, [sp, #12]
 8007b72:	3307      	adds	r3, #7
 8007b74:	f023 0307 	bic.w	r3, r3, #7
 8007b78:	3308      	adds	r3, #8
 8007b7a:	9303      	str	r3, [sp, #12]
 8007b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b7e:	4433      	add	r3, r6
 8007b80:	9309      	str	r3, [sp, #36]	; 0x24
 8007b82:	e768      	b.n	8007a56 <_svfiprintf_r+0x4e>
 8007b84:	460c      	mov	r4, r1
 8007b86:	2001      	movs	r0, #1
 8007b88:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b8c:	e7a6      	b.n	8007adc <_svfiprintf_r+0xd4>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	f04f 0c0a 	mov.w	ip, #10
 8007b94:	4619      	mov	r1, r3
 8007b96:	3401      	adds	r4, #1
 8007b98:	9305      	str	r3, [sp, #20]
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ba0:	3a30      	subs	r2, #48	; 0x30
 8007ba2:	2a09      	cmp	r2, #9
 8007ba4:	d903      	bls.n	8007bae <_svfiprintf_r+0x1a6>
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d0c6      	beq.n	8007b38 <_svfiprintf_r+0x130>
 8007baa:	9105      	str	r1, [sp, #20]
 8007bac:	e7c4      	b.n	8007b38 <_svfiprintf_r+0x130>
 8007bae:	4604      	mov	r4, r0
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bb6:	e7f0      	b.n	8007b9a <_svfiprintf_r+0x192>
 8007bb8:	ab03      	add	r3, sp, #12
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	462a      	mov	r2, r5
 8007bbe:	4638      	mov	r0, r7
 8007bc0:	4b0f      	ldr	r3, [pc, #60]	; (8007c00 <_svfiprintf_r+0x1f8>)
 8007bc2:	a904      	add	r1, sp, #16
 8007bc4:	f7fc fcac 	bl	8004520 <_printf_float>
 8007bc8:	1c42      	adds	r2, r0, #1
 8007bca:	4606      	mov	r6, r0
 8007bcc:	d1d6      	bne.n	8007b7c <_svfiprintf_r+0x174>
 8007bce:	89ab      	ldrh	r3, [r5, #12]
 8007bd0:	065b      	lsls	r3, r3, #25
 8007bd2:	f53f af2d 	bmi.w	8007a30 <_svfiprintf_r+0x28>
 8007bd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bd8:	b01d      	add	sp, #116	; 0x74
 8007bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bde:	ab03      	add	r3, sp, #12
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	462a      	mov	r2, r5
 8007be4:	4638      	mov	r0, r7
 8007be6:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <_svfiprintf_r+0x1f8>)
 8007be8:	a904      	add	r1, sp, #16
 8007bea:	f7fc ff39 	bl	8004a60 <_printf_i>
 8007bee:	e7eb      	b.n	8007bc8 <_svfiprintf_r+0x1c0>
 8007bf0:	0800afd9 	.word	0x0800afd9
 8007bf4:	0800afdf 	.word	0x0800afdf
 8007bf8:	0800afe3 	.word	0x0800afe3
 8007bfc:	08004521 	.word	0x08004521
 8007c00:	08007955 	.word	0x08007955

08007c04 <__sflush_r>:
 8007c04:	898a      	ldrh	r2, [r1, #12]
 8007c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c08:	4605      	mov	r5, r0
 8007c0a:	0710      	lsls	r0, r2, #28
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	d457      	bmi.n	8007cc0 <__sflush_r+0xbc>
 8007c10:	684b      	ldr	r3, [r1, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	dc04      	bgt.n	8007c20 <__sflush_r+0x1c>
 8007c16:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	dc01      	bgt.n	8007c20 <__sflush_r+0x1c>
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c22:	2e00      	cmp	r6, #0
 8007c24:	d0fa      	beq.n	8007c1c <__sflush_r+0x18>
 8007c26:	2300      	movs	r3, #0
 8007c28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c2c:	682f      	ldr	r7, [r5, #0]
 8007c2e:	6a21      	ldr	r1, [r4, #32]
 8007c30:	602b      	str	r3, [r5, #0]
 8007c32:	d032      	beq.n	8007c9a <__sflush_r+0x96>
 8007c34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c36:	89a3      	ldrh	r3, [r4, #12]
 8007c38:	075a      	lsls	r2, r3, #29
 8007c3a:	d505      	bpl.n	8007c48 <__sflush_r+0x44>
 8007c3c:	6863      	ldr	r3, [r4, #4]
 8007c3e:	1ac0      	subs	r0, r0, r3
 8007c40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c42:	b10b      	cbz	r3, 8007c48 <__sflush_r+0x44>
 8007c44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c46:	1ac0      	subs	r0, r0, r3
 8007c48:	2300      	movs	r3, #0
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c4e:	4628      	mov	r0, r5
 8007c50:	6a21      	ldr	r1, [r4, #32]
 8007c52:	47b0      	blx	r6
 8007c54:	1c43      	adds	r3, r0, #1
 8007c56:	89a3      	ldrh	r3, [r4, #12]
 8007c58:	d106      	bne.n	8007c68 <__sflush_r+0x64>
 8007c5a:	6829      	ldr	r1, [r5, #0]
 8007c5c:	291d      	cmp	r1, #29
 8007c5e:	d82b      	bhi.n	8007cb8 <__sflush_r+0xb4>
 8007c60:	4a28      	ldr	r2, [pc, #160]	; (8007d04 <__sflush_r+0x100>)
 8007c62:	410a      	asrs	r2, r1
 8007c64:	07d6      	lsls	r6, r2, #31
 8007c66:	d427      	bmi.n	8007cb8 <__sflush_r+0xb4>
 8007c68:	2200      	movs	r2, #0
 8007c6a:	6062      	str	r2, [r4, #4]
 8007c6c:	6922      	ldr	r2, [r4, #16]
 8007c6e:	04d9      	lsls	r1, r3, #19
 8007c70:	6022      	str	r2, [r4, #0]
 8007c72:	d504      	bpl.n	8007c7e <__sflush_r+0x7a>
 8007c74:	1c42      	adds	r2, r0, #1
 8007c76:	d101      	bne.n	8007c7c <__sflush_r+0x78>
 8007c78:	682b      	ldr	r3, [r5, #0]
 8007c7a:	b903      	cbnz	r3, 8007c7e <__sflush_r+0x7a>
 8007c7c:	6560      	str	r0, [r4, #84]	; 0x54
 8007c7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c80:	602f      	str	r7, [r5, #0]
 8007c82:	2900      	cmp	r1, #0
 8007c84:	d0ca      	beq.n	8007c1c <__sflush_r+0x18>
 8007c86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c8a:	4299      	cmp	r1, r3
 8007c8c:	d002      	beq.n	8007c94 <__sflush_r+0x90>
 8007c8e:	4628      	mov	r0, r5
 8007c90:	f7fe fa2a 	bl	80060e8 <_free_r>
 8007c94:	2000      	movs	r0, #0
 8007c96:	6360      	str	r0, [r4, #52]	; 0x34
 8007c98:	e7c1      	b.n	8007c1e <__sflush_r+0x1a>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	47b0      	blx	r6
 8007ca0:	1c41      	adds	r1, r0, #1
 8007ca2:	d1c8      	bne.n	8007c36 <__sflush_r+0x32>
 8007ca4:	682b      	ldr	r3, [r5, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d0c5      	beq.n	8007c36 <__sflush_r+0x32>
 8007caa:	2b1d      	cmp	r3, #29
 8007cac:	d001      	beq.n	8007cb2 <__sflush_r+0xae>
 8007cae:	2b16      	cmp	r3, #22
 8007cb0:	d101      	bne.n	8007cb6 <__sflush_r+0xb2>
 8007cb2:	602f      	str	r7, [r5, #0]
 8007cb4:	e7b2      	b.n	8007c1c <__sflush_r+0x18>
 8007cb6:	89a3      	ldrh	r3, [r4, #12]
 8007cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cbc:	81a3      	strh	r3, [r4, #12]
 8007cbe:	e7ae      	b.n	8007c1e <__sflush_r+0x1a>
 8007cc0:	690f      	ldr	r7, [r1, #16]
 8007cc2:	2f00      	cmp	r7, #0
 8007cc4:	d0aa      	beq.n	8007c1c <__sflush_r+0x18>
 8007cc6:	0793      	lsls	r3, r2, #30
 8007cc8:	bf18      	it	ne
 8007cca:	2300      	movne	r3, #0
 8007ccc:	680e      	ldr	r6, [r1, #0]
 8007cce:	bf08      	it	eq
 8007cd0:	694b      	ldreq	r3, [r1, #20]
 8007cd2:	1bf6      	subs	r6, r6, r7
 8007cd4:	600f      	str	r7, [r1, #0]
 8007cd6:	608b      	str	r3, [r1, #8]
 8007cd8:	2e00      	cmp	r6, #0
 8007cda:	dd9f      	ble.n	8007c1c <__sflush_r+0x18>
 8007cdc:	4633      	mov	r3, r6
 8007cde:	463a      	mov	r2, r7
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	6a21      	ldr	r1, [r4, #32]
 8007ce4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007ce8:	47e0      	blx	ip
 8007cea:	2800      	cmp	r0, #0
 8007cec:	dc06      	bgt.n	8007cfc <__sflush_r+0xf8>
 8007cee:	89a3      	ldrh	r3, [r4, #12]
 8007cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cf8:	81a3      	strh	r3, [r4, #12]
 8007cfa:	e790      	b.n	8007c1e <__sflush_r+0x1a>
 8007cfc:	4407      	add	r7, r0
 8007cfe:	1a36      	subs	r6, r6, r0
 8007d00:	e7ea      	b.n	8007cd8 <__sflush_r+0xd4>
 8007d02:	bf00      	nop
 8007d04:	dfbffffe 	.word	0xdfbffffe

08007d08 <_fflush_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	690b      	ldr	r3, [r1, #16]
 8007d0c:	4605      	mov	r5, r0
 8007d0e:	460c      	mov	r4, r1
 8007d10:	b913      	cbnz	r3, 8007d18 <_fflush_r+0x10>
 8007d12:	2500      	movs	r5, #0
 8007d14:	4628      	mov	r0, r5
 8007d16:	bd38      	pop	{r3, r4, r5, pc}
 8007d18:	b118      	cbz	r0, 8007d22 <_fflush_r+0x1a>
 8007d1a:	6a03      	ldr	r3, [r0, #32]
 8007d1c:	b90b      	cbnz	r3, 8007d22 <_fflush_r+0x1a>
 8007d1e:	f7fd fa49 	bl	80051b4 <__sinit>
 8007d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d0f3      	beq.n	8007d12 <_fflush_r+0xa>
 8007d2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d2c:	07d0      	lsls	r0, r2, #31
 8007d2e:	d404      	bmi.n	8007d3a <_fflush_r+0x32>
 8007d30:	0599      	lsls	r1, r3, #22
 8007d32:	d402      	bmi.n	8007d3a <_fflush_r+0x32>
 8007d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d36:	f7fd fb53 	bl	80053e0 <__retarget_lock_acquire_recursive>
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	4621      	mov	r1, r4
 8007d3e:	f7ff ff61 	bl	8007c04 <__sflush_r>
 8007d42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d44:	4605      	mov	r5, r0
 8007d46:	07da      	lsls	r2, r3, #31
 8007d48:	d4e4      	bmi.n	8007d14 <_fflush_r+0xc>
 8007d4a:	89a3      	ldrh	r3, [r4, #12]
 8007d4c:	059b      	lsls	r3, r3, #22
 8007d4e:	d4e1      	bmi.n	8007d14 <_fflush_r+0xc>
 8007d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d52:	f7fd fb46 	bl	80053e2 <__retarget_lock_release_recursive>
 8007d56:	e7dd      	b.n	8007d14 <_fflush_r+0xc>

08007d58 <memmove>:
 8007d58:	4288      	cmp	r0, r1
 8007d5a:	b510      	push	{r4, lr}
 8007d5c:	eb01 0402 	add.w	r4, r1, r2
 8007d60:	d902      	bls.n	8007d68 <memmove+0x10>
 8007d62:	4284      	cmp	r4, r0
 8007d64:	4623      	mov	r3, r4
 8007d66:	d807      	bhi.n	8007d78 <memmove+0x20>
 8007d68:	1e43      	subs	r3, r0, #1
 8007d6a:	42a1      	cmp	r1, r4
 8007d6c:	d008      	beq.n	8007d80 <memmove+0x28>
 8007d6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d76:	e7f8      	b.n	8007d6a <memmove+0x12>
 8007d78:	4601      	mov	r1, r0
 8007d7a:	4402      	add	r2, r0
 8007d7c:	428a      	cmp	r2, r1
 8007d7e:	d100      	bne.n	8007d82 <memmove+0x2a>
 8007d80:	bd10      	pop	{r4, pc}
 8007d82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d8a:	e7f7      	b.n	8007d7c <memmove+0x24>

08007d8c <strncmp>:
 8007d8c:	b510      	push	{r4, lr}
 8007d8e:	b16a      	cbz	r2, 8007dac <strncmp+0x20>
 8007d90:	3901      	subs	r1, #1
 8007d92:	1884      	adds	r4, r0, r2
 8007d94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d98:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d103      	bne.n	8007da8 <strncmp+0x1c>
 8007da0:	42a0      	cmp	r0, r4
 8007da2:	d001      	beq.n	8007da8 <strncmp+0x1c>
 8007da4:	2a00      	cmp	r2, #0
 8007da6:	d1f5      	bne.n	8007d94 <strncmp+0x8>
 8007da8:	1ad0      	subs	r0, r2, r3
 8007daa:	bd10      	pop	{r4, pc}
 8007dac:	4610      	mov	r0, r2
 8007dae:	e7fc      	b.n	8007daa <strncmp+0x1e>

08007db0 <_sbrk_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	2300      	movs	r3, #0
 8007db4:	4d05      	ldr	r5, [pc, #20]	; (8007dcc <_sbrk_r+0x1c>)
 8007db6:	4604      	mov	r4, r0
 8007db8:	4608      	mov	r0, r1
 8007dba:	602b      	str	r3, [r5, #0]
 8007dbc:	f7f9 fe76 	bl	8001aac <_sbrk>
 8007dc0:	1c43      	adds	r3, r0, #1
 8007dc2:	d102      	bne.n	8007dca <_sbrk_r+0x1a>
 8007dc4:	682b      	ldr	r3, [r5, #0]
 8007dc6:	b103      	cbz	r3, 8007dca <_sbrk_r+0x1a>
 8007dc8:	6023      	str	r3, [r4, #0]
 8007dca:	bd38      	pop	{r3, r4, r5, pc}
 8007dcc:	20000878 	.word	0x20000878

08007dd0 <memcpy>:
 8007dd0:	440a      	add	r2, r1
 8007dd2:	4291      	cmp	r1, r2
 8007dd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007dd8:	d100      	bne.n	8007ddc <memcpy+0xc>
 8007dda:	4770      	bx	lr
 8007ddc:	b510      	push	{r4, lr}
 8007dde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007de2:	4291      	cmp	r1, r2
 8007de4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007de8:	d1f9      	bne.n	8007dde <memcpy+0xe>
 8007dea:	bd10      	pop	{r4, pc}

08007dec <nan>:
 8007dec:	2000      	movs	r0, #0
 8007dee:	4901      	ldr	r1, [pc, #4]	; (8007df4 <nan+0x8>)
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	7ff80000 	.word	0x7ff80000

08007df8 <__assert_func>:
 8007df8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007dfa:	4614      	mov	r4, r2
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	4b09      	ldr	r3, [pc, #36]	; (8007e24 <__assert_func+0x2c>)
 8007e00:	4605      	mov	r5, r0
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68d8      	ldr	r0, [r3, #12]
 8007e06:	b14c      	cbz	r4, 8007e1c <__assert_func+0x24>
 8007e08:	4b07      	ldr	r3, [pc, #28]	; (8007e28 <__assert_func+0x30>)
 8007e0a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e0e:	9100      	str	r1, [sp, #0]
 8007e10:	462b      	mov	r3, r5
 8007e12:	4906      	ldr	r1, [pc, #24]	; (8007e2c <__assert_func+0x34>)
 8007e14:	f000 fbca 	bl	80085ac <fiprintf>
 8007e18:	f000 fbda 	bl	80085d0 <abort>
 8007e1c:	4b04      	ldr	r3, [pc, #16]	; (8007e30 <__assert_func+0x38>)
 8007e1e:	461c      	mov	r4, r3
 8007e20:	e7f3      	b.n	8007e0a <__assert_func+0x12>
 8007e22:	bf00      	nop
 8007e24:	20000074 	.word	0x20000074
 8007e28:	0800aff2 	.word	0x0800aff2
 8007e2c:	0800afff 	.word	0x0800afff
 8007e30:	0800b02d 	.word	0x0800b02d

08007e34 <_calloc_r>:
 8007e34:	b570      	push	{r4, r5, r6, lr}
 8007e36:	fba1 5402 	umull	r5, r4, r1, r2
 8007e3a:	b934      	cbnz	r4, 8007e4a <_calloc_r+0x16>
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	f7fe f9c3 	bl	80061c8 <_malloc_r>
 8007e42:	4606      	mov	r6, r0
 8007e44:	b928      	cbnz	r0, 8007e52 <_calloc_r+0x1e>
 8007e46:	4630      	mov	r0, r6
 8007e48:	bd70      	pop	{r4, r5, r6, pc}
 8007e4a:	220c      	movs	r2, #12
 8007e4c:	2600      	movs	r6, #0
 8007e4e:	6002      	str	r2, [r0, #0]
 8007e50:	e7f9      	b.n	8007e46 <_calloc_r+0x12>
 8007e52:	462a      	mov	r2, r5
 8007e54:	4621      	mov	r1, r4
 8007e56:	f7fd fa46 	bl	80052e6 <memset>
 8007e5a:	e7f4      	b.n	8007e46 <_calloc_r+0x12>

08007e5c <rshift>:
 8007e5c:	6903      	ldr	r3, [r0, #16]
 8007e5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e62:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007e66:	f100 0414 	add.w	r4, r0, #20
 8007e6a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007e6e:	dd46      	ble.n	8007efe <rshift+0xa2>
 8007e70:	f011 011f 	ands.w	r1, r1, #31
 8007e74:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007e78:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007e7c:	d10c      	bne.n	8007e98 <rshift+0x3c>
 8007e7e:	4629      	mov	r1, r5
 8007e80:	f100 0710 	add.w	r7, r0, #16
 8007e84:	42b1      	cmp	r1, r6
 8007e86:	d335      	bcc.n	8007ef4 <rshift+0x98>
 8007e88:	1a9b      	subs	r3, r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	1eea      	subs	r2, r5, #3
 8007e8e:	4296      	cmp	r6, r2
 8007e90:	bf38      	it	cc
 8007e92:	2300      	movcc	r3, #0
 8007e94:	4423      	add	r3, r4
 8007e96:	e015      	b.n	8007ec4 <rshift+0x68>
 8007e98:	46a1      	mov	r9, r4
 8007e9a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007e9e:	f1c1 0820 	rsb	r8, r1, #32
 8007ea2:	40cf      	lsrs	r7, r1
 8007ea4:	f105 0e04 	add.w	lr, r5, #4
 8007ea8:	4576      	cmp	r6, lr
 8007eaa:	46f4      	mov	ip, lr
 8007eac:	d816      	bhi.n	8007edc <rshift+0x80>
 8007eae:	1a9a      	subs	r2, r3, r2
 8007eb0:	0092      	lsls	r2, r2, #2
 8007eb2:	3a04      	subs	r2, #4
 8007eb4:	3501      	adds	r5, #1
 8007eb6:	42ae      	cmp	r6, r5
 8007eb8:	bf38      	it	cc
 8007eba:	2200      	movcc	r2, #0
 8007ebc:	18a3      	adds	r3, r4, r2
 8007ebe:	50a7      	str	r7, [r4, r2]
 8007ec0:	b107      	cbz	r7, 8007ec4 <rshift+0x68>
 8007ec2:	3304      	adds	r3, #4
 8007ec4:	42a3      	cmp	r3, r4
 8007ec6:	eba3 0204 	sub.w	r2, r3, r4
 8007eca:	bf08      	it	eq
 8007ecc:	2300      	moveq	r3, #0
 8007ece:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007ed2:	6102      	str	r2, [r0, #16]
 8007ed4:	bf08      	it	eq
 8007ed6:	6143      	streq	r3, [r0, #20]
 8007ed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007edc:	f8dc c000 	ldr.w	ip, [ip]
 8007ee0:	fa0c fc08 	lsl.w	ip, ip, r8
 8007ee4:	ea4c 0707 	orr.w	r7, ip, r7
 8007ee8:	f849 7b04 	str.w	r7, [r9], #4
 8007eec:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ef0:	40cf      	lsrs	r7, r1
 8007ef2:	e7d9      	b.n	8007ea8 <rshift+0x4c>
 8007ef4:	f851 cb04 	ldr.w	ip, [r1], #4
 8007ef8:	f847 cf04 	str.w	ip, [r7, #4]!
 8007efc:	e7c2      	b.n	8007e84 <rshift+0x28>
 8007efe:	4623      	mov	r3, r4
 8007f00:	e7e0      	b.n	8007ec4 <rshift+0x68>

08007f02 <__hexdig_fun>:
 8007f02:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007f06:	2b09      	cmp	r3, #9
 8007f08:	d802      	bhi.n	8007f10 <__hexdig_fun+0xe>
 8007f0a:	3820      	subs	r0, #32
 8007f0c:	b2c0      	uxtb	r0, r0
 8007f0e:	4770      	bx	lr
 8007f10:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007f14:	2b05      	cmp	r3, #5
 8007f16:	d801      	bhi.n	8007f1c <__hexdig_fun+0x1a>
 8007f18:	3847      	subs	r0, #71	; 0x47
 8007f1a:	e7f7      	b.n	8007f0c <__hexdig_fun+0xa>
 8007f1c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007f20:	2b05      	cmp	r3, #5
 8007f22:	d801      	bhi.n	8007f28 <__hexdig_fun+0x26>
 8007f24:	3827      	subs	r0, #39	; 0x27
 8007f26:	e7f1      	b.n	8007f0c <__hexdig_fun+0xa>
 8007f28:	2000      	movs	r0, #0
 8007f2a:	4770      	bx	lr

08007f2c <__gethex>:
 8007f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f30:	4681      	mov	r9, r0
 8007f32:	468a      	mov	sl, r1
 8007f34:	4617      	mov	r7, r2
 8007f36:	680a      	ldr	r2, [r1, #0]
 8007f38:	b085      	sub	sp, #20
 8007f3a:	f102 0b02 	add.w	fp, r2, #2
 8007f3e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007f42:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007f46:	9302      	str	r3, [sp, #8]
 8007f48:	32fe      	adds	r2, #254	; 0xfe
 8007f4a:	eb02 030b 	add.w	r3, r2, fp
 8007f4e:	46d8      	mov	r8, fp
 8007f50:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007f54:	9301      	str	r3, [sp, #4]
 8007f56:	2830      	cmp	r0, #48	; 0x30
 8007f58:	d0f7      	beq.n	8007f4a <__gethex+0x1e>
 8007f5a:	f7ff ffd2 	bl	8007f02 <__hexdig_fun>
 8007f5e:	4604      	mov	r4, r0
 8007f60:	2800      	cmp	r0, #0
 8007f62:	d138      	bne.n	8007fd6 <__gethex+0xaa>
 8007f64:	2201      	movs	r2, #1
 8007f66:	4640      	mov	r0, r8
 8007f68:	49a7      	ldr	r1, [pc, #668]	; (8008208 <__gethex+0x2dc>)
 8007f6a:	f7ff ff0f 	bl	8007d8c <strncmp>
 8007f6e:	4606      	mov	r6, r0
 8007f70:	2800      	cmp	r0, #0
 8007f72:	d169      	bne.n	8008048 <__gethex+0x11c>
 8007f74:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007f78:	465d      	mov	r5, fp
 8007f7a:	f7ff ffc2 	bl	8007f02 <__hexdig_fun>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d064      	beq.n	800804c <__gethex+0x120>
 8007f82:	465a      	mov	r2, fp
 8007f84:	7810      	ldrb	r0, [r2, #0]
 8007f86:	4690      	mov	r8, r2
 8007f88:	2830      	cmp	r0, #48	; 0x30
 8007f8a:	f102 0201 	add.w	r2, r2, #1
 8007f8e:	d0f9      	beq.n	8007f84 <__gethex+0x58>
 8007f90:	f7ff ffb7 	bl	8007f02 <__hexdig_fun>
 8007f94:	2301      	movs	r3, #1
 8007f96:	fab0 f480 	clz	r4, r0
 8007f9a:	465e      	mov	r6, fp
 8007f9c:	0964      	lsrs	r4, r4, #5
 8007f9e:	9301      	str	r3, [sp, #4]
 8007fa0:	4642      	mov	r2, r8
 8007fa2:	4615      	mov	r5, r2
 8007fa4:	7828      	ldrb	r0, [r5, #0]
 8007fa6:	3201      	adds	r2, #1
 8007fa8:	f7ff ffab 	bl	8007f02 <__hexdig_fun>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d1f8      	bne.n	8007fa2 <__gethex+0x76>
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	4994      	ldr	r1, [pc, #592]	; (8008208 <__gethex+0x2dc>)
 8007fb6:	f7ff fee9 	bl	8007d8c <strncmp>
 8007fba:	b978      	cbnz	r0, 8007fdc <__gethex+0xb0>
 8007fbc:	b946      	cbnz	r6, 8007fd0 <__gethex+0xa4>
 8007fbe:	1c6e      	adds	r6, r5, #1
 8007fc0:	4632      	mov	r2, r6
 8007fc2:	4615      	mov	r5, r2
 8007fc4:	7828      	ldrb	r0, [r5, #0]
 8007fc6:	3201      	adds	r2, #1
 8007fc8:	f7ff ff9b 	bl	8007f02 <__hexdig_fun>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d1f8      	bne.n	8007fc2 <__gethex+0x96>
 8007fd0:	1b73      	subs	r3, r6, r5
 8007fd2:	009e      	lsls	r6, r3, #2
 8007fd4:	e004      	b.n	8007fe0 <__gethex+0xb4>
 8007fd6:	2400      	movs	r4, #0
 8007fd8:	4626      	mov	r6, r4
 8007fda:	e7e1      	b.n	8007fa0 <__gethex+0x74>
 8007fdc:	2e00      	cmp	r6, #0
 8007fde:	d1f7      	bne.n	8007fd0 <__gethex+0xa4>
 8007fe0:	782b      	ldrb	r3, [r5, #0]
 8007fe2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007fe6:	2b50      	cmp	r3, #80	; 0x50
 8007fe8:	d13d      	bne.n	8008066 <__gethex+0x13a>
 8007fea:	786b      	ldrb	r3, [r5, #1]
 8007fec:	2b2b      	cmp	r3, #43	; 0x2b
 8007fee:	d02f      	beq.n	8008050 <__gethex+0x124>
 8007ff0:	2b2d      	cmp	r3, #45	; 0x2d
 8007ff2:	d031      	beq.n	8008058 <__gethex+0x12c>
 8007ff4:	f04f 0b00 	mov.w	fp, #0
 8007ff8:	1c69      	adds	r1, r5, #1
 8007ffa:	7808      	ldrb	r0, [r1, #0]
 8007ffc:	f7ff ff81 	bl	8007f02 <__hexdig_fun>
 8008000:	1e42      	subs	r2, r0, #1
 8008002:	b2d2      	uxtb	r2, r2
 8008004:	2a18      	cmp	r2, #24
 8008006:	d82e      	bhi.n	8008066 <__gethex+0x13a>
 8008008:	f1a0 0210 	sub.w	r2, r0, #16
 800800c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008010:	f7ff ff77 	bl	8007f02 <__hexdig_fun>
 8008014:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8008018:	fa5f fc8c 	uxtb.w	ip, ip
 800801c:	f1bc 0f18 	cmp.w	ip, #24
 8008020:	d91d      	bls.n	800805e <__gethex+0x132>
 8008022:	f1bb 0f00 	cmp.w	fp, #0
 8008026:	d000      	beq.n	800802a <__gethex+0xfe>
 8008028:	4252      	negs	r2, r2
 800802a:	4416      	add	r6, r2
 800802c:	f8ca 1000 	str.w	r1, [sl]
 8008030:	b1dc      	cbz	r4, 800806a <__gethex+0x13e>
 8008032:	9b01      	ldr	r3, [sp, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	bf14      	ite	ne
 8008038:	f04f 0800 	movne.w	r8, #0
 800803c:	f04f 0806 	moveq.w	r8, #6
 8008040:	4640      	mov	r0, r8
 8008042:	b005      	add	sp, #20
 8008044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008048:	4645      	mov	r5, r8
 800804a:	4626      	mov	r6, r4
 800804c:	2401      	movs	r4, #1
 800804e:	e7c7      	b.n	8007fe0 <__gethex+0xb4>
 8008050:	f04f 0b00 	mov.w	fp, #0
 8008054:	1ca9      	adds	r1, r5, #2
 8008056:	e7d0      	b.n	8007ffa <__gethex+0xce>
 8008058:	f04f 0b01 	mov.w	fp, #1
 800805c:	e7fa      	b.n	8008054 <__gethex+0x128>
 800805e:	230a      	movs	r3, #10
 8008060:	fb03 0002 	mla	r0, r3, r2, r0
 8008064:	e7d0      	b.n	8008008 <__gethex+0xdc>
 8008066:	4629      	mov	r1, r5
 8008068:	e7e0      	b.n	800802c <__gethex+0x100>
 800806a:	4621      	mov	r1, r4
 800806c:	eba5 0308 	sub.w	r3, r5, r8
 8008070:	3b01      	subs	r3, #1
 8008072:	2b07      	cmp	r3, #7
 8008074:	dc0a      	bgt.n	800808c <__gethex+0x160>
 8008076:	4648      	mov	r0, r9
 8008078:	f7fe f932 	bl	80062e0 <_Balloc>
 800807c:	4604      	mov	r4, r0
 800807e:	b940      	cbnz	r0, 8008092 <__gethex+0x166>
 8008080:	4602      	mov	r2, r0
 8008082:	21e4      	movs	r1, #228	; 0xe4
 8008084:	4b61      	ldr	r3, [pc, #388]	; (800820c <__gethex+0x2e0>)
 8008086:	4862      	ldr	r0, [pc, #392]	; (8008210 <__gethex+0x2e4>)
 8008088:	f7ff feb6 	bl	8007df8 <__assert_func>
 800808c:	3101      	adds	r1, #1
 800808e:	105b      	asrs	r3, r3, #1
 8008090:	e7ef      	b.n	8008072 <__gethex+0x146>
 8008092:	2300      	movs	r3, #0
 8008094:	469b      	mov	fp, r3
 8008096:	f100 0a14 	add.w	sl, r0, #20
 800809a:	f8cd a004 	str.w	sl, [sp, #4]
 800809e:	45a8      	cmp	r8, r5
 80080a0:	d344      	bcc.n	800812c <__gethex+0x200>
 80080a2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80080a6:	4658      	mov	r0, fp
 80080a8:	f848 bb04 	str.w	fp, [r8], #4
 80080ac:	eba8 080a 	sub.w	r8, r8, sl
 80080b0:	ea4f 02a8 	mov.w	r2, r8, asr #2
 80080b4:	6122      	str	r2, [r4, #16]
 80080b6:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80080ba:	f7fe fa03 	bl	80064c4 <__hi0bits>
 80080be:	683d      	ldr	r5, [r7, #0]
 80080c0:	eba8 0800 	sub.w	r8, r8, r0
 80080c4:	45a8      	cmp	r8, r5
 80080c6:	dd59      	ble.n	800817c <__gethex+0x250>
 80080c8:	eba8 0805 	sub.w	r8, r8, r5
 80080cc:	4641      	mov	r1, r8
 80080ce:	4620      	mov	r0, r4
 80080d0:	f7fe fd81 	bl	8006bd6 <__any_on>
 80080d4:	4683      	mov	fp, r0
 80080d6:	b1b8      	cbz	r0, 8008108 <__gethex+0x1dc>
 80080d8:	f04f 0b01 	mov.w	fp, #1
 80080dc:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80080e0:	1159      	asrs	r1, r3, #5
 80080e2:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80080e6:	f003 021f 	and.w	r2, r3, #31
 80080ea:	fa0b f202 	lsl.w	r2, fp, r2
 80080ee:	420a      	tst	r2, r1
 80080f0:	d00a      	beq.n	8008108 <__gethex+0x1dc>
 80080f2:	455b      	cmp	r3, fp
 80080f4:	dd06      	ble.n	8008104 <__gethex+0x1d8>
 80080f6:	4620      	mov	r0, r4
 80080f8:	f1a8 0102 	sub.w	r1, r8, #2
 80080fc:	f7fe fd6b 	bl	8006bd6 <__any_on>
 8008100:	2800      	cmp	r0, #0
 8008102:	d138      	bne.n	8008176 <__gethex+0x24a>
 8008104:	f04f 0b02 	mov.w	fp, #2
 8008108:	4641      	mov	r1, r8
 800810a:	4620      	mov	r0, r4
 800810c:	f7ff fea6 	bl	8007e5c <rshift>
 8008110:	4446      	add	r6, r8
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	42b3      	cmp	r3, r6
 8008116:	da41      	bge.n	800819c <__gethex+0x270>
 8008118:	4621      	mov	r1, r4
 800811a:	4648      	mov	r0, r9
 800811c:	f7fe f920 	bl	8006360 <_Bfree>
 8008120:	2300      	movs	r3, #0
 8008122:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008124:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008128:	6013      	str	r3, [r2, #0]
 800812a:	e789      	b.n	8008040 <__gethex+0x114>
 800812c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008130:	2a2e      	cmp	r2, #46	; 0x2e
 8008132:	d014      	beq.n	800815e <__gethex+0x232>
 8008134:	2b20      	cmp	r3, #32
 8008136:	d106      	bne.n	8008146 <__gethex+0x21a>
 8008138:	9b01      	ldr	r3, [sp, #4]
 800813a:	f843 bb04 	str.w	fp, [r3], #4
 800813e:	f04f 0b00 	mov.w	fp, #0
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	465b      	mov	r3, fp
 8008146:	7828      	ldrb	r0, [r5, #0]
 8008148:	9303      	str	r3, [sp, #12]
 800814a:	f7ff feda 	bl	8007f02 <__hexdig_fun>
 800814e:	9b03      	ldr	r3, [sp, #12]
 8008150:	f000 000f 	and.w	r0, r0, #15
 8008154:	4098      	lsls	r0, r3
 8008156:	ea4b 0b00 	orr.w	fp, fp, r0
 800815a:	3304      	adds	r3, #4
 800815c:	e79f      	b.n	800809e <__gethex+0x172>
 800815e:	45a8      	cmp	r8, r5
 8008160:	d8e8      	bhi.n	8008134 <__gethex+0x208>
 8008162:	2201      	movs	r2, #1
 8008164:	4628      	mov	r0, r5
 8008166:	4928      	ldr	r1, [pc, #160]	; (8008208 <__gethex+0x2dc>)
 8008168:	9303      	str	r3, [sp, #12]
 800816a:	f7ff fe0f 	bl	8007d8c <strncmp>
 800816e:	9b03      	ldr	r3, [sp, #12]
 8008170:	2800      	cmp	r0, #0
 8008172:	d1df      	bne.n	8008134 <__gethex+0x208>
 8008174:	e793      	b.n	800809e <__gethex+0x172>
 8008176:	f04f 0b03 	mov.w	fp, #3
 800817a:	e7c5      	b.n	8008108 <__gethex+0x1dc>
 800817c:	da0b      	bge.n	8008196 <__gethex+0x26a>
 800817e:	eba5 0808 	sub.w	r8, r5, r8
 8008182:	4621      	mov	r1, r4
 8008184:	4642      	mov	r2, r8
 8008186:	4648      	mov	r0, r9
 8008188:	f7fe fb02 	bl	8006790 <__lshift>
 800818c:	4604      	mov	r4, r0
 800818e:	eba6 0608 	sub.w	r6, r6, r8
 8008192:	f100 0a14 	add.w	sl, r0, #20
 8008196:	f04f 0b00 	mov.w	fp, #0
 800819a:	e7ba      	b.n	8008112 <__gethex+0x1e6>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	42b3      	cmp	r3, r6
 80081a0:	dd74      	ble.n	800828c <__gethex+0x360>
 80081a2:	1b9e      	subs	r6, r3, r6
 80081a4:	42b5      	cmp	r5, r6
 80081a6:	dc35      	bgt.n	8008214 <__gethex+0x2e8>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d023      	beq.n	80081f6 <__gethex+0x2ca>
 80081ae:	2b03      	cmp	r3, #3
 80081b0:	d025      	beq.n	80081fe <__gethex+0x2d2>
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d115      	bne.n	80081e2 <__gethex+0x2b6>
 80081b6:	42b5      	cmp	r5, r6
 80081b8:	d113      	bne.n	80081e2 <__gethex+0x2b6>
 80081ba:	2d01      	cmp	r5, #1
 80081bc:	d10b      	bne.n	80081d6 <__gethex+0x2aa>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	9a02      	ldr	r2, [sp, #8]
 80081c2:	f04f 0862 	mov.w	r8, #98	; 0x62
 80081c6:	6013      	str	r3, [r2, #0]
 80081c8:	2301      	movs	r3, #1
 80081ca:	6123      	str	r3, [r4, #16]
 80081cc:	f8ca 3000 	str.w	r3, [sl]
 80081d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081d2:	601c      	str	r4, [r3, #0]
 80081d4:	e734      	b.n	8008040 <__gethex+0x114>
 80081d6:	4620      	mov	r0, r4
 80081d8:	1e69      	subs	r1, r5, #1
 80081da:	f7fe fcfc 	bl	8006bd6 <__any_on>
 80081de:	2800      	cmp	r0, #0
 80081e0:	d1ed      	bne.n	80081be <__gethex+0x292>
 80081e2:	4621      	mov	r1, r4
 80081e4:	4648      	mov	r0, r9
 80081e6:	f7fe f8bb 	bl	8006360 <_Bfree>
 80081ea:	2300      	movs	r3, #0
 80081ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081ee:	f04f 0850 	mov.w	r8, #80	; 0x50
 80081f2:	6013      	str	r3, [r2, #0]
 80081f4:	e724      	b.n	8008040 <__gethex+0x114>
 80081f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1f2      	bne.n	80081e2 <__gethex+0x2b6>
 80081fc:	e7df      	b.n	80081be <__gethex+0x292>
 80081fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1dc      	bne.n	80081be <__gethex+0x292>
 8008204:	e7ed      	b.n	80081e2 <__gethex+0x2b6>
 8008206:	bf00      	nop
 8008208:	0800ae84 	.word	0x0800ae84
 800820c:	0800ad18 	.word	0x0800ad18
 8008210:	0800b02e 	.word	0x0800b02e
 8008214:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8008218:	f1bb 0f00 	cmp.w	fp, #0
 800821c:	d133      	bne.n	8008286 <__gethex+0x35a>
 800821e:	f1b8 0f00 	cmp.w	r8, #0
 8008222:	d004      	beq.n	800822e <__gethex+0x302>
 8008224:	4641      	mov	r1, r8
 8008226:	4620      	mov	r0, r4
 8008228:	f7fe fcd5 	bl	8006bd6 <__any_on>
 800822c:	4683      	mov	fp, r0
 800822e:	2301      	movs	r3, #1
 8008230:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008234:	f008 081f 	and.w	r8, r8, #31
 8008238:	fa03 f308 	lsl.w	r3, r3, r8
 800823c:	f04f 0802 	mov.w	r8, #2
 8008240:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008244:	4631      	mov	r1, r6
 8008246:	4213      	tst	r3, r2
 8008248:	4620      	mov	r0, r4
 800824a:	bf18      	it	ne
 800824c:	f04b 0b02 	orrne.w	fp, fp, #2
 8008250:	1bad      	subs	r5, r5, r6
 8008252:	f7ff fe03 	bl	8007e5c <rshift>
 8008256:	687e      	ldr	r6, [r7, #4]
 8008258:	f1bb 0f00 	cmp.w	fp, #0
 800825c:	d04a      	beq.n	80082f4 <__gethex+0x3c8>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2b02      	cmp	r3, #2
 8008262:	d016      	beq.n	8008292 <__gethex+0x366>
 8008264:	2b03      	cmp	r3, #3
 8008266:	d018      	beq.n	800829a <__gethex+0x36e>
 8008268:	2b01      	cmp	r3, #1
 800826a:	d109      	bne.n	8008280 <__gethex+0x354>
 800826c:	f01b 0f02 	tst.w	fp, #2
 8008270:	d006      	beq.n	8008280 <__gethex+0x354>
 8008272:	f8da 3000 	ldr.w	r3, [sl]
 8008276:	ea4b 0b03 	orr.w	fp, fp, r3
 800827a:	f01b 0f01 	tst.w	fp, #1
 800827e:	d10f      	bne.n	80082a0 <__gethex+0x374>
 8008280:	f048 0810 	orr.w	r8, r8, #16
 8008284:	e036      	b.n	80082f4 <__gethex+0x3c8>
 8008286:	f04f 0b01 	mov.w	fp, #1
 800828a:	e7d0      	b.n	800822e <__gethex+0x302>
 800828c:	f04f 0801 	mov.w	r8, #1
 8008290:	e7e2      	b.n	8008258 <__gethex+0x32c>
 8008292:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008294:	f1c3 0301 	rsb	r3, r3, #1
 8008298:	930f      	str	r3, [sp, #60]	; 0x3c
 800829a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800829c:	2b00      	cmp	r3, #0
 800829e:	d0ef      	beq.n	8008280 <__gethex+0x354>
 80082a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80082a4:	f104 0214 	add.w	r2, r4, #20
 80082a8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80082ac:	9301      	str	r3, [sp, #4]
 80082ae:	2300      	movs	r3, #0
 80082b0:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80082b4:	4694      	mov	ip, r2
 80082b6:	f852 1b04 	ldr.w	r1, [r2], #4
 80082ba:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80082be:	d01e      	beq.n	80082fe <__gethex+0x3d2>
 80082c0:	3101      	adds	r1, #1
 80082c2:	f8cc 1000 	str.w	r1, [ip]
 80082c6:	f1b8 0f02 	cmp.w	r8, #2
 80082ca:	f104 0214 	add.w	r2, r4, #20
 80082ce:	d13d      	bne.n	800834c <__gethex+0x420>
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	3b01      	subs	r3, #1
 80082d4:	42ab      	cmp	r3, r5
 80082d6:	d10b      	bne.n	80082f0 <__gethex+0x3c4>
 80082d8:	2301      	movs	r3, #1
 80082da:	1169      	asrs	r1, r5, #5
 80082dc:	f005 051f 	and.w	r5, r5, #31
 80082e0:	fa03 f505 	lsl.w	r5, r3, r5
 80082e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082e8:	421d      	tst	r5, r3
 80082ea:	bf18      	it	ne
 80082ec:	f04f 0801 	movne.w	r8, #1
 80082f0:	f048 0820 	orr.w	r8, r8, #32
 80082f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082f6:	601c      	str	r4, [r3, #0]
 80082f8:	9b02      	ldr	r3, [sp, #8]
 80082fa:	601e      	str	r6, [r3, #0]
 80082fc:	e6a0      	b.n	8008040 <__gethex+0x114>
 80082fe:	4290      	cmp	r0, r2
 8008300:	f842 3c04 	str.w	r3, [r2, #-4]
 8008304:	d8d6      	bhi.n	80082b4 <__gethex+0x388>
 8008306:	68a2      	ldr	r2, [r4, #8]
 8008308:	4593      	cmp	fp, r2
 800830a:	db17      	blt.n	800833c <__gethex+0x410>
 800830c:	6861      	ldr	r1, [r4, #4]
 800830e:	4648      	mov	r0, r9
 8008310:	3101      	adds	r1, #1
 8008312:	f7fd ffe5 	bl	80062e0 <_Balloc>
 8008316:	4682      	mov	sl, r0
 8008318:	b918      	cbnz	r0, 8008322 <__gethex+0x3f6>
 800831a:	4602      	mov	r2, r0
 800831c:	2184      	movs	r1, #132	; 0x84
 800831e:	4b1a      	ldr	r3, [pc, #104]	; (8008388 <__gethex+0x45c>)
 8008320:	e6b1      	b.n	8008086 <__gethex+0x15a>
 8008322:	6922      	ldr	r2, [r4, #16]
 8008324:	f104 010c 	add.w	r1, r4, #12
 8008328:	3202      	adds	r2, #2
 800832a:	0092      	lsls	r2, r2, #2
 800832c:	300c      	adds	r0, #12
 800832e:	f7ff fd4f 	bl	8007dd0 <memcpy>
 8008332:	4621      	mov	r1, r4
 8008334:	4648      	mov	r0, r9
 8008336:	f7fe f813 	bl	8006360 <_Bfree>
 800833a:	4654      	mov	r4, sl
 800833c:	6922      	ldr	r2, [r4, #16]
 800833e:	1c51      	adds	r1, r2, #1
 8008340:	6121      	str	r1, [r4, #16]
 8008342:	2101      	movs	r1, #1
 8008344:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008348:	6151      	str	r1, [r2, #20]
 800834a:	e7bc      	b.n	80082c6 <__gethex+0x39a>
 800834c:	6921      	ldr	r1, [r4, #16]
 800834e:	4559      	cmp	r1, fp
 8008350:	dd0b      	ble.n	800836a <__gethex+0x43e>
 8008352:	2101      	movs	r1, #1
 8008354:	4620      	mov	r0, r4
 8008356:	f7ff fd81 	bl	8007e5c <rshift>
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	3601      	adds	r6, #1
 800835e:	42b3      	cmp	r3, r6
 8008360:	f6ff aeda 	blt.w	8008118 <__gethex+0x1ec>
 8008364:	f04f 0801 	mov.w	r8, #1
 8008368:	e7c2      	b.n	80082f0 <__gethex+0x3c4>
 800836a:	f015 051f 	ands.w	r5, r5, #31
 800836e:	d0f9      	beq.n	8008364 <__gethex+0x438>
 8008370:	9b01      	ldr	r3, [sp, #4]
 8008372:	f1c5 0520 	rsb	r5, r5, #32
 8008376:	441a      	add	r2, r3
 8008378:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800837c:	f7fe f8a2 	bl	80064c4 <__hi0bits>
 8008380:	42a8      	cmp	r0, r5
 8008382:	dbe6      	blt.n	8008352 <__gethex+0x426>
 8008384:	e7ee      	b.n	8008364 <__gethex+0x438>
 8008386:	bf00      	nop
 8008388:	0800ad18 	.word	0x0800ad18

0800838c <L_shift>:
 800838c:	f1c2 0208 	rsb	r2, r2, #8
 8008390:	0092      	lsls	r2, r2, #2
 8008392:	b570      	push	{r4, r5, r6, lr}
 8008394:	f1c2 0620 	rsb	r6, r2, #32
 8008398:	6843      	ldr	r3, [r0, #4]
 800839a:	6804      	ldr	r4, [r0, #0]
 800839c:	fa03 f506 	lsl.w	r5, r3, r6
 80083a0:	432c      	orrs	r4, r5
 80083a2:	40d3      	lsrs	r3, r2
 80083a4:	6004      	str	r4, [r0, #0]
 80083a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80083aa:	4288      	cmp	r0, r1
 80083ac:	d3f4      	bcc.n	8008398 <L_shift+0xc>
 80083ae:	bd70      	pop	{r4, r5, r6, pc}

080083b0 <__match>:
 80083b0:	b530      	push	{r4, r5, lr}
 80083b2:	6803      	ldr	r3, [r0, #0]
 80083b4:	3301      	adds	r3, #1
 80083b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083ba:	b914      	cbnz	r4, 80083c2 <__match+0x12>
 80083bc:	6003      	str	r3, [r0, #0]
 80083be:	2001      	movs	r0, #1
 80083c0:	bd30      	pop	{r4, r5, pc}
 80083c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80083ca:	2d19      	cmp	r5, #25
 80083cc:	bf98      	it	ls
 80083ce:	3220      	addls	r2, #32
 80083d0:	42a2      	cmp	r2, r4
 80083d2:	d0f0      	beq.n	80083b6 <__match+0x6>
 80083d4:	2000      	movs	r0, #0
 80083d6:	e7f3      	b.n	80083c0 <__match+0x10>

080083d8 <__hexnan>:
 80083d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083dc:	2500      	movs	r5, #0
 80083de:	680b      	ldr	r3, [r1, #0]
 80083e0:	4682      	mov	sl, r0
 80083e2:	115e      	asrs	r6, r3, #5
 80083e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80083e8:	f013 031f 	ands.w	r3, r3, #31
 80083ec:	bf18      	it	ne
 80083ee:	3604      	addne	r6, #4
 80083f0:	1f37      	subs	r7, r6, #4
 80083f2:	4690      	mov	r8, r2
 80083f4:	46b9      	mov	r9, r7
 80083f6:	463c      	mov	r4, r7
 80083f8:	46ab      	mov	fp, r5
 80083fa:	b087      	sub	sp, #28
 80083fc:	6801      	ldr	r1, [r0, #0]
 80083fe:	9301      	str	r3, [sp, #4]
 8008400:	f846 5c04 	str.w	r5, [r6, #-4]
 8008404:	9502      	str	r5, [sp, #8]
 8008406:	784a      	ldrb	r2, [r1, #1]
 8008408:	1c4b      	adds	r3, r1, #1
 800840a:	9303      	str	r3, [sp, #12]
 800840c:	b342      	cbz	r2, 8008460 <__hexnan+0x88>
 800840e:	4610      	mov	r0, r2
 8008410:	9105      	str	r1, [sp, #20]
 8008412:	9204      	str	r2, [sp, #16]
 8008414:	f7ff fd75 	bl	8007f02 <__hexdig_fun>
 8008418:	2800      	cmp	r0, #0
 800841a:	d14f      	bne.n	80084bc <__hexnan+0xe4>
 800841c:	9a04      	ldr	r2, [sp, #16]
 800841e:	9905      	ldr	r1, [sp, #20]
 8008420:	2a20      	cmp	r2, #32
 8008422:	d818      	bhi.n	8008456 <__hexnan+0x7e>
 8008424:	9b02      	ldr	r3, [sp, #8]
 8008426:	459b      	cmp	fp, r3
 8008428:	dd13      	ble.n	8008452 <__hexnan+0x7a>
 800842a:	454c      	cmp	r4, r9
 800842c:	d206      	bcs.n	800843c <__hexnan+0x64>
 800842e:	2d07      	cmp	r5, #7
 8008430:	dc04      	bgt.n	800843c <__hexnan+0x64>
 8008432:	462a      	mov	r2, r5
 8008434:	4649      	mov	r1, r9
 8008436:	4620      	mov	r0, r4
 8008438:	f7ff ffa8 	bl	800838c <L_shift>
 800843c:	4544      	cmp	r4, r8
 800843e:	d950      	bls.n	80084e2 <__hexnan+0x10a>
 8008440:	2300      	movs	r3, #0
 8008442:	f1a4 0904 	sub.w	r9, r4, #4
 8008446:	f844 3c04 	str.w	r3, [r4, #-4]
 800844a:	461d      	mov	r5, r3
 800844c:	464c      	mov	r4, r9
 800844e:	f8cd b008 	str.w	fp, [sp, #8]
 8008452:	9903      	ldr	r1, [sp, #12]
 8008454:	e7d7      	b.n	8008406 <__hexnan+0x2e>
 8008456:	2a29      	cmp	r2, #41	; 0x29
 8008458:	d155      	bne.n	8008506 <__hexnan+0x12e>
 800845a:	3102      	adds	r1, #2
 800845c:	f8ca 1000 	str.w	r1, [sl]
 8008460:	f1bb 0f00 	cmp.w	fp, #0
 8008464:	d04f      	beq.n	8008506 <__hexnan+0x12e>
 8008466:	454c      	cmp	r4, r9
 8008468:	d206      	bcs.n	8008478 <__hexnan+0xa0>
 800846a:	2d07      	cmp	r5, #7
 800846c:	dc04      	bgt.n	8008478 <__hexnan+0xa0>
 800846e:	462a      	mov	r2, r5
 8008470:	4649      	mov	r1, r9
 8008472:	4620      	mov	r0, r4
 8008474:	f7ff ff8a 	bl	800838c <L_shift>
 8008478:	4544      	cmp	r4, r8
 800847a:	d934      	bls.n	80084e6 <__hexnan+0x10e>
 800847c:	4623      	mov	r3, r4
 800847e:	f1a8 0204 	sub.w	r2, r8, #4
 8008482:	f853 1b04 	ldr.w	r1, [r3], #4
 8008486:	429f      	cmp	r7, r3
 8008488:	f842 1f04 	str.w	r1, [r2, #4]!
 800848c:	d2f9      	bcs.n	8008482 <__hexnan+0xaa>
 800848e:	1b3b      	subs	r3, r7, r4
 8008490:	f023 0303 	bic.w	r3, r3, #3
 8008494:	3304      	adds	r3, #4
 8008496:	3e03      	subs	r6, #3
 8008498:	3401      	adds	r4, #1
 800849a:	42a6      	cmp	r6, r4
 800849c:	bf38      	it	cc
 800849e:	2304      	movcc	r3, #4
 80084a0:	2200      	movs	r2, #0
 80084a2:	4443      	add	r3, r8
 80084a4:	f843 2b04 	str.w	r2, [r3], #4
 80084a8:	429f      	cmp	r7, r3
 80084aa:	d2fb      	bcs.n	80084a4 <__hexnan+0xcc>
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	b91b      	cbnz	r3, 80084b8 <__hexnan+0xe0>
 80084b0:	4547      	cmp	r7, r8
 80084b2:	d126      	bne.n	8008502 <__hexnan+0x12a>
 80084b4:	2301      	movs	r3, #1
 80084b6:	603b      	str	r3, [r7, #0]
 80084b8:	2005      	movs	r0, #5
 80084ba:	e025      	b.n	8008508 <__hexnan+0x130>
 80084bc:	3501      	adds	r5, #1
 80084be:	2d08      	cmp	r5, #8
 80084c0:	f10b 0b01 	add.w	fp, fp, #1
 80084c4:	dd06      	ble.n	80084d4 <__hexnan+0xfc>
 80084c6:	4544      	cmp	r4, r8
 80084c8:	d9c3      	bls.n	8008452 <__hexnan+0x7a>
 80084ca:	2300      	movs	r3, #0
 80084cc:	2501      	movs	r5, #1
 80084ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80084d2:	3c04      	subs	r4, #4
 80084d4:	6822      	ldr	r2, [r4, #0]
 80084d6:	f000 000f 	and.w	r0, r0, #15
 80084da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80084de:	6020      	str	r0, [r4, #0]
 80084e0:	e7b7      	b.n	8008452 <__hexnan+0x7a>
 80084e2:	2508      	movs	r5, #8
 80084e4:	e7b5      	b.n	8008452 <__hexnan+0x7a>
 80084e6:	9b01      	ldr	r3, [sp, #4]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d0df      	beq.n	80084ac <__hexnan+0xd4>
 80084ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084f0:	f1c3 0320 	rsb	r3, r3, #32
 80084f4:	40da      	lsrs	r2, r3
 80084f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80084fa:	4013      	ands	r3, r2
 80084fc:	f846 3c04 	str.w	r3, [r6, #-4]
 8008500:	e7d4      	b.n	80084ac <__hexnan+0xd4>
 8008502:	3f04      	subs	r7, #4
 8008504:	e7d2      	b.n	80084ac <__hexnan+0xd4>
 8008506:	2004      	movs	r0, #4
 8008508:	b007      	add	sp, #28
 800850a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800850e <__ascii_mbtowc>:
 800850e:	b082      	sub	sp, #8
 8008510:	b901      	cbnz	r1, 8008514 <__ascii_mbtowc+0x6>
 8008512:	a901      	add	r1, sp, #4
 8008514:	b142      	cbz	r2, 8008528 <__ascii_mbtowc+0x1a>
 8008516:	b14b      	cbz	r3, 800852c <__ascii_mbtowc+0x1e>
 8008518:	7813      	ldrb	r3, [r2, #0]
 800851a:	600b      	str	r3, [r1, #0]
 800851c:	7812      	ldrb	r2, [r2, #0]
 800851e:	1e10      	subs	r0, r2, #0
 8008520:	bf18      	it	ne
 8008522:	2001      	movne	r0, #1
 8008524:	b002      	add	sp, #8
 8008526:	4770      	bx	lr
 8008528:	4610      	mov	r0, r2
 800852a:	e7fb      	b.n	8008524 <__ascii_mbtowc+0x16>
 800852c:	f06f 0001 	mvn.w	r0, #1
 8008530:	e7f8      	b.n	8008524 <__ascii_mbtowc+0x16>

08008532 <_realloc_r>:
 8008532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008536:	4680      	mov	r8, r0
 8008538:	4614      	mov	r4, r2
 800853a:	460e      	mov	r6, r1
 800853c:	b921      	cbnz	r1, 8008548 <_realloc_r+0x16>
 800853e:	4611      	mov	r1, r2
 8008540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008544:	f7fd be40 	b.w	80061c8 <_malloc_r>
 8008548:	b92a      	cbnz	r2, 8008556 <_realloc_r+0x24>
 800854a:	f7fd fdcd 	bl	80060e8 <_free_r>
 800854e:	4625      	mov	r5, r4
 8008550:	4628      	mov	r0, r5
 8008552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008556:	f000 f842 	bl	80085de <_malloc_usable_size_r>
 800855a:	4284      	cmp	r4, r0
 800855c:	4607      	mov	r7, r0
 800855e:	d802      	bhi.n	8008566 <_realloc_r+0x34>
 8008560:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008564:	d812      	bhi.n	800858c <_realloc_r+0x5a>
 8008566:	4621      	mov	r1, r4
 8008568:	4640      	mov	r0, r8
 800856a:	f7fd fe2d 	bl	80061c8 <_malloc_r>
 800856e:	4605      	mov	r5, r0
 8008570:	2800      	cmp	r0, #0
 8008572:	d0ed      	beq.n	8008550 <_realloc_r+0x1e>
 8008574:	42bc      	cmp	r4, r7
 8008576:	4622      	mov	r2, r4
 8008578:	4631      	mov	r1, r6
 800857a:	bf28      	it	cs
 800857c:	463a      	movcs	r2, r7
 800857e:	f7ff fc27 	bl	8007dd0 <memcpy>
 8008582:	4631      	mov	r1, r6
 8008584:	4640      	mov	r0, r8
 8008586:	f7fd fdaf 	bl	80060e8 <_free_r>
 800858a:	e7e1      	b.n	8008550 <_realloc_r+0x1e>
 800858c:	4635      	mov	r5, r6
 800858e:	e7df      	b.n	8008550 <_realloc_r+0x1e>

08008590 <__ascii_wctomb>:
 8008590:	4603      	mov	r3, r0
 8008592:	4608      	mov	r0, r1
 8008594:	b141      	cbz	r1, 80085a8 <__ascii_wctomb+0x18>
 8008596:	2aff      	cmp	r2, #255	; 0xff
 8008598:	d904      	bls.n	80085a4 <__ascii_wctomb+0x14>
 800859a:	228a      	movs	r2, #138	; 0x8a
 800859c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	4770      	bx	lr
 80085a4:	2001      	movs	r0, #1
 80085a6:	700a      	strb	r2, [r1, #0]
 80085a8:	4770      	bx	lr
	...

080085ac <fiprintf>:
 80085ac:	b40e      	push	{r1, r2, r3}
 80085ae:	b503      	push	{r0, r1, lr}
 80085b0:	4601      	mov	r1, r0
 80085b2:	ab03      	add	r3, sp, #12
 80085b4:	4805      	ldr	r0, [pc, #20]	; (80085cc <fiprintf+0x20>)
 80085b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ba:	6800      	ldr	r0, [r0, #0]
 80085bc:	9301      	str	r3, [sp, #4]
 80085be:	f000 f83d 	bl	800863c <_vfiprintf_r>
 80085c2:	b002      	add	sp, #8
 80085c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80085c8:	b003      	add	sp, #12
 80085ca:	4770      	bx	lr
 80085cc:	20000074 	.word	0x20000074

080085d0 <abort>:
 80085d0:	2006      	movs	r0, #6
 80085d2:	b508      	push	{r3, lr}
 80085d4:	f000 fa0a 	bl	80089ec <raise>
 80085d8:	2001      	movs	r0, #1
 80085da:	f7f9 f9f3 	bl	80019c4 <_exit>

080085de <_malloc_usable_size_r>:
 80085de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085e2:	1f18      	subs	r0, r3, #4
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	bfbc      	itt	lt
 80085e8:	580b      	ldrlt	r3, [r1, r0]
 80085ea:	18c0      	addlt	r0, r0, r3
 80085ec:	4770      	bx	lr

080085ee <__sfputc_r>:
 80085ee:	6893      	ldr	r3, [r2, #8]
 80085f0:	b410      	push	{r4}
 80085f2:	3b01      	subs	r3, #1
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	6093      	str	r3, [r2, #8]
 80085f8:	da07      	bge.n	800860a <__sfputc_r+0x1c>
 80085fa:	6994      	ldr	r4, [r2, #24]
 80085fc:	42a3      	cmp	r3, r4
 80085fe:	db01      	blt.n	8008604 <__sfputc_r+0x16>
 8008600:	290a      	cmp	r1, #10
 8008602:	d102      	bne.n	800860a <__sfputc_r+0x1c>
 8008604:	bc10      	pop	{r4}
 8008606:	f000 b933 	b.w	8008870 <__swbuf_r>
 800860a:	6813      	ldr	r3, [r2, #0]
 800860c:	1c58      	adds	r0, r3, #1
 800860e:	6010      	str	r0, [r2, #0]
 8008610:	7019      	strb	r1, [r3, #0]
 8008612:	4608      	mov	r0, r1
 8008614:	bc10      	pop	{r4}
 8008616:	4770      	bx	lr

08008618 <__sfputs_r>:
 8008618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800861a:	4606      	mov	r6, r0
 800861c:	460f      	mov	r7, r1
 800861e:	4614      	mov	r4, r2
 8008620:	18d5      	adds	r5, r2, r3
 8008622:	42ac      	cmp	r4, r5
 8008624:	d101      	bne.n	800862a <__sfputs_r+0x12>
 8008626:	2000      	movs	r0, #0
 8008628:	e007      	b.n	800863a <__sfputs_r+0x22>
 800862a:	463a      	mov	r2, r7
 800862c:	4630      	mov	r0, r6
 800862e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008632:	f7ff ffdc 	bl	80085ee <__sfputc_r>
 8008636:	1c43      	adds	r3, r0, #1
 8008638:	d1f3      	bne.n	8008622 <__sfputs_r+0xa>
 800863a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800863c <_vfiprintf_r>:
 800863c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008640:	460d      	mov	r5, r1
 8008642:	4614      	mov	r4, r2
 8008644:	4698      	mov	r8, r3
 8008646:	4606      	mov	r6, r0
 8008648:	b09d      	sub	sp, #116	; 0x74
 800864a:	b118      	cbz	r0, 8008654 <_vfiprintf_r+0x18>
 800864c:	6a03      	ldr	r3, [r0, #32]
 800864e:	b90b      	cbnz	r3, 8008654 <_vfiprintf_r+0x18>
 8008650:	f7fc fdb0 	bl	80051b4 <__sinit>
 8008654:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008656:	07d9      	lsls	r1, r3, #31
 8008658:	d405      	bmi.n	8008666 <_vfiprintf_r+0x2a>
 800865a:	89ab      	ldrh	r3, [r5, #12]
 800865c:	059a      	lsls	r2, r3, #22
 800865e:	d402      	bmi.n	8008666 <_vfiprintf_r+0x2a>
 8008660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008662:	f7fc febd 	bl	80053e0 <__retarget_lock_acquire_recursive>
 8008666:	89ab      	ldrh	r3, [r5, #12]
 8008668:	071b      	lsls	r3, r3, #28
 800866a:	d501      	bpl.n	8008670 <_vfiprintf_r+0x34>
 800866c:	692b      	ldr	r3, [r5, #16]
 800866e:	b99b      	cbnz	r3, 8008698 <_vfiprintf_r+0x5c>
 8008670:	4629      	mov	r1, r5
 8008672:	4630      	mov	r0, r6
 8008674:	f000 f93a 	bl	80088ec <__swsetup_r>
 8008678:	b170      	cbz	r0, 8008698 <_vfiprintf_r+0x5c>
 800867a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800867c:	07dc      	lsls	r4, r3, #31
 800867e:	d504      	bpl.n	800868a <_vfiprintf_r+0x4e>
 8008680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008684:	b01d      	add	sp, #116	; 0x74
 8008686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868a:	89ab      	ldrh	r3, [r5, #12]
 800868c:	0598      	lsls	r0, r3, #22
 800868e:	d4f7      	bmi.n	8008680 <_vfiprintf_r+0x44>
 8008690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008692:	f7fc fea6 	bl	80053e2 <__retarget_lock_release_recursive>
 8008696:	e7f3      	b.n	8008680 <_vfiprintf_r+0x44>
 8008698:	2300      	movs	r3, #0
 800869a:	9309      	str	r3, [sp, #36]	; 0x24
 800869c:	2320      	movs	r3, #32
 800869e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086a2:	2330      	movs	r3, #48	; 0x30
 80086a4:	f04f 0901 	mov.w	r9, #1
 80086a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80086ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800885c <_vfiprintf_r+0x220>
 80086b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086b4:	4623      	mov	r3, r4
 80086b6:	469a      	mov	sl, r3
 80086b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086bc:	b10a      	cbz	r2, 80086c2 <_vfiprintf_r+0x86>
 80086be:	2a25      	cmp	r2, #37	; 0x25
 80086c0:	d1f9      	bne.n	80086b6 <_vfiprintf_r+0x7a>
 80086c2:	ebba 0b04 	subs.w	fp, sl, r4
 80086c6:	d00b      	beq.n	80086e0 <_vfiprintf_r+0xa4>
 80086c8:	465b      	mov	r3, fp
 80086ca:	4622      	mov	r2, r4
 80086cc:	4629      	mov	r1, r5
 80086ce:	4630      	mov	r0, r6
 80086d0:	f7ff ffa2 	bl	8008618 <__sfputs_r>
 80086d4:	3001      	adds	r0, #1
 80086d6:	f000 80a9 	beq.w	800882c <_vfiprintf_r+0x1f0>
 80086da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086dc:	445a      	add	r2, fp
 80086de:	9209      	str	r2, [sp, #36]	; 0x24
 80086e0:	f89a 3000 	ldrb.w	r3, [sl]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f000 80a1 	beq.w	800882c <_vfiprintf_r+0x1f0>
 80086ea:	2300      	movs	r3, #0
 80086ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086f4:	f10a 0a01 	add.w	sl, sl, #1
 80086f8:	9304      	str	r3, [sp, #16]
 80086fa:	9307      	str	r3, [sp, #28]
 80086fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008700:	931a      	str	r3, [sp, #104]	; 0x68
 8008702:	4654      	mov	r4, sl
 8008704:	2205      	movs	r2, #5
 8008706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800870a:	4854      	ldr	r0, [pc, #336]	; (800885c <_vfiprintf_r+0x220>)
 800870c:	f7fc fe6a 	bl	80053e4 <memchr>
 8008710:	9a04      	ldr	r2, [sp, #16]
 8008712:	b9d8      	cbnz	r0, 800874c <_vfiprintf_r+0x110>
 8008714:	06d1      	lsls	r1, r2, #27
 8008716:	bf44      	itt	mi
 8008718:	2320      	movmi	r3, #32
 800871a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800871e:	0713      	lsls	r3, r2, #28
 8008720:	bf44      	itt	mi
 8008722:	232b      	movmi	r3, #43	; 0x2b
 8008724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008728:	f89a 3000 	ldrb.w	r3, [sl]
 800872c:	2b2a      	cmp	r3, #42	; 0x2a
 800872e:	d015      	beq.n	800875c <_vfiprintf_r+0x120>
 8008730:	4654      	mov	r4, sl
 8008732:	2000      	movs	r0, #0
 8008734:	f04f 0c0a 	mov.w	ip, #10
 8008738:	9a07      	ldr	r2, [sp, #28]
 800873a:	4621      	mov	r1, r4
 800873c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008740:	3b30      	subs	r3, #48	; 0x30
 8008742:	2b09      	cmp	r3, #9
 8008744:	d94d      	bls.n	80087e2 <_vfiprintf_r+0x1a6>
 8008746:	b1b0      	cbz	r0, 8008776 <_vfiprintf_r+0x13a>
 8008748:	9207      	str	r2, [sp, #28]
 800874a:	e014      	b.n	8008776 <_vfiprintf_r+0x13a>
 800874c:	eba0 0308 	sub.w	r3, r0, r8
 8008750:	fa09 f303 	lsl.w	r3, r9, r3
 8008754:	4313      	orrs	r3, r2
 8008756:	46a2      	mov	sl, r4
 8008758:	9304      	str	r3, [sp, #16]
 800875a:	e7d2      	b.n	8008702 <_vfiprintf_r+0xc6>
 800875c:	9b03      	ldr	r3, [sp, #12]
 800875e:	1d19      	adds	r1, r3, #4
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	9103      	str	r1, [sp, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	bfbb      	ittet	lt
 8008768:	425b      	neglt	r3, r3
 800876a:	f042 0202 	orrlt.w	r2, r2, #2
 800876e:	9307      	strge	r3, [sp, #28]
 8008770:	9307      	strlt	r3, [sp, #28]
 8008772:	bfb8      	it	lt
 8008774:	9204      	strlt	r2, [sp, #16]
 8008776:	7823      	ldrb	r3, [r4, #0]
 8008778:	2b2e      	cmp	r3, #46	; 0x2e
 800877a:	d10c      	bne.n	8008796 <_vfiprintf_r+0x15a>
 800877c:	7863      	ldrb	r3, [r4, #1]
 800877e:	2b2a      	cmp	r3, #42	; 0x2a
 8008780:	d134      	bne.n	80087ec <_vfiprintf_r+0x1b0>
 8008782:	9b03      	ldr	r3, [sp, #12]
 8008784:	3402      	adds	r4, #2
 8008786:	1d1a      	adds	r2, r3, #4
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	9203      	str	r2, [sp, #12]
 800878c:	2b00      	cmp	r3, #0
 800878e:	bfb8      	it	lt
 8008790:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008794:	9305      	str	r3, [sp, #20]
 8008796:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008860 <_vfiprintf_r+0x224>
 800879a:	2203      	movs	r2, #3
 800879c:	4650      	mov	r0, sl
 800879e:	7821      	ldrb	r1, [r4, #0]
 80087a0:	f7fc fe20 	bl	80053e4 <memchr>
 80087a4:	b138      	cbz	r0, 80087b6 <_vfiprintf_r+0x17a>
 80087a6:	2240      	movs	r2, #64	; 0x40
 80087a8:	9b04      	ldr	r3, [sp, #16]
 80087aa:	eba0 000a 	sub.w	r0, r0, sl
 80087ae:	4082      	lsls	r2, r0
 80087b0:	4313      	orrs	r3, r2
 80087b2:	3401      	adds	r4, #1
 80087b4:	9304      	str	r3, [sp, #16]
 80087b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ba:	2206      	movs	r2, #6
 80087bc:	4829      	ldr	r0, [pc, #164]	; (8008864 <_vfiprintf_r+0x228>)
 80087be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087c2:	f7fc fe0f 	bl	80053e4 <memchr>
 80087c6:	2800      	cmp	r0, #0
 80087c8:	d03f      	beq.n	800884a <_vfiprintf_r+0x20e>
 80087ca:	4b27      	ldr	r3, [pc, #156]	; (8008868 <_vfiprintf_r+0x22c>)
 80087cc:	bb1b      	cbnz	r3, 8008816 <_vfiprintf_r+0x1da>
 80087ce:	9b03      	ldr	r3, [sp, #12]
 80087d0:	3307      	adds	r3, #7
 80087d2:	f023 0307 	bic.w	r3, r3, #7
 80087d6:	3308      	adds	r3, #8
 80087d8:	9303      	str	r3, [sp, #12]
 80087da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087dc:	443b      	add	r3, r7
 80087de:	9309      	str	r3, [sp, #36]	; 0x24
 80087e0:	e768      	b.n	80086b4 <_vfiprintf_r+0x78>
 80087e2:	460c      	mov	r4, r1
 80087e4:	2001      	movs	r0, #1
 80087e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80087ea:	e7a6      	b.n	800873a <_vfiprintf_r+0xfe>
 80087ec:	2300      	movs	r3, #0
 80087ee:	f04f 0c0a 	mov.w	ip, #10
 80087f2:	4619      	mov	r1, r3
 80087f4:	3401      	adds	r4, #1
 80087f6:	9305      	str	r3, [sp, #20]
 80087f8:	4620      	mov	r0, r4
 80087fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087fe:	3a30      	subs	r2, #48	; 0x30
 8008800:	2a09      	cmp	r2, #9
 8008802:	d903      	bls.n	800880c <_vfiprintf_r+0x1d0>
 8008804:	2b00      	cmp	r3, #0
 8008806:	d0c6      	beq.n	8008796 <_vfiprintf_r+0x15a>
 8008808:	9105      	str	r1, [sp, #20]
 800880a:	e7c4      	b.n	8008796 <_vfiprintf_r+0x15a>
 800880c:	4604      	mov	r4, r0
 800880e:	2301      	movs	r3, #1
 8008810:	fb0c 2101 	mla	r1, ip, r1, r2
 8008814:	e7f0      	b.n	80087f8 <_vfiprintf_r+0x1bc>
 8008816:	ab03      	add	r3, sp, #12
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	462a      	mov	r2, r5
 800881c:	4630      	mov	r0, r6
 800881e:	4b13      	ldr	r3, [pc, #76]	; (800886c <_vfiprintf_r+0x230>)
 8008820:	a904      	add	r1, sp, #16
 8008822:	f7fb fe7d 	bl	8004520 <_printf_float>
 8008826:	4607      	mov	r7, r0
 8008828:	1c78      	adds	r0, r7, #1
 800882a:	d1d6      	bne.n	80087da <_vfiprintf_r+0x19e>
 800882c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800882e:	07d9      	lsls	r1, r3, #31
 8008830:	d405      	bmi.n	800883e <_vfiprintf_r+0x202>
 8008832:	89ab      	ldrh	r3, [r5, #12]
 8008834:	059a      	lsls	r2, r3, #22
 8008836:	d402      	bmi.n	800883e <_vfiprintf_r+0x202>
 8008838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800883a:	f7fc fdd2 	bl	80053e2 <__retarget_lock_release_recursive>
 800883e:	89ab      	ldrh	r3, [r5, #12]
 8008840:	065b      	lsls	r3, r3, #25
 8008842:	f53f af1d 	bmi.w	8008680 <_vfiprintf_r+0x44>
 8008846:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008848:	e71c      	b.n	8008684 <_vfiprintf_r+0x48>
 800884a:	ab03      	add	r3, sp, #12
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	462a      	mov	r2, r5
 8008850:	4630      	mov	r0, r6
 8008852:	4b06      	ldr	r3, [pc, #24]	; (800886c <_vfiprintf_r+0x230>)
 8008854:	a904      	add	r1, sp, #16
 8008856:	f7fc f903 	bl	8004a60 <_printf_i>
 800885a:	e7e4      	b.n	8008826 <_vfiprintf_r+0x1ea>
 800885c:	0800afd9 	.word	0x0800afd9
 8008860:	0800afdf 	.word	0x0800afdf
 8008864:	0800afe3 	.word	0x0800afe3
 8008868:	08004521 	.word	0x08004521
 800886c:	08008619 	.word	0x08008619

08008870 <__swbuf_r>:
 8008870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008872:	460e      	mov	r6, r1
 8008874:	4614      	mov	r4, r2
 8008876:	4605      	mov	r5, r0
 8008878:	b118      	cbz	r0, 8008882 <__swbuf_r+0x12>
 800887a:	6a03      	ldr	r3, [r0, #32]
 800887c:	b90b      	cbnz	r3, 8008882 <__swbuf_r+0x12>
 800887e:	f7fc fc99 	bl	80051b4 <__sinit>
 8008882:	69a3      	ldr	r3, [r4, #24]
 8008884:	60a3      	str	r3, [r4, #8]
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	071a      	lsls	r2, r3, #28
 800888a:	d525      	bpl.n	80088d8 <__swbuf_r+0x68>
 800888c:	6923      	ldr	r3, [r4, #16]
 800888e:	b31b      	cbz	r3, 80088d8 <__swbuf_r+0x68>
 8008890:	6823      	ldr	r3, [r4, #0]
 8008892:	6922      	ldr	r2, [r4, #16]
 8008894:	b2f6      	uxtb	r6, r6
 8008896:	1a98      	subs	r0, r3, r2
 8008898:	6963      	ldr	r3, [r4, #20]
 800889a:	4637      	mov	r7, r6
 800889c:	4283      	cmp	r3, r0
 800889e:	dc04      	bgt.n	80088aa <__swbuf_r+0x3a>
 80088a0:	4621      	mov	r1, r4
 80088a2:	4628      	mov	r0, r5
 80088a4:	f7ff fa30 	bl	8007d08 <_fflush_r>
 80088a8:	b9e0      	cbnz	r0, 80088e4 <__swbuf_r+0x74>
 80088aa:	68a3      	ldr	r3, [r4, #8]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	60a3      	str	r3, [r4, #8]
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	6022      	str	r2, [r4, #0]
 80088b6:	701e      	strb	r6, [r3, #0]
 80088b8:	6962      	ldr	r2, [r4, #20]
 80088ba:	1c43      	adds	r3, r0, #1
 80088bc:	429a      	cmp	r2, r3
 80088be:	d004      	beq.n	80088ca <__swbuf_r+0x5a>
 80088c0:	89a3      	ldrh	r3, [r4, #12]
 80088c2:	07db      	lsls	r3, r3, #31
 80088c4:	d506      	bpl.n	80088d4 <__swbuf_r+0x64>
 80088c6:	2e0a      	cmp	r6, #10
 80088c8:	d104      	bne.n	80088d4 <__swbuf_r+0x64>
 80088ca:	4621      	mov	r1, r4
 80088cc:	4628      	mov	r0, r5
 80088ce:	f7ff fa1b 	bl	8007d08 <_fflush_r>
 80088d2:	b938      	cbnz	r0, 80088e4 <__swbuf_r+0x74>
 80088d4:	4638      	mov	r0, r7
 80088d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088d8:	4621      	mov	r1, r4
 80088da:	4628      	mov	r0, r5
 80088dc:	f000 f806 	bl	80088ec <__swsetup_r>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d0d5      	beq.n	8008890 <__swbuf_r+0x20>
 80088e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80088e8:	e7f4      	b.n	80088d4 <__swbuf_r+0x64>
	...

080088ec <__swsetup_r>:
 80088ec:	b538      	push	{r3, r4, r5, lr}
 80088ee:	4b2a      	ldr	r3, [pc, #168]	; (8008998 <__swsetup_r+0xac>)
 80088f0:	4605      	mov	r5, r0
 80088f2:	6818      	ldr	r0, [r3, #0]
 80088f4:	460c      	mov	r4, r1
 80088f6:	b118      	cbz	r0, 8008900 <__swsetup_r+0x14>
 80088f8:	6a03      	ldr	r3, [r0, #32]
 80088fa:	b90b      	cbnz	r3, 8008900 <__swsetup_r+0x14>
 80088fc:	f7fc fc5a 	bl	80051b4 <__sinit>
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008906:	0718      	lsls	r0, r3, #28
 8008908:	d422      	bmi.n	8008950 <__swsetup_r+0x64>
 800890a:	06d9      	lsls	r1, r3, #27
 800890c:	d407      	bmi.n	800891e <__swsetup_r+0x32>
 800890e:	2309      	movs	r3, #9
 8008910:	602b      	str	r3, [r5, #0]
 8008912:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800891a:	81a3      	strh	r3, [r4, #12]
 800891c:	e034      	b.n	8008988 <__swsetup_r+0x9c>
 800891e:	0758      	lsls	r0, r3, #29
 8008920:	d512      	bpl.n	8008948 <__swsetup_r+0x5c>
 8008922:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008924:	b141      	cbz	r1, 8008938 <__swsetup_r+0x4c>
 8008926:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800892a:	4299      	cmp	r1, r3
 800892c:	d002      	beq.n	8008934 <__swsetup_r+0x48>
 800892e:	4628      	mov	r0, r5
 8008930:	f7fd fbda 	bl	80060e8 <_free_r>
 8008934:	2300      	movs	r3, #0
 8008936:	6363      	str	r3, [r4, #52]	; 0x34
 8008938:	89a3      	ldrh	r3, [r4, #12]
 800893a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800893e:	81a3      	strh	r3, [r4, #12]
 8008940:	2300      	movs	r3, #0
 8008942:	6063      	str	r3, [r4, #4]
 8008944:	6923      	ldr	r3, [r4, #16]
 8008946:	6023      	str	r3, [r4, #0]
 8008948:	89a3      	ldrh	r3, [r4, #12]
 800894a:	f043 0308 	orr.w	r3, r3, #8
 800894e:	81a3      	strh	r3, [r4, #12]
 8008950:	6923      	ldr	r3, [r4, #16]
 8008952:	b94b      	cbnz	r3, 8008968 <__swsetup_r+0x7c>
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800895a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800895e:	d003      	beq.n	8008968 <__swsetup_r+0x7c>
 8008960:	4621      	mov	r1, r4
 8008962:	4628      	mov	r0, r5
 8008964:	f000 f883 	bl	8008a6e <__smakebuf_r>
 8008968:	89a0      	ldrh	r0, [r4, #12]
 800896a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800896e:	f010 0301 	ands.w	r3, r0, #1
 8008972:	d00a      	beq.n	800898a <__swsetup_r+0x9e>
 8008974:	2300      	movs	r3, #0
 8008976:	60a3      	str	r3, [r4, #8]
 8008978:	6963      	ldr	r3, [r4, #20]
 800897a:	425b      	negs	r3, r3
 800897c:	61a3      	str	r3, [r4, #24]
 800897e:	6923      	ldr	r3, [r4, #16]
 8008980:	b943      	cbnz	r3, 8008994 <__swsetup_r+0xa8>
 8008982:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008986:	d1c4      	bne.n	8008912 <__swsetup_r+0x26>
 8008988:	bd38      	pop	{r3, r4, r5, pc}
 800898a:	0781      	lsls	r1, r0, #30
 800898c:	bf58      	it	pl
 800898e:	6963      	ldrpl	r3, [r4, #20]
 8008990:	60a3      	str	r3, [r4, #8]
 8008992:	e7f4      	b.n	800897e <__swsetup_r+0x92>
 8008994:	2000      	movs	r0, #0
 8008996:	e7f7      	b.n	8008988 <__swsetup_r+0x9c>
 8008998:	20000074 	.word	0x20000074

0800899c <_raise_r>:
 800899c:	291f      	cmp	r1, #31
 800899e:	b538      	push	{r3, r4, r5, lr}
 80089a0:	4604      	mov	r4, r0
 80089a2:	460d      	mov	r5, r1
 80089a4:	d904      	bls.n	80089b0 <_raise_r+0x14>
 80089a6:	2316      	movs	r3, #22
 80089a8:	6003      	str	r3, [r0, #0]
 80089aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089ae:	bd38      	pop	{r3, r4, r5, pc}
 80089b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80089b2:	b112      	cbz	r2, 80089ba <_raise_r+0x1e>
 80089b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089b8:	b94b      	cbnz	r3, 80089ce <_raise_r+0x32>
 80089ba:	4620      	mov	r0, r4
 80089bc:	f000 f830 	bl	8008a20 <_getpid_r>
 80089c0:	462a      	mov	r2, r5
 80089c2:	4601      	mov	r1, r0
 80089c4:	4620      	mov	r0, r4
 80089c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ca:	f000 b817 	b.w	80089fc <_kill_r>
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d00a      	beq.n	80089e8 <_raise_r+0x4c>
 80089d2:	1c59      	adds	r1, r3, #1
 80089d4:	d103      	bne.n	80089de <_raise_r+0x42>
 80089d6:	2316      	movs	r3, #22
 80089d8:	6003      	str	r3, [r0, #0]
 80089da:	2001      	movs	r0, #1
 80089dc:	e7e7      	b.n	80089ae <_raise_r+0x12>
 80089de:	2400      	movs	r4, #0
 80089e0:	4628      	mov	r0, r5
 80089e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089e6:	4798      	blx	r3
 80089e8:	2000      	movs	r0, #0
 80089ea:	e7e0      	b.n	80089ae <_raise_r+0x12>

080089ec <raise>:
 80089ec:	4b02      	ldr	r3, [pc, #8]	; (80089f8 <raise+0xc>)
 80089ee:	4601      	mov	r1, r0
 80089f0:	6818      	ldr	r0, [r3, #0]
 80089f2:	f7ff bfd3 	b.w	800899c <_raise_r>
 80089f6:	bf00      	nop
 80089f8:	20000074 	.word	0x20000074

080089fc <_kill_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	2300      	movs	r3, #0
 8008a00:	4d06      	ldr	r5, [pc, #24]	; (8008a1c <_kill_r+0x20>)
 8008a02:	4604      	mov	r4, r0
 8008a04:	4608      	mov	r0, r1
 8008a06:	4611      	mov	r1, r2
 8008a08:	602b      	str	r3, [r5, #0]
 8008a0a:	f7f8 ffcb 	bl	80019a4 <_kill>
 8008a0e:	1c43      	adds	r3, r0, #1
 8008a10:	d102      	bne.n	8008a18 <_kill_r+0x1c>
 8008a12:	682b      	ldr	r3, [r5, #0]
 8008a14:	b103      	cbz	r3, 8008a18 <_kill_r+0x1c>
 8008a16:	6023      	str	r3, [r4, #0]
 8008a18:	bd38      	pop	{r3, r4, r5, pc}
 8008a1a:	bf00      	nop
 8008a1c:	20000878 	.word	0x20000878

08008a20 <_getpid_r>:
 8008a20:	f7f8 bfb9 	b.w	8001996 <_getpid>

08008a24 <__swhatbuf_r>:
 8008a24:	b570      	push	{r4, r5, r6, lr}
 8008a26:	460c      	mov	r4, r1
 8008a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2c:	4615      	mov	r5, r2
 8008a2e:	2900      	cmp	r1, #0
 8008a30:	461e      	mov	r6, r3
 8008a32:	b096      	sub	sp, #88	; 0x58
 8008a34:	da0c      	bge.n	8008a50 <__swhatbuf_r+0x2c>
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	2100      	movs	r1, #0
 8008a3a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a3e:	bf0c      	ite	eq
 8008a40:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008a44:	2340      	movne	r3, #64	; 0x40
 8008a46:	2000      	movs	r0, #0
 8008a48:	6031      	str	r1, [r6, #0]
 8008a4a:	602b      	str	r3, [r5, #0]
 8008a4c:	b016      	add	sp, #88	; 0x58
 8008a4e:	bd70      	pop	{r4, r5, r6, pc}
 8008a50:	466a      	mov	r2, sp
 8008a52:	f000 f849 	bl	8008ae8 <_fstat_r>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	dbed      	blt.n	8008a36 <__swhatbuf_r+0x12>
 8008a5a:	9901      	ldr	r1, [sp, #4]
 8008a5c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008a60:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008a64:	4259      	negs	r1, r3
 8008a66:	4159      	adcs	r1, r3
 8008a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a6c:	e7eb      	b.n	8008a46 <__swhatbuf_r+0x22>

08008a6e <__smakebuf_r>:
 8008a6e:	898b      	ldrh	r3, [r1, #12]
 8008a70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a72:	079d      	lsls	r5, r3, #30
 8008a74:	4606      	mov	r6, r0
 8008a76:	460c      	mov	r4, r1
 8008a78:	d507      	bpl.n	8008a8a <__smakebuf_r+0x1c>
 8008a7a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a7e:	6023      	str	r3, [r4, #0]
 8008a80:	6123      	str	r3, [r4, #16]
 8008a82:	2301      	movs	r3, #1
 8008a84:	6163      	str	r3, [r4, #20]
 8008a86:	b002      	add	sp, #8
 8008a88:	bd70      	pop	{r4, r5, r6, pc}
 8008a8a:	466a      	mov	r2, sp
 8008a8c:	ab01      	add	r3, sp, #4
 8008a8e:	f7ff ffc9 	bl	8008a24 <__swhatbuf_r>
 8008a92:	9900      	ldr	r1, [sp, #0]
 8008a94:	4605      	mov	r5, r0
 8008a96:	4630      	mov	r0, r6
 8008a98:	f7fd fb96 	bl	80061c8 <_malloc_r>
 8008a9c:	b948      	cbnz	r0, 8008ab2 <__smakebuf_r+0x44>
 8008a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aa2:	059a      	lsls	r2, r3, #22
 8008aa4:	d4ef      	bmi.n	8008a86 <__smakebuf_r+0x18>
 8008aa6:	f023 0303 	bic.w	r3, r3, #3
 8008aaa:	f043 0302 	orr.w	r3, r3, #2
 8008aae:	81a3      	strh	r3, [r4, #12]
 8008ab0:	e7e3      	b.n	8008a7a <__smakebuf_r+0xc>
 8008ab2:	89a3      	ldrh	r3, [r4, #12]
 8008ab4:	6020      	str	r0, [r4, #0]
 8008ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aba:	81a3      	strh	r3, [r4, #12]
 8008abc:	9b00      	ldr	r3, [sp, #0]
 8008abe:	6120      	str	r0, [r4, #16]
 8008ac0:	6163      	str	r3, [r4, #20]
 8008ac2:	9b01      	ldr	r3, [sp, #4]
 8008ac4:	b15b      	cbz	r3, 8008ade <__smakebuf_r+0x70>
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008acc:	f000 f81e 	bl	8008b0c <_isatty_r>
 8008ad0:	b128      	cbz	r0, 8008ade <__smakebuf_r+0x70>
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	f023 0303 	bic.w	r3, r3, #3
 8008ad8:	f043 0301 	orr.w	r3, r3, #1
 8008adc:	81a3      	strh	r3, [r4, #12]
 8008ade:	89a3      	ldrh	r3, [r4, #12]
 8008ae0:	431d      	orrs	r5, r3
 8008ae2:	81a5      	strh	r5, [r4, #12]
 8008ae4:	e7cf      	b.n	8008a86 <__smakebuf_r+0x18>
	...

08008ae8 <_fstat_r>:
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	2300      	movs	r3, #0
 8008aec:	4d06      	ldr	r5, [pc, #24]	; (8008b08 <_fstat_r+0x20>)
 8008aee:	4604      	mov	r4, r0
 8008af0:	4608      	mov	r0, r1
 8008af2:	4611      	mov	r1, r2
 8008af4:	602b      	str	r3, [r5, #0]
 8008af6:	f7f8 ffb3 	bl	8001a60 <_fstat>
 8008afa:	1c43      	adds	r3, r0, #1
 8008afc:	d102      	bne.n	8008b04 <_fstat_r+0x1c>
 8008afe:	682b      	ldr	r3, [r5, #0]
 8008b00:	b103      	cbz	r3, 8008b04 <_fstat_r+0x1c>
 8008b02:	6023      	str	r3, [r4, #0]
 8008b04:	bd38      	pop	{r3, r4, r5, pc}
 8008b06:	bf00      	nop
 8008b08:	20000878 	.word	0x20000878

08008b0c <_isatty_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	2300      	movs	r3, #0
 8008b10:	4d05      	ldr	r5, [pc, #20]	; (8008b28 <_isatty_r+0x1c>)
 8008b12:	4604      	mov	r4, r0
 8008b14:	4608      	mov	r0, r1
 8008b16:	602b      	str	r3, [r5, #0]
 8008b18:	f7f8 ffb1 	bl	8001a7e <_isatty>
 8008b1c:	1c43      	adds	r3, r0, #1
 8008b1e:	d102      	bne.n	8008b26 <_isatty_r+0x1a>
 8008b20:	682b      	ldr	r3, [r5, #0]
 8008b22:	b103      	cbz	r3, 8008b26 <_isatty_r+0x1a>
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	bd38      	pop	{r3, r4, r5, pc}
 8008b28:	20000878 	.word	0x20000878

08008b2c <_init>:
 8008b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2e:	bf00      	nop
 8008b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b32:	bc08      	pop	{r3}
 8008b34:	469e      	mov	lr, r3
 8008b36:	4770      	bx	lr

08008b38 <_fini>:
 8008b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3a:	bf00      	nop
 8008b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b3e:	bc08      	pop	{r3}
 8008b40:	469e      	mov	lr, r3
 8008b42:	4770      	bx	lr

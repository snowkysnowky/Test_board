
Test_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fbc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001948  080090d0  080090d0  000190d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa18  0800aa18  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa18  0800aa18  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa18  0800aa18  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa18  0800aa18  0001aa18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa1c  0800aa1c  0001aa1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800aa20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b8  200001e4  0800ac04  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000089c  0800ac04  0002089c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d4bc  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002819  00000000  00000000  0002d70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f50  00000000  00000000  0002ff28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd6  00000000  00000000  00030e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000194ff  00000000  00000000  00031a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000119fb  00000000  00000000  0004af4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cdb8  00000000  00000000  0005c948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000546c  00000000  00000000  000e9700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000eeb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080090b4 	.word	0x080090b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080090b4 	.word	0x080090b4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	; 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__aeabi_d2lz>:
 8000eec:	b538      	push	{r3, r4, r5, lr}
 8000eee:	4605      	mov	r5, r0
 8000ef0:	460c      	mov	r4, r1
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	4628      	mov	r0, r5
 8000ef8:	4621      	mov	r1, r4
 8000efa:	f7ff fe13 	bl	8000b24 <__aeabi_dcmplt>
 8000efe:	b928      	cbnz	r0, 8000f0c <__aeabi_d2lz+0x20>
 8000f00:	4628      	mov	r0, r5
 8000f02:	4621      	mov	r1, r4
 8000f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f08:	f000 b80a 	b.w	8000f20 <__aeabi_d2ulz>
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000f12:	f000 f805 	bl	8000f20 <__aeabi_d2ulz>
 8000f16:	4240      	negs	r0, r0
 8000f18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f1c:	bd38      	pop	{r3, r4, r5, pc}
 8000f1e:	bf00      	nop

08000f20 <__aeabi_d2ulz>:
 8000f20:	b5d0      	push	{r4, r6, r7, lr}
 8000f22:	2200      	movs	r2, #0
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <__aeabi_d2ulz+0x34>)
 8000f26:	4606      	mov	r6, r0
 8000f28:	460f      	mov	r7, r1
 8000f2a:	f7ff fb89 	bl	8000640 <__aeabi_dmul>
 8000f2e:	f7ff fe5f 	bl	8000bf0 <__aeabi_d2uiz>
 8000f32:	4604      	mov	r4, r0
 8000f34:	f7ff fb0a 	bl	800054c <__aeabi_ui2d>
 8000f38:	2200      	movs	r2, #0
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <__aeabi_d2ulz+0x38>)
 8000f3c:	f7ff fb80 	bl	8000640 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4630      	mov	r0, r6
 8000f46:	4639      	mov	r1, r7
 8000f48:	f7ff f9c2 	bl	80002d0 <__aeabi_dsub>
 8000f4c:	f7ff fe50 	bl	8000bf0 <__aeabi_d2uiz>
 8000f50:	4621      	mov	r1, r4
 8000f52:	bdd0      	pop	{r4, r6, r7, pc}
 8000f54:	3df00000 	.word	0x3df00000
 8000f58:	41f00000 	.word	0x41f00000

08000f5c <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 8000f60:	4806      	ldr	r0, [pc, #24]	; (8000f7c <DS18B20_StartAll+0x20>)
 8000f62:	f000 fc7a 	bl	800185a <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 8000f66:	21cc      	movs	r1, #204	; 0xcc
 8000f68:	4804      	ldr	r0, [pc, #16]	; (8000f7c <DS18B20_StartAll+0x20>)
 8000f6a:	f000 fcf3 	bl	8001954 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 8000f6e:	2144      	movs	r1, #68	; 0x44
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <DS18B20_StartAll+0x20>)
 8000f72:	f000 fcef 	bl	8001954 <OneWire_WriteByte>
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000240 	.word	0x20000240

08000f80 <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount) // If read sensor is not availible
 8000f8c:	4b4f      	ldr	r3, [pc, #316]	; (80010cc <DS18B20_Read+0x14c>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	79fa      	ldrb	r2, [r7, #7]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d301      	bcc.n	8000f9a <DS18B20_Read+0x1a>
		return 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e094      	b.n	80010c4 <DS18B20_Read+0x144>

	uint16_t temperature;
	uint8_t resolution;
	float result;
	uint8_t i = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	74fb      	strb	r3, [r7, #19]
	uint8_t crc;

#endif


	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	011b      	lsls	r3, r3, #4
 8000fa2:	4a4b      	ldr	r2, [pc, #300]	; (80010d0 <DS18B20_Read+0x150>)
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f93e 	bl	8001228 <DS18B20_Is>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <DS18B20_Read+0x36>
		return 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e086      	b.n	80010c4 <DS18B20_Read+0x144>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 8000fb6:	4847      	ldr	r0, [pc, #284]	; (80010d4 <DS18B20_Read+0x154>)
 8000fb8:	f000 fca2 	bl	8001900 <OneWire_ReadBit>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <DS18B20_Read+0x46>
		return 0; // Busy bus - conversion is not finished
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e07e      	b.n	80010c4 <DS18B20_Read+0x144>

	OneWire_Reset(&OneWire); // Reset the bus
 8000fc6:	4843      	ldr	r0, [pc, #268]	; (80010d4 <DS18B20_Read+0x154>)
 8000fc8:	f000 fc47 	bl	800185a <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	011b      	lsls	r3, r3, #4
 8000fd0:	4a3f      	ldr	r2, [pc, #252]	; (80010d0 <DS18B20_Read+0x150>)
 8000fd2:	4413      	add	r3, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	483f      	ldr	r0, [pc, #252]	; (80010d4 <DS18B20_Read+0x154>)
 8000fd8:	f000 fdf0 	bl	8001bbc <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8000fdc:	21be      	movs	r1, #190	; 0xbe
 8000fde:	483d      	ldr	r0, [pc, #244]	; (80010d4 <DS18B20_Read+0x154>)
 8000fe0:	f000 fcb8 	bl	8001954 <OneWire_WriteByte>

	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	74fb      	strb	r3, [r7, #19]
 8000fe8:	e00d      	b.n	8001006 <DS18B20_Read+0x86>
		data[i] = OneWire_ReadByte(&OneWire);
 8000fea:	7cfc      	ldrb	r4, [r7, #19]
 8000fec:	4839      	ldr	r0, [pc, #228]	; (80010d4 <DS18B20_Read+0x154>)
 8000fee:	f000 fccf 	bl	8001990 <OneWire_ReadByte>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	f104 0318 	add.w	r3, r4, #24
 8000ffa:	443b      	add	r3, r7
 8000ffc:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8001000:	7cfb      	ldrb	r3, [r7, #19]
 8001002:	3301      	adds	r3, #1
 8001004:	74fb      	strb	r3, [r7, #19]
 8001006:	7cfb      	ldrb	r3, [r7, #19]
 8001008:	2b04      	cmp	r3, #4
 800100a:	d9ee      	bls.n	8000fea <DS18B20_Read+0x6a>
	crc = OneWire_CRC8(data, 8); // CRC calculation

	if (crc != data[8])
		return 0; // CRC invalid
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 800100c:	7a3b      	ldrb	r3, [r7, #8]
 800100e:	b21a      	sxth	r2, r3
 8001010:	7a7b      	ldrb	r3, [r7, #9]
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	b21b      	sxth	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	b21b      	sxth	r3, r3
 800101a:	823b      	strh	r3, [r7, #16]

	OneWire_Reset(&OneWire); // Reset the bus
 800101c:	482d      	ldr	r0, [pc, #180]	; (80010d4 <DS18B20_Read+0x154>)
 800101e:	f000 fc1c 	bl	800185a <OneWire_Reset>

	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 8001022:	7b3b      	ldrb	r3, [r7, #12]
 8001024:	115b      	asrs	r3, r3, #5
 8001026:	b2db      	uxtb	r3, r3
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	b2db      	uxtb	r3, r3
 800102e:	3309      	adds	r3, #9
 8001030:	73fb      	strb	r3, [r7, #15]

	switch (resolution) // Chceck the correct value dur to resolution
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	3b09      	subs	r3, #9
 8001036:	2b03      	cmp	r3, #3
 8001038:	d83e      	bhi.n	80010b8 <DS18B20_Read+0x138>
 800103a:	a201      	add	r2, pc, #4	; (adr r2, 8001040 <DS18B20_Read+0xc0>)
 800103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001040:	08001051 	.word	0x08001051
 8001044:	0800106b 	.word	0x0800106b
 8001048:	08001085 	.word	0x08001085
 800104c:	0800109f 	.word	0x0800109f
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 8001050:	8a3b      	ldrh	r3, [r7, #16]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fef6 	bl	8000e44 <__aeabi_i2f>
 8001058:	4603      	mov	r3, r0
 800105a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f87e 	bl	8000160 <__aeabi_fmul>
 8001064:	4603      	mov	r3, r0
 8001066:	617b      	str	r3, [r7, #20]
		break;
 8001068:	e028      	b.n	80010bc <DS18B20_Read+0x13c>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 800106a:	8a3b      	ldrh	r3, [r7, #16]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fee9 	bl	8000e44 <__aeabi_i2f>
 8001072:	4603      	mov	r3, r0
 8001074:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff f871 	bl	8000160 <__aeabi_fmul>
 800107e:	4603      	mov	r3, r0
 8001080:	617b      	str	r3, [r7, #20]
		 break;
 8001082:	e01b      	b.n	80010bc <DS18B20_Read+0x13c>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 8001084:	8a3b      	ldrh	r3, [r7, #16]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fedc 	bl	8000e44 <__aeabi_i2f>
 800108c:	4603      	mov	r3, r0
 800108e:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff f864 	bl	8000160 <__aeabi_fmul>
 8001098:	4603      	mov	r3, r0
 800109a:	617b      	str	r3, [r7, #20]
		break;
 800109c:	e00e      	b.n	80010bc <DS18B20_Read+0x13c>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 800109e:	8a3b      	ldrh	r3, [r7, #16]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fecf 	bl	8000e44 <__aeabi_i2f>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f857 	bl	8000160 <__aeabi_fmul>
 80010b2:	4603      	mov	r3, r0
 80010b4:	617b      	str	r3, [r7, #20]
		 break;
 80010b6:	e001      	b.n	80010bc <DS18B20_Read+0x13c>
		default:
			result = 0xFF;
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <DS18B20_Read+0x158>)
 80010ba:	617b      	str	r3, [r7, #20]
	}

	*destination = result;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	601a      	str	r2, [r3, #0]

	return 1; //temperature valid
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	371c      	adds	r7, #28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd90      	pop	{r4, r7, pc}
 80010cc:	20000254 	.word	0x20000254
 80010d0:	20000200 	.word	0x20000200
 80010d4:	20000240 	.word	0x20000240
 80010d8:	437f0000 	.word	0x437f0000

080010dc <DS18B20_SetResolution>:

	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	460a      	mov	r2, r1
 80010e6:	71fb      	strb	r3, [r7, #7]
 80010e8:	4613      	mov	r3, r2
 80010ea:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 80010ec:	4b4b      	ldr	r3, [pc, #300]	; (800121c <DS18B20_SetResolution+0x140>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	79fa      	ldrb	r2, [r7, #7]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d301      	bcc.n	80010fa <DS18B20_SetResolution+0x1e>
		return 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e08c      	b.n	8001214 <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	011b      	lsls	r3, r3, #4
 80010fe:	4a48      	ldr	r2, [pc, #288]	; (8001220 <DS18B20_SetResolution+0x144>)
 8001100:	4413      	add	r3, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f890 	bl	8001228 <DS18B20_Is>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <DS18B20_SetResolution+0x36>
		return 0;
 800110e:	2300      	movs	r3, #0
 8001110:	e080      	b.n	8001214 <DS18B20_SetResolution+0x138>

	OneWire_Reset(&OneWire); // Reset the bus
 8001112:	4844      	ldr	r0, [pc, #272]	; (8001224 <DS18B20_SetResolution+0x148>)
 8001114:	f000 fba1 	bl	800185a <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	4a40      	ldr	r2, [pc, #256]	; (8001220 <DS18B20_SetResolution+0x144>)
 800111e:	4413      	add	r3, r2
 8001120:	4619      	mov	r1, r3
 8001122:	4840      	ldr	r0, [pc, #256]	; (8001224 <DS18B20_SetResolution+0x148>)
 8001124:	f000 fd4a 	bl	8001bbc <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8001128:	21be      	movs	r1, #190	; 0xbe
 800112a:	483e      	ldr	r0, [pc, #248]	; (8001224 <DS18B20_SetResolution+0x148>)
 800112c:	f000 fc12 	bl	8001954 <OneWire_WriteByte>

	OneWire_ReadByte(&OneWire);
 8001130:	483c      	ldr	r0, [pc, #240]	; (8001224 <DS18B20_SetResolution+0x148>)
 8001132:	f000 fc2d 	bl	8001990 <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 8001136:	483b      	ldr	r0, [pc, #236]	; (8001224 <DS18B20_SetResolution+0x148>)
 8001138:	f000 fc2a 	bl	8001990 <OneWire_ReadByte>

	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 800113c:	4839      	ldr	r0, [pc, #228]	; (8001224 <DS18B20_SetResolution+0x148>)
 800113e:	f000 fc27 	bl	8001990 <OneWire_ReadByte>
 8001142:	4603      	mov	r3, r0
 8001144:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 8001146:	4837      	ldr	r0, [pc, #220]	; (8001224 <DS18B20_SetResolution+0x148>)
 8001148:	f000 fc22 	bl	8001990 <OneWire_ReadByte>
 800114c:	4603      	mov	r3, r0
 800114e:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 8001150:	4834      	ldr	r0, [pc, #208]	; (8001224 <DS18B20_SetResolution+0x148>)
 8001152:	f000 fc1d 	bl	8001990 <OneWire_ReadByte>
 8001156:	4603      	mov	r3, r0
 8001158:	73fb      	strb	r3, [r7, #15]

	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	2b09      	cmp	r3, #9
 800115e:	d108      	bne.n	8001172 <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001166:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	f023 0320 	bic.w	r3, r3, #32
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e022      	b.n	80011b8 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	2b0a      	cmp	r3, #10
 8001176:	d108      	bne.n	800118a <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800117e:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	f043 0320 	orr.w	r3, r3, #32
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	e016      	b.n	80011b8 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 800118a:	79bb      	ldrb	r3, [r7, #6]
 800118c:	2b0b      	cmp	r3, #11
 800118e:	d108      	bne.n	80011a2 <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001196:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f023 0320 	bic.w	r3, r3, #32
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e00a      	b.n	80011b8 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	2b0c      	cmp	r3, #12
 80011a6:	d107      	bne.n	80011b8 <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ae:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	f043 0320 	orr.w	r3, r3, #32
 80011b6:	73fb      	strb	r3, [r7, #15]
	}

	OneWire_Reset(&OneWire); // Reset the bus
 80011b8:	481a      	ldr	r0, [pc, #104]	; (8001224 <DS18B20_SetResolution+0x148>)
 80011ba:	f000 fb4e 	bl	800185a <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	4a17      	ldr	r2, [pc, #92]	; (8001220 <DS18B20_SetResolution+0x144>)
 80011c4:	4413      	add	r3, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	4816      	ldr	r0, [pc, #88]	; (8001224 <DS18B20_SetResolution+0x148>)
 80011ca:	f000 fcf7 	bl	8001bbc <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 80011ce:	214e      	movs	r1, #78	; 0x4e
 80011d0:	4814      	ldr	r0, [pc, #80]	; (8001224 <DS18B20_SetResolution+0x148>)
 80011d2:	f000 fbbf 	bl	8001954 <OneWire_WriteByte>

	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 80011d6:	7bbb      	ldrb	r3, [r7, #14]
 80011d8:	4619      	mov	r1, r3
 80011da:	4812      	ldr	r0, [pc, #72]	; (8001224 <DS18B20_SetResolution+0x148>)
 80011dc:	f000 fbba 	bl	8001954 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 80011e0:	7b7b      	ldrb	r3, [r7, #13]
 80011e2:	4619      	mov	r1, r3
 80011e4:	480f      	ldr	r0, [pc, #60]	; (8001224 <DS18B20_SetResolution+0x148>)
 80011e6:	f000 fbb5 	bl	8001954 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	4619      	mov	r1, r3
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <DS18B20_SetResolution+0x148>)
 80011f0:	f000 fbb0 	bl	8001954 <OneWire_WriteByte>

	OneWire_Reset(&OneWire); // Reset the bus
 80011f4:	480b      	ldr	r0, [pc, #44]	; (8001224 <DS18B20_SetResolution+0x148>)
 80011f6:	f000 fb30 	bl	800185a <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	011b      	lsls	r3, r3, #4
 80011fe:	4a08      	ldr	r2, [pc, #32]	; (8001220 <DS18B20_SetResolution+0x144>)
 8001200:	4413      	add	r3, r2
 8001202:	4619      	mov	r1, r3
 8001204:	4807      	ldr	r0, [pc, #28]	; (8001224 <DS18B20_SetResolution+0x148>)
 8001206:	f000 fcd9 	bl	8001bbc <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 800120a:	2148      	movs	r1, #72	; 0x48
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <DS18B20_SetResolution+0x148>)
 800120e:	f000 fba1 	bl	8001954 <OneWire_WriteByte>

	return 1;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000254 	.word	0x20000254
 8001220:	20000200 	.word	0x20000200
 8001224:	20000240 	.word	0x20000240

08001228 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b28      	cmp	r3, #40	; 0x28
 8001236:	d101      	bne.n	800123c <DS18B20_Is+0x14>
		return 1;
 8001238:	2301      	movs	r3, #1
 800123a:	e000      	b.n	800123e <DS18B20_Is+0x16>
	return 0;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <DS18B20_AllDone+0x10>)
 800124e:	f000 fb57 	bl	8001900 <OneWire_ReadBit>
 8001252:	4603      	mov	r3, r0
}
 8001254:	4618      	mov	r0, r3
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000240 	.word	0x20000240

0800125c <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 8001262:	f7ff fff1 	bl	8001248 <DS18B20_AllDone>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d02e      	beq.n	80012ca <DS18B20_ReadAll+0x6e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 800126c:	2300      	movs	r3, #0
 800126e:	71fb      	strb	r3, [r7, #7]
 8001270:	e026      	b.n	80012c0 <DS18B20_ReadAll+0x64>
		{
			ds18b20[i].ValidDataFlag = 0;
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	4a17      	ldr	r2, [pc, #92]	; (80012d4 <DS18B20_ReadAll+0x78>)
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	4413      	add	r3, r2
 800127a:	330c      	adds	r3, #12
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	4a13      	ldr	r2, [pc, #76]	; (80012d4 <DS18B20_ReadAll+0x78>)
 8001286:	4413      	add	r3, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ffcd 	bl	8001228 <DS18B20_Is>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d012      	beq.n	80012ba <DS18B20_ReadAll+0x5e>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	3308      	adds	r3, #8
 800129a:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <DS18B20_ReadAll+0x78>)
 800129c:	441a      	add	r2, r3
 800129e:	79fc      	ldrb	r4, [r7, #7]
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fe6b 	bl	8000f80 <DS18B20_Read>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4619      	mov	r1, r3
 80012ae:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <DS18B20_ReadAll+0x78>)
 80012b0:	0123      	lsls	r3, r4, #4
 80012b2:	4413      	add	r3, r2
 80012b4:	330c      	adds	r3, #12
 80012b6:	460a      	mov	r2, r1
 80012b8:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	3301      	adds	r3, #1
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <DS18B20_ReadAll+0x7c>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	79fa      	ldrb	r2, [r7, #7]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d3d3      	bcc.n	8001272 <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd90      	pop	{r4, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000200 	.word	0x20000200
 80012d8:	20000254 	.word	0x20000254

080012dc <DS18B20_GetROM>:

void DS18B20_GetROM(uint8_t number, uint8_t* ROM)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount)
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <DS18B20_GetROM+0x50>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	79fa      	ldrb	r2, [r7, #7]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d302      	bcc.n	80012f8 <DS18B20_GetROM+0x1c>
		number = TempSensorCount;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <DS18B20_GetROM+0x50>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	71fb      	strb	r3, [r7, #7]

	uint8_t i;

	for(i = 0; i < 8; i++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	e00d      	b.n	800131a <DS18B20_GetROM+0x3e>
		ROM[i] = ds18b20[number].Address[i];
 80012fe:	79f9      	ldrb	r1, [r7, #7]
 8001300:	7bfa      	ldrb	r2, [r7, #15]
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	6838      	ldr	r0, [r7, #0]
 8001306:	4403      	add	r3, r0
 8001308:	4809      	ldr	r0, [pc, #36]	; (8001330 <DS18B20_GetROM+0x54>)
 800130a:	0109      	lsls	r1, r1, #4
 800130c:	4401      	add	r1, r0
 800130e:	440a      	add	r2, r1
 8001310:	7812      	ldrb	r2, [r2, #0]
 8001312:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 8; i++)
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	3301      	adds	r3, #1
 8001318:	73fb      	strb	r3, [r7, #15]
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	2b07      	cmp	r3, #7
 800131e:	d9ee      	bls.n	80012fe <DS18B20_GetROM+0x22>
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	20000254 	.word	0x20000254
 8001330:	20000200 	.word	0x20000200

08001334 <DS18B20_Quantity>:
	for(i = 0; i < 8; i++)
		ds18b20[number].Address[i] = ROM[i]; // Write ROM into sensor's structure
}

uint8_t DS18B20_Quantity(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
	return TempSensorCount;
 8001338:	4b02      	ldr	r3, [pc, #8]	; (8001344 <DS18B20_Quantity+0x10>)
 800133a:	781b      	ldrb	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	20000254 	.word	0x20000254

08001348 <DS18B20_GetTemperature>:

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	71fb      	strb	r3, [r7, #7]
	if(!ds18b20[number].ValidDataFlag)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <DS18B20_GetTemperature+0x3c>)
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	4413      	add	r3, r2
 800135c:	330c      	adds	r3, #12
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <DS18B20_GetTemperature+0x20>
		return 0;
 8001364:	2300      	movs	r3, #0
 8001366:	e008      	b.n	800137a <DS18B20_GetTemperature+0x32>

	*destination = ds18b20[number].Temperature;
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	4a06      	ldr	r2, [pc, #24]	; (8001384 <DS18B20_GetTemperature+0x3c>)
 800136c:	011b      	lsls	r3, r3, #4
 800136e:	4413      	add	r3, r2
 8001370:	3308      	adds	r3, #8
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	601a      	str	r2, [r3, #0]
	return 1;
 8001378:	2301      	movs	r3, #1

}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	20000200 	.word	0x20000200

08001388 <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 8001392:	2300      	movs	r3, #0
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	2300      	movs	r3, #0
 8001398:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, DS18B20_GPIO_Port, DS18B20_Pin); // Init OneWire bus
 800139a:	2204      	movs	r2, #4
 800139c:	491f      	ldr	r1, [pc, #124]	; (800141c <DS18B20_Init+0x94>)
 800139e:	4820      	ldr	r0, [pc, #128]	; (8001420 <DS18B20_Init+0x98>)
 80013a0:	f000 fc48 	bl	8001c34 <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 80013a4:	481e      	ldr	r0, [pc, #120]	; (8001420 <DS18B20_Init+0x98>)
 80013a6:	f000 fbec 	bl	8001b82 <OneWire_First>
 80013aa:	4603      	mov	r3, r0
 80013ac:	73fb      	strb	r3, [r7, #15]
	while(next)
 80013ae:	e018      	b.n	80013e2 <DS18B20_Init+0x5a>
	{
		TempSensorCount++;
 80013b0:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <DS18B20_Init+0x9c>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <DS18B20_Init+0x9c>)
 80013ba:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80013bc:	7bbb      	ldrb	r3, [r7, #14]
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	73ba      	strb	r2, [r7, #14]
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	4a18      	ldr	r2, [pc, #96]	; (8001428 <DS18B20_Init+0xa0>)
 80013c6:	4413      	add	r3, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	4815      	ldr	r0, [pc, #84]	; (8001420 <DS18B20_Init+0x98>)
 80013cc:	f000 fc15 	bl	8001bfa <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 80013d0:	4813      	ldr	r0, [pc, #76]	; (8001420 <DS18B20_Init+0x98>)
 80013d2:	f000 fbe6 	bl	8001ba2 <OneWire_Next>
 80013d6:	4603      	mov	r3, r0
 80013d8:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <DS18B20_Init+0x9c>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d803      	bhi.n	80013ea <DS18B20_Init+0x62>
	while(next)
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1e3      	bne.n	80013b0 <DS18B20_Init+0x28>
 80013e8:	e000      	b.n	80013ec <DS18B20_Init+0x64>
			break;
 80013ea:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 80013ec:	2300      	movs	r3, #0
 80013ee:	737b      	strb	r3, [r7, #13]
 80013f0:	e00a      	b.n	8001408 <DS18B20_Init+0x80>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 80013f2:	79fa      	ldrb	r2, [r7, #7]
 80013f4:	7b7b      	ldrb	r3, [r7, #13]
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fe6f 	bl	80010dc <DS18B20_SetResolution>

		DS18B20_StartAll(); // Start conversion on all sensors
 80013fe:	f7ff fdad 	bl	8000f5c <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 8001402:	7b7b      	ldrb	r3, [r7, #13]
 8001404:	3301      	adds	r3, #1
 8001406:	737b      	strb	r3, [r7, #13]
 8001408:	7b7a      	ldrb	r2, [r7, #13]
 800140a:	7bbb      	ldrb	r3, [r7, #14]
 800140c:	429a      	cmp	r2, r3
 800140e:	d3f0      	bcc.n	80013f2 <DS18B20_Init+0x6a>
	}
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40010800 	.word	0x40010800
 8001420:	20000240 	.word	0x20000240
 8001424:	20000254 	.word	0x20000254
 8001428:	20000200 	.word	0x20000200

0800142c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001440:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <MX_GPIO_Init+0x8c>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a1c      	ldr	r2, [pc, #112]	; (80014b8 <MX_GPIO_Init+0x8c>)
 8001446:	f043 0320 	orr.w	r3, r3, #32
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <MX_GPIO_Init+0x8c>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0320 	and.w	r3, r3, #32
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <MX_GPIO_Init+0x8c>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <MX_GPIO_Init+0x8c>)
 800145e:	f043 0304 	orr.w	r3, r3, #4
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <MX_GPIO_Init+0x8c>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_GPIO_Init+0x8c>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a10      	ldr	r2, [pc, #64]	; (80014b8 <MX_GPIO_Init+0x8c>)
 8001476:	f043 0308 	orr.w	r3, r3, #8
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <MX_GPIO_Init+0x8c>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DS18B20_Pin|LED_Pin, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	210c      	movs	r1, #12
 800148c:	480b      	ldr	r0, [pc, #44]	; (80014bc <MX_GPIO_Init+0x90>)
 800148e:	f001 fc6e 	bl	8002d6e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DS18B20_Pin|LED_Pin;
 8001492:	230c      	movs	r3, #12
 8001494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2302      	movs	r3, #2
 80014a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	4619      	mov	r1, r3
 80014a8:	4804      	ldr	r0, [pc, #16]	; (80014bc <MX_GPIO_Init+0x90>)
 80014aa:	f001 fac5 	bl	8002a38 <HAL_GPIO_Init>

}
 80014ae:	bf00      	nop
 80014b0:	3720      	adds	r7, #32
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010800 	.word	0x40010800

080014c0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_I2C2_Init+0x50>)
 80014c6:	4a13      	ldr	r2, [pc, #76]	; (8001514 <MX_I2C2_Init+0x54>)
 80014c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_I2C2_Init+0x50>)
 80014cc:	4a12      	ldr	r2, [pc, #72]	; (8001518 <MX_I2C2_Init+0x58>)
 80014ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_I2C2_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_I2C2_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_I2C2_Init+0x50>)
 80014de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <MX_I2C2_Init+0x50>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_I2C2_Init+0x50>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <MX_I2C2_Init+0x50>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_I2C2_Init+0x50>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <MX_I2C2_Init+0x50>)
 80014fe:	f001 fc67 	bl	8002dd0 <HAL_I2C_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001508:	f000 f93b 	bl	8001782 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000258 	.word	0x20000258
 8001514:	40005800 	.word	0x40005800
 8001518:	00061a80 	.word	0x00061a80

0800151c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a16      	ldr	r2, [pc, #88]	; (8001590 <HAL_I2C_MspInit+0x74>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d124      	bne.n	8001586 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_I2C_MspInit+0x78>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a14      	ldr	r2, [pc, #80]	; (8001594 <HAL_I2C_MspInit+0x78>)
 8001542:	f043 0308 	orr.w	r3, r3, #8
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_I2C_MspInit+0x78>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001554:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001558:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800155a:	2312      	movs	r3, #18
 800155c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	4619      	mov	r1, r3
 8001568:	480b      	ldr	r0, [pc, #44]	; (8001598 <HAL_I2C_MspInit+0x7c>)
 800156a:	f001 fa65 	bl	8002a38 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_I2C_MspInit+0x78>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	4a08      	ldr	r2, [pc, #32]	; (8001594 <HAL_I2C_MspInit+0x78>)
 8001574:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001578:	61d3      	str	r3, [r2, #28]
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_I2C_MspInit+0x78>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001586:	bf00      	nop
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40005800 	.word	0x40005800
 8001594:	40021000 	.word	0x40021000
 8001598:	40010c00 	.word	0x40010c00

0800159c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t LED_DutyCycle = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	83bb      	strh	r3, [r7, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a6:	f001 f8dd 	bl	8002764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015aa:	f000 f8a5 	bl	80016f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ae:	f7ff ff3d 	bl	800142c <MX_GPIO_Init>
  MX_I2C2_Init();
 80015b2:	f7ff ff85 	bl	80014c0 <MX_I2C2_Init>
  MX_TIM2_Init();
 80015b6:	f001 f803 	bl	80025c0 <MX_TIM2_Init>
  MX_TIM1_Init();
 80015ba:	f000 ffb1 	bl	8002520 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80015be:	213c      	movs	r1, #60	; 0x3c
 80015c0:	4844      	ldr	r0, [pc, #272]	; (80016d4 <main+0x138>)
 80015c2:	f002 ff07 	bl	80043d4 <HAL_TIM_Encoder_Start>


  SSD1306_Init (); // initialize the display
 80015c6:	f000 fbd7 	bl	8001d78 <SSD1306_Init>
  DS18B20_Init(DS18B20_Resolution_12bits);
 80015ca:	200c      	movs	r0, #12
 80015cc:	f7ff fedc 	bl	8001388 <DS18B20_Init>
//
//  SSD1306_Stopscroll();

//  TestLines(1);
  char string[5];
  int num = 0, pastI = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61bb      	str	r3, [r7, #24]
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]


     SSD1306_GotoXY (0,0);
 80015d8:	2100      	movs	r1, #0
 80015da:	2000      	movs	r0, #0
 80015dc:	f000 fd34 	bl	8002048 <SSD1306_GotoXY>
     SSD1306_Puts ("SSD1306", &Font_11x18, 1);
 80015e0:	2201      	movs	r2, #1
 80015e2:	493d      	ldr	r1, [pc, #244]	; (80016d8 <main+0x13c>)
 80015e4:	483d      	ldr	r0, [pc, #244]	; (80016dc <main+0x140>)
 80015e6:	f000 fdc5 	bl	8002174 <SSD1306_Puts>
     SSD1306_GotoXY (0, 30);
 80015ea:	211e      	movs	r1, #30
 80015ec:	2000      	movs	r0, #0
 80015ee:	f000 fd2b 	bl	8002048 <SSD1306_GotoXY>
     SSD1306_Puts ("OLED DEMO", &Font_11x18, 1);
 80015f2:	2201      	movs	r2, #1
 80015f4:	4938      	ldr	r1, [pc, #224]	; (80016d8 <main+0x13c>)
 80015f6:	483a      	ldr	r0, [pc, #232]	; (80016e0 <main+0x144>)
 80015f8:	f000 fdbc 	bl	8002174 <SSD1306_Puts>
     SSD1306_UpdateScreen();
 80015fc:	f000 fc80 	bl	8001f00 <SSD1306_UpdateScreen>
     HAL_Delay (1000);
 8001600:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001604:	f001 f910 	bl	8002828 <HAL_Delay>

     SSD1306_ScrollRight(0,5);
 8001608:	2105      	movs	r1, #5
 800160a:	2000      	movs	r0, #0
 800160c:	f000 fb3e 	bl	8001c8c <SSD1306_ScrollRight>
     HAL_Delay(3000);
 8001610:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001614:	f001 f908 	bl	8002828 <HAL_Delay>
     SSD1306_ScrollLeft(0,5);
 8001618:	2105      	movs	r1, #5
 800161a:	2000      	movs	r0, #0
 800161c:	f000 fb6c 	bl	8001cf8 <SSD1306_ScrollLeft>
     HAL_Delay(3000);
 8001620:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001624:	f001 f900 	bl	8002828 <HAL_Delay>
     SSD1306_Stopscroll();
 8001628:	f000 fb9c 	bl	8001d64 <SSD1306_Stopscroll>
     SSD1306_Clear();
 800162c:	f000 fdc7 	bl	80021be <SSD1306_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DS18B20_ReadAll();
 8001630:	f7ff fe14 	bl	800125c <DS18B20_ReadAll>
	  DS18B20_StartAll();
 8001634:	f7ff fc92 	bl	8000f5c <DS18B20_StartAll>
	  uint8_t ROM_tmp[8];
	  uint8_t i;
	  for(i = 0; i < DS18B20_Quantity(); i++)
 8001638:	2300      	movs	r3, #0
 800163a:	77fb      	strb	r3, [r7, #31]
 800163c:	e039      	b.n	80016b2 <main+0x116>
	  		{
	  			if(DS18B20_GetTemperature(i, &temperature))
 800163e:	7ffb      	ldrb	r3, [r7, #31]
 8001640:	4928      	ldr	r1, [pc, #160]	; (80016e4 <main+0x148>)
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fe80 	bl	8001348 <DS18B20_GetTemperature>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d02e      	beq.n	80016ac <main+0x110>
	  			{
	  				DS18B20_GetROM(i, ROM_tmp);
 800164e:	1d3a      	adds	r2, r7, #4
 8001650:	7ffb      	ldrb	r3, [r7, #31]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fe41 	bl	80012dc <DS18B20_GetROM>
	  				memset(string, 0, sizeof(string));
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	2205      	movs	r2, #5
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f004 f905 	bl	8005872 <memset>
	  				sprintf(string, "%.2f C", temperature);
 8001668:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <main+0x148>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe ff8f 	bl	8000590 <__aeabi_f2d>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	f107 000c 	add.w	r0, r7, #12
 800167a:	491b      	ldr	r1, [pc, #108]	; (80016e8 <main+0x14c>)
 800167c:	f004 f896 	bl	80057ac <siprintf>
	  				SSD1306_GotoXY (20, 0);
 8001680:	2100      	movs	r1, #0
 8001682:	2014      	movs	r0, #20
 8001684:	f000 fce0 	bl	8002048 <SSD1306_GotoXY>
	  				SSD1306_Puts ("Temperature", &Font_7x10, 1);
 8001688:	2201      	movs	r2, #1
 800168a:	4918      	ldr	r1, [pc, #96]	; (80016ec <main+0x150>)
 800168c:	4818      	ldr	r0, [pc, #96]	; (80016f0 <main+0x154>)
 800168e:	f000 fd71 	bl	8002174 <SSD1306_Puts>
	  				SSD1306_GotoXY (25, 30);
 8001692:	211e      	movs	r1, #30
 8001694:	2019      	movs	r0, #25
 8001696:	f000 fcd7 	bl	8002048 <SSD1306_GotoXY>
	  				SSD1306_Puts (string, &Font_11x18, 1);
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	2201      	movs	r2, #1
 80016a0:	490d      	ldr	r1, [pc, #52]	; (80016d8 <main+0x13c>)
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 fd66 	bl	8002174 <SSD1306_Puts>
	  				SSD1306_UpdateScreen();
 80016a8:	f000 fc2a 	bl	8001f00 <SSD1306_UpdateScreen>
	  for(i = 0; i < DS18B20_Quantity(); i++)
 80016ac:	7ffb      	ldrb	r3, [r7, #31]
 80016ae:	3301      	adds	r3, #1
 80016b0:	77fb      	strb	r3, [r7, #31]
 80016b2:	f7ff fe3f 	bl	8001334 <DS18B20_Quantity>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	7ffb      	ldrb	r3, [r7, #31]
 80016bc:	4293      	cmp	r3, r2
 80016be:	d3be      	bcc.n	800163e <main+0xa2>
	  			}
	  		}
	  		HAL_Delay(1000);
 80016c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016c4:	f001 f8b0 	bl	8002828 <HAL_Delay>
	  		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80016c8:	2108      	movs	r1, #8
 80016ca:	480a      	ldr	r0, [pc, #40]	; (80016f4 <main+0x158>)
 80016cc:	f001 fb67 	bl	8002d9e <HAL_GPIO_TogglePin>
  {
 80016d0:	e7ae      	b.n	8001630 <main+0x94>
 80016d2:	bf00      	nop
 80016d4:	20000704 	.word	0x20000704
 80016d8:	20000008 	.word	0x20000008
 80016dc:	080090d0 	.word	0x080090d0
 80016e0:	080090d8 	.word	0x080090d8
 80016e4:	200002ac 	.word	0x200002ac
 80016e8:	080090e4 	.word	0x080090e4
 80016ec:	20000000 	.word	0x20000000
 80016f0:	080090ec 	.word	0x080090ec
 80016f4:	40010800 	.word	0x40010800

080016f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b090      	sub	sp, #64	; 0x40
 80016fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fe:	f107 0318 	add.w	r3, r7, #24
 8001702:	2228      	movs	r2, #40	; 0x28
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f004 f8b3 	bl	8005872 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800171a:	2301      	movs	r3, #1
 800171c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800171e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001722:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001728:	2301      	movs	r3, #1
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172c:	2302      	movs	r3, #2
 800172e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001734:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001736:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800173a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173c:	f107 0318 	add.w	r3, r7, #24
 8001740:	4618      	mov	r0, r3
 8001742:	f002 f90f 	bl	8003964 <HAL_RCC_OscConfig>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800174c:	f000 f819 	bl	8001782 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001750:	230f      	movs	r3, #15
 8001752:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001754:	2302      	movs	r3, #2
 8001756:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800175c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2102      	movs	r1, #2
 800176a:	4618      	mov	r0, r3
 800176c:	f002 fb7c 	bl	8003e68 <HAL_RCC_ClockConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001776:	f000 f804 	bl	8001782 <Error_Handler>
  }
}
 800177a:	bf00      	nop
 800177c:	3740      	adds	r7, #64	; 0x40
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001786:	b672      	cpsid	i
}
 8001788:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800178a:	e7fe      	b.n	800178a <Error_Handler+0x8>

0800178c <OneWire_Delay>:

//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <OneWire_Delay+0x2c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 800179e:	bf00      	nop
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <OneWire_Delay+0x2c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d9f9      	bls.n	80017a0 <OneWire_Delay+0x14>
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	200006bc 	.word	0x200006bc

080017bc <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 80017cc:	2301      	movs	r3, #1
 80017ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	889b      	ldrh	r3, [r3, #4]
 80017d4:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f107 0208 	add.w	r2, r7, #8
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f001 f929 	bl	8002a38 <HAL_GPIO_Init>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 80017f6:	2311      	movs	r3, #17
 80017f8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 80017fe:	2301      	movs	r3, #1
 8001800:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	889b      	ldrh	r3, [r3, #4]
 8001806:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f107 0208 	add.w	r2, r7, #8
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f001 f910 	bl	8002a38 <HAL_GPIO_Init>
}
 8001818:	bf00      	nop
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	889b      	ldrh	r3, [r3, #4]
 800182c:	041a      	lsls	r2, r3, #16
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	611a      	str	r2, [r3, #16]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr

0800183e <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	889a      	ldrh	r2, [r3, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	611a      	str	r2, [r3, #16]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr

0800185a <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
	uint8_t i;

	OneWire_OutputLow(onewire);  // Write bus output low
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffdc 	bl	8001820 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ffc0 	bl	80017ee <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 800186e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001872:	f7ff ff8b 	bl	800178c <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffa0 	bl	80017bc <OneWire_BusInputDirection>
	OneWire_Delay(70);
 800187c:	2046      	movs	r0, #70	; 0x46
 800187e:	f7ff ff85 	bl	800178c <OneWire_Delay>

	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	889b      	ldrh	r3, [r3, #4]
 800188a:	4619      	mov	r1, r3
 800188c:	4610      	mov	r0, r2
 800188e:	f001 fa57 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001892:	4603      	mov	r3, r0
 8001894:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 8001896:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 800189a:	f7ff ff77 	bl	800178c <OneWire_Delay>

	return i;
 800189e:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00f      	beq.n	80018da <OneWire_WriteBit+0x32>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ffb0 	bl	8001820 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff94 	bl	80017ee <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 80018c6:	2006      	movs	r0, #6
 80018c8:	f7ff ff60 	bl	800178c <OneWire_Delay>

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ff75 	bl	80017bc <OneWire_BusInputDirection>
		OneWire_Delay(64);
 80018d2:	2040      	movs	r0, #64	; 0x40
 80018d4:	f7ff ff5a 	bl	800178c <OneWire_Delay>
		OneWire_Delay(60);

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		OneWire_Delay(10);
	}
}
 80018d8:	e00e      	b.n	80018f8 <OneWire_WriteBit+0x50>
		OneWire_OutputLow(onewire); // Set the bus low
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ffa0 	bl	8001820 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ff84 	bl	80017ee <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 80018e6:	203c      	movs	r0, #60	; 0x3c
 80018e8:	f7ff ff50 	bl	800178c <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff65 	bl	80017bc <OneWire_BusInputDirection>
		OneWire_Delay(10);
 80018f2:	200a      	movs	r0, #10
 80018f4:	f7ff ff4a 	bl	800178c <OneWire_Delay>
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 8001908:	2300      	movs	r3, #0
 800190a:	73fb      	strb	r3, [r7, #15]

	OneWire_OutputLow(onewire); // Set low to initiate reading
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff87 	bl	8001820 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff ff6b 	bl	80017ee <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 8001918:	2002      	movs	r0, #2
 800191a:	f7ff ff37 	bl	800178c <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ff4c 	bl	80017bc <OneWire_BusInputDirection>
	OneWire_Delay(10);
 8001924:	200a      	movs	r0, #10
 8001926:	f7ff ff31 	bl	800178c <OneWire_Delay>

	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	889b      	ldrh	r3, [r3, #4]
 8001932:	4619      	mov	r1, r3
 8001934:	4610      	mov	r0, r2
 8001936:	f001 fa03 	bl	8002d40 <HAL_GPIO_ReadPin>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <OneWire_ReadBit+0x44>
		bit = 1;
 8001940:	2301      	movs	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]

	OneWire_Delay(50); // Wait for end of read cycle
 8001944:	2032      	movs	r0, #50	; 0x32
 8001946:	f7ff ff21 	bl	800178c <OneWire_Delay>

	return bit;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8001960:	2308      	movs	r3, #8
 8001962:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4619      	mov	r1, r3
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ff9a 	bl	80018a8 <OneWire_WriteBit>
		byte >>= 1;
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	085b      	lsrs	r3, r3, #1
 8001978:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	3b01      	subs	r3, #1
 800197e:	73fb      	strb	r3, [r7, #15]
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1ee      	bne.n	8001964 <OneWire_WriteByte+0x10>
}
 8001986:	bf00      	nop
 8001988:	bf00      	nop
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8001998:	2308      	movs	r3, #8
 800199a:	73fb      	strb	r3, [r7, #15]
 800199c:	2300      	movs	r3, #0
 800199e:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 80019a0:	7bbb      	ldrb	r3, [r7, #14]
 80019a2:	085b      	lsrs	r3, r3, #1
 80019a4:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ffaa 	bl	8001900 <OneWire_ReadBit>
 80019ac:	4603      	mov	r3, r0
 80019ae:	01db      	lsls	r3, r3, #7
 80019b0:	b25a      	sxtb	r2, r3
 80019b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	b25b      	sxtb	r3, r3
 80019ba:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	3b01      	subs	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1eb      	bne.n	80019a0 <OneWire_ReadByte+0x10>

	return byte;
 80019c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	71da      	strb	r2, [r3, #7]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr

080019f6 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b084      	sub	sp, #16
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	460b      	mov	r3, r1
 8001a00:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 8001a02:	2301      	movs	r3, #1
 8001a04:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7a1b      	ldrb	r3, [r3, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f040 809a 	bne.w	8001b54 <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff1a 	bl	800185a <OneWire_Reset>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00a      	beq.n	8001a42 <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	71da      	strb	r2, [r3, #7]
			return 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e09b      	b.n	8001b7a <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	4619      	mov	r1, r3
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ff84 	bl	8001954 <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff57 	bl	8001900 <OneWire_ReadBit>
 8001a52:	4603      	mov	r3, r0
 8001a54:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ff52 	bl	8001900 <OneWire_ReadBit>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 8001a60:	7a7b      	ldrb	r3, [r7, #9]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d102      	bne.n	8001a6c <OneWire_Search+0x76>
 8001a66:	7a3b      	ldrb	r3, [r7, #8]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d064      	beq.n	8001b36 <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 8001a6c:	7a7a      	ldrb	r2, [r7, #9]
 8001a6e:	7a3b      	ldrb	r3, [r7, #8]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d002      	beq.n	8001a7a <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 8001a74:	7a7b      	ldrb	r3, [r7, #9]
 8001a76:	72bb      	strb	r3, [r7, #10]
 8001a78:	e026      	b.n	8001ac8 <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	799b      	ldrb	r3, [r3, #6]
 8001a7e:	7bfa      	ldrb	r2, [r7, #15]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d20d      	bcs.n	8001aa0 <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8001a84:	7b7b      	ldrb	r3, [r7, #13]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	7a5a      	ldrb	r2, [r3, #9]
 8001a8c:	7afb      	ldrb	r3, [r7, #11]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	bf14      	ite	ne
 8001a96:	2301      	movne	r3, #1
 8001a98:	2300      	moveq	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	72bb      	strb	r3, [r7, #10]
 8001a9e:	e008      	b.n	8001ab2 <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	799b      	ldrb	r3, [r3, #6]
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	bf0c      	ite	eq
 8001aaa:	2301      	moveq	r3, #1
 8001aac:	2300      	movne	r3, #0
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 8001ab2:	7abb      	ldrb	r3, [r7, #10]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d107      	bne.n	8001ac8 <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 8001abc:	7bbb      	ldrb	r3, [r7, #14]
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d802      	bhi.n	8001ac8 <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	7bba      	ldrb	r2, [r7, #14]
 8001ac6:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 8001ac8:	7abb      	ldrb	r3, [r7, #10]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d10c      	bne.n	8001ae8 <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 8001ace:	7b7b      	ldrb	r3, [r7, #13]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	7a59      	ldrb	r1, [r3, #9]
 8001ad6:	7b7b      	ldrb	r3, [r7, #13]
 8001ad8:	7afa      	ldrb	r2, [r7, #11]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	b2d1      	uxtb	r1, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	460a      	mov	r2, r1
 8001ae4:	725a      	strb	r2, [r3, #9]
 8001ae6:	e010      	b.n	8001b0a <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 8001ae8:	7b7b      	ldrb	r3, [r7, #13]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	7a5b      	ldrb	r3, [r3, #9]
 8001af0:	b25a      	sxtb	r2, r3
 8001af2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	b25b      	sxtb	r3, r3
 8001afa:	4013      	ands	r3, r2
 8001afc:	b25a      	sxtb	r2, r3
 8001afe:	7b7b      	ldrb	r3, [r7, #13]
 8001b00:	b2d1      	uxtb	r1, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	460a      	mov	r2, r1
 8001b08:	725a      	strb	r2, [r3, #9]
				}

				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 8001b0a:	7abb      	ldrb	r3, [r7, #10]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff feca 	bl	80018a8 <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	3301      	adds	r3, #1
 8001b18:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 8001b1a:	7afb      	ldrb	r3, [r7, #11]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 8001b20:	7afb      	ldrb	r3, [r7, #11]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d104      	bne.n	8001b30 <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 8001b26:	7b7b      	ldrb	r3, [r7, #13]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 8001b30:	7b7b      	ldrb	r3, [r7, #13]
 8001b32:	2b07      	cmp	r3, #7
 8001b34:	d98a      	bls.n	8001a4c <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	2b40      	cmp	r3, #64	; 0x40
 8001b3a:	d90b      	bls.n	8001b54 <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7bba      	ldrb	r2, [r7, #14]
 8001b40:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	799b      	ldrb	r3, [r3, #6]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d102      	bne.n	8001b50 <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 8001b50:	2301      	movs	r3, #1
 8001b52:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 8001b54:	7b3b      	ldrb	r3, [r7, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <OneWire_Search+0x16c>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	7a5b      	ldrb	r3, [r3, #9]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10a      	bne.n	8001b78 <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8001b78:	7b3b      	ldrb	r3, [r7, #12]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff ff21 	bl	80019d2 <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8001b90:	21f0      	movs	r1, #240	; 0xf0
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ff2f 	bl	80019f6 <OneWire_Search>
 8001b98:	4603      	mov	r3, r0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8001baa:	21f0      	movs	r1, #240	; 0xf0
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff22 	bl	80019f6 <OneWire_Search>
 8001bb2:	4603      	mov	r3, r0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 8001bc6:	2155      	movs	r1, #85	; 0x55
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff fec3 	bl	8001954 <OneWire_WriteByte>

	for (i = 0; i < 8; i++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	e00a      	b.n	8001bea <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	4413      	add	r3, r2
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff feb8 	bl	8001954 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	3301      	adds	r3, #1
 8001be8:	73fb      	strb	r3, [r7, #15]
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	2b07      	cmp	r3, #7
 8001bee:	d9f1      	bls.n	8001bd4 <OneWire_SelectWithPointer+0x18>
	}
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b085      	sub	sp, #20
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8001c04:	2300      	movs	r3, #0
 8001c06:	73fb      	strb	r3, [r7, #15]
 8001c08:	e00a      	b.n	8001c20 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 8001c0a:	7bfa      	ldrb	r2, [r7, #15]
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	6839      	ldr	r1, [r7, #0]
 8001c10:	440b      	add	r3, r1
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	440a      	add	r2, r1
 8001c16:	7a52      	ldrb	r2, [r2, #9]
 8001c18:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	73fb      	strb	r3, [r7, #15]
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	2b07      	cmp	r3, #7
 8001c24:	d9f1      	bls.n	8001c0a <OneWire_GetFullROM+0x10>
	}
}
 8001c26:	bf00      	nop
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
	...

08001c34 <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 8001c42:	4811      	ldr	r0, [pc, #68]	; (8001c88 <OneWire_Init+0x54>)
 8001c44:	f002 fada 	bl	80041fc <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	88fa      	ldrh	r2, [r7, #6]
 8001c52:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f7ff fdca 	bl	80017ee <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f7ff fdef 	bl	800183e <OneWire_OutputHigh>
	HAL_Delay(100);
 8001c60:	2064      	movs	r0, #100	; 0x64
 8001c62:	f000 fde1 	bl	8002828 <HAL_Delay>
	OneWire_OutputLow(onewire);
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f7ff fdda 	bl	8001820 <OneWire_OutputLow>
	HAL_Delay(100);
 8001c6c:	2064      	movs	r0, #100	; 0x64
 8001c6e:	f000 fddb 	bl	8002828 <HAL_Delay>
	OneWire_OutputHigh(onewire);
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f7ff fde3 	bl	800183e <OneWire_OutputHigh>
	HAL_Delay(200);
 8001c78:	20c8      	movs	r0, #200	; 0xc8
 8001c7a:	f000 fdd5 	bl	8002828 <HAL_Delay>
}
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200006bc 	.word	0x200006bc

08001c8c <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	460a      	mov	r2, r1
 8001c96:	71fb      	strb	r3, [r7, #7]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8001c9c:	2226      	movs	r2, #38	; 0x26
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	2078      	movs	r0, #120	; 0x78
 8001ca2:	f000 fb0f 	bl	80022c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	2078      	movs	r0, #120	; 0x78
 8001cac:	f000 fb0a 	bl	80022c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	2078      	movs	r0, #120	; 0x78
 8001cb8:	f000 fb04 	bl	80022c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	2078      	movs	r0, #120	; 0x78
 8001cc2:	f000 faff 	bl	80022c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8001cc6:	79bb      	ldrb	r3, [r7, #6]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	2100      	movs	r1, #0
 8001ccc:	2078      	movs	r0, #120	; 0x78
 8001cce:	f000 faf9 	bl	80022c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2078      	movs	r0, #120	; 0x78
 8001cd8:	f000 faf4 	bl	80022c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8001cdc:	22ff      	movs	r2, #255	; 0xff
 8001cde:	2100      	movs	r1, #0
 8001ce0:	2078      	movs	r0, #120	; 0x78
 8001ce2:	f000 faef 	bl	80022c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8001ce6:	222f      	movs	r2, #47	; 0x2f
 8001ce8:	2100      	movs	r1, #0
 8001cea:	2078      	movs	r0, #120	; 0x78
 8001cec:	f000 faea 	bl	80022c4 <ssd1306_I2C_Write>
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	460a      	mov	r2, r1
 8001d02:	71fb      	strb	r3, [r7, #7]
 8001d04:	4613      	mov	r3, r2
 8001d06:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8001d08:	2227      	movs	r2, #39	; 0x27
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	2078      	movs	r0, #120	; 0x78
 8001d0e:	f000 fad9 	bl	80022c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	2078      	movs	r0, #120	; 0x78
 8001d18:	f000 fad4 	bl	80022c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2100      	movs	r1, #0
 8001d22:	2078      	movs	r0, #120	; 0x78
 8001d24:	f000 face 	bl	80022c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	2078      	movs	r0, #120	; 0x78
 8001d2e:	f000 fac9 	bl	80022c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8001d32:	79bb      	ldrb	r3, [r7, #6]
 8001d34:	461a      	mov	r2, r3
 8001d36:	2100      	movs	r1, #0
 8001d38:	2078      	movs	r0, #120	; 0x78
 8001d3a:	f000 fac3 	bl	80022c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	2078      	movs	r0, #120	; 0x78
 8001d44:	f000 fabe 	bl	80022c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8001d48:	22ff      	movs	r2, #255	; 0xff
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2078      	movs	r0, #120	; 0x78
 8001d4e:	f000 fab9 	bl	80022c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8001d52:	222f      	movs	r2, #47	; 0x2f
 8001d54:	2100      	movs	r1, #0
 8001d56:	2078      	movs	r0, #120	; 0x78
 8001d58:	f000 fab4 	bl	80022c4 <ssd1306_I2C_Write>
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001d68:	222e      	movs	r2, #46	; 0x2e
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	2078      	movs	r0, #120	; 0x78
 8001d6e:	f000 faa9 	bl	80022c4 <ssd1306_I2C_Write>
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001d7e:	f000 fa27 	bl	80021d0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001d82:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001d86:	2201      	movs	r2, #1
 8001d88:	2178      	movs	r1, #120	; 0x78
 8001d8a:	485b      	ldr	r0, [pc, #364]	; (8001ef8 <SSD1306_Init+0x180>)
 8001d8c:	f001 fa62 	bl	8003254 <HAL_I2C_IsDeviceReady>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e0a9      	b.n	8001eee <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001d9a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001d9e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001da0:	e002      	b.n	8001da8 <SSD1306_Init+0x30>
		p--;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3b01      	subs	r3, #1
 8001da6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f9      	bne.n	8001da2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001dae:	22ae      	movs	r2, #174	; 0xae
 8001db0:	2100      	movs	r1, #0
 8001db2:	2078      	movs	r0, #120	; 0x78
 8001db4:	f000 fa86 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001db8:	2220      	movs	r2, #32
 8001dba:	2100      	movs	r1, #0
 8001dbc:	2078      	movs	r0, #120	; 0x78
 8001dbe:	f000 fa81 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001dc2:	2210      	movs	r2, #16
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2078      	movs	r0, #120	; 0x78
 8001dc8:	f000 fa7c 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001dcc:	22b0      	movs	r2, #176	; 0xb0
 8001dce:	2100      	movs	r1, #0
 8001dd0:	2078      	movs	r0, #120	; 0x78
 8001dd2:	f000 fa77 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001dd6:	22c8      	movs	r2, #200	; 0xc8
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2078      	movs	r0, #120	; 0x78
 8001ddc:	f000 fa72 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001de0:	2200      	movs	r2, #0
 8001de2:	2100      	movs	r1, #0
 8001de4:	2078      	movs	r0, #120	; 0x78
 8001de6:	f000 fa6d 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001dea:	2210      	movs	r2, #16
 8001dec:	2100      	movs	r1, #0
 8001dee:	2078      	movs	r0, #120	; 0x78
 8001df0:	f000 fa68 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001df4:	2240      	movs	r2, #64	; 0x40
 8001df6:	2100      	movs	r1, #0
 8001df8:	2078      	movs	r0, #120	; 0x78
 8001dfa:	f000 fa63 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001dfe:	2281      	movs	r2, #129	; 0x81
 8001e00:	2100      	movs	r1, #0
 8001e02:	2078      	movs	r0, #120	; 0x78
 8001e04:	f000 fa5e 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001e08:	22ff      	movs	r2, #255	; 0xff
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	2078      	movs	r0, #120	; 0x78
 8001e0e:	f000 fa59 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001e12:	22a1      	movs	r2, #161	; 0xa1
 8001e14:	2100      	movs	r1, #0
 8001e16:	2078      	movs	r0, #120	; 0x78
 8001e18:	f000 fa54 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001e1c:	22a6      	movs	r2, #166	; 0xa6
 8001e1e:	2100      	movs	r1, #0
 8001e20:	2078      	movs	r0, #120	; 0x78
 8001e22:	f000 fa4f 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001e26:	22a8      	movs	r2, #168	; 0xa8
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2078      	movs	r0, #120	; 0x78
 8001e2c:	f000 fa4a 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001e30:	223f      	movs	r2, #63	; 0x3f
 8001e32:	2100      	movs	r1, #0
 8001e34:	2078      	movs	r0, #120	; 0x78
 8001e36:	f000 fa45 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001e3a:	22a4      	movs	r2, #164	; 0xa4
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	2078      	movs	r0, #120	; 0x78
 8001e40:	f000 fa40 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001e44:	22d3      	movs	r2, #211	; 0xd3
 8001e46:	2100      	movs	r1, #0
 8001e48:	2078      	movs	r0, #120	; 0x78
 8001e4a:	f000 fa3b 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	2078      	movs	r0, #120	; 0x78
 8001e54:	f000 fa36 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001e58:	22d5      	movs	r2, #213	; 0xd5
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	2078      	movs	r0, #120	; 0x78
 8001e5e:	f000 fa31 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001e62:	22f0      	movs	r2, #240	; 0xf0
 8001e64:	2100      	movs	r1, #0
 8001e66:	2078      	movs	r0, #120	; 0x78
 8001e68:	f000 fa2c 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001e6c:	22d9      	movs	r2, #217	; 0xd9
 8001e6e:	2100      	movs	r1, #0
 8001e70:	2078      	movs	r0, #120	; 0x78
 8001e72:	f000 fa27 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001e76:	2222      	movs	r2, #34	; 0x22
 8001e78:	2100      	movs	r1, #0
 8001e7a:	2078      	movs	r0, #120	; 0x78
 8001e7c:	f000 fa22 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001e80:	22da      	movs	r2, #218	; 0xda
 8001e82:	2100      	movs	r1, #0
 8001e84:	2078      	movs	r0, #120	; 0x78
 8001e86:	f000 fa1d 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001e8a:	2212      	movs	r2, #18
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	2078      	movs	r0, #120	; 0x78
 8001e90:	f000 fa18 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001e94:	22db      	movs	r2, #219	; 0xdb
 8001e96:	2100      	movs	r1, #0
 8001e98:	2078      	movs	r0, #120	; 0x78
 8001e9a:	f000 fa13 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	2078      	movs	r0, #120	; 0x78
 8001ea4:	f000 fa0e 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001ea8:	228d      	movs	r2, #141	; 0x8d
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2078      	movs	r0, #120	; 0x78
 8001eae:	f000 fa09 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001eb2:	2214      	movs	r2, #20
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2078      	movs	r0, #120	; 0x78
 8001eb8:	f000 fa04 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001ebc:	22af      	movs	r2, #175	; 0xaf
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	2078      	movs	r0, #120	; 0x78
 8001ec2:	f000 f9ff 	bl	80022c4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001ec6:	222e      	movs	r2, #46	; 0x2e
 8001ec8:	2100      	movs	r1, #0
 8001eca:	2078      	movs	r0, #120	; 0x78
 8001ecc:	f000 f9fa 	bl	80022c4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f000 f843 	bl	8001f5c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001ed6:	f000 f813 	bl	8001f00 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <SSD1306_Init+0x184>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <SSD1306_Init+0x184>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <SSD1306_Init+0x184>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001eec:	2301      	movs	r3, #1
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000258 	.word	0x20000258
 8001efc:	200006b0 	.word	0x200006b0

08001f00 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001f06:	2300      	movs	r3, #0
 8001f08:	71fb      	strb	r3, [r7, #7]
 8001f0a:	e01d      	b.n	8001f48 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	3b50      	subs	r3, #80	; 0x50
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	2100      	movs	r1, #0
 8001f16:	2078      	movs	r0, #120	; 0x78
 8001f18:	f000 f9d4 	bl	80022c4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2100      	movs	r1, #0
 8001f20:	2078      	movs	r0, #120	; 0x78
 8001f22:	f000 f9cf 	bl	80022c4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001f26:	2210      	movs	r2, #16
 8001f28:	2100      	movs	r1, #0
 8001f2a:	2078      	movs	r0, #120	; 0x78
 8001f2c:	f000 f9ca 	bl	80022c4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	01db      	lsls	r3, r3, #7
 8001f34:	4a08      	ldr	r2, [pc, #32]	; (8001f58 <SSD1306_UpdateScreen+0x58>)
 8001f36:	441a      	add	r2, r3
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	2140      	movs	r1, #64	; 0x40
 8001f3c:	2078      	movs	r0, #120	; 0x78
 8001f3e:	f000 f95b 	bl	80021f8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	3301      	adds	r3, #1
 8001f46:	71fb      	strb	r3, [r7, #7]
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	2b07      	cmp	r3, #7
 8001f4c:	d9de      	bls.n	8001f0c <SSD1306_UpdateScreen+0xc>
	}
}
 8001f4e:	bf00      	nop
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200002b0 	.word	0x200002b0

08001f5c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <SSD1306_Fill+0x14>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e000      	b.n	8001f72 <SSD1306_Fill+0x16>
 8001f70:	23ff      	movs	r3, #255	; 0xff
 8001f72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f76:	4619      	mov	r1, r3
 8001f78:	4803      	ldr	r0, [pc, #12]	; (8001f88 <SSD1306_Fill+0x2c>)
 8001f7a:	f003 fc7a 	bl	8005872 <memset>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200002b0 	.word	0x200002b0

08001f8c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	80fb      	strh	r3, [r7, #6]
 8001f96:	460b      	mov	r3, r1
 8001f98:	80bb      	strh	r3, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	70fb      	strb	r3, [r7, #3]
	if (
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	2b7f      	cmp	r3, #127	; 0x7f
 8001fa2:	d848      	bhi.n	8002036 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001fa4:	88bb      	ldrh	r3, [r7, #4]
 8001fa6:	2b3f      	cmp	r3, #63	; 0x3f
 8001fa8:	d845      	bhi.n	8002036 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001faa:	4b25      	ldr	r3, [pc, #148]	; (8002040 <SSD1306_DrawPixel+0xb4>)
 8001fac:	791b      	ldrb	r3, [r3, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d006      	beq.n	8001fc0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001fb2:	78fb      	ldrb	r3, [r7, #3]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bf0c      	ite	eq
 8001fb8:	2301      	moveq	r3, #1
 8001fba:	2300      	movne	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d11a      	bne.n	8001ffc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001fc6:	88fa      	ldrh	r2, [r7, #6]
 8001fc8:	88bb      	ldrh	r3, [r7, #4]
 8001fca:	08db      	lsrs	r3, r3, #3
 8001fcc:	b298      	uxth	r0, r3
 8001fce:	4603      	mov	r3, r0
 8001fd0:	01db      	lsls	r3, r3, #7
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <SSD1306_DrawPixel+0xb8>)
 8001fd6:	5cd3      	ldrb	r3, [r2, r3]
 8001fd8:	b25a      	sxtb	r2, r3
 8001fda:	88bb      	ldrh	r3, [r7, #4]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	b25b      	sxtb	r3, r3
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	b259      	sxtb	r1, r3
 8001fec:	88fa      	ldrh	r2, [r7, #6]
 8001fee:	4603      	mov	r3, r0
 8001ff0:	01db      	lsls	r3, r3, #7
 8001ff2:	4413      	add	r3, r2
 8001ff4:	b2c9      	uxtb	r1, r1
 8001ff6:	4a13      	ldr	r2, [pc, #76]	; (8002044 <SSD1306_DrawPixel+0xb8>)
 8001ff8:	54d1      	strb	r1, [r2, r3]
 8001ffa:	e01d      	b.n	8002038 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ffc:	88fa      	ldrh	r2, [r7, #6]
 8001ffe:	88bb      	ldrh	r3, [r7, #4]
 8002000:	08db      	lsrs	r3, r3, #3
 8002002:	b298      	uxth	r0, r3
 8002004:	4603      	mov	r3, r0
 8002006:	01db      	lsls	r3, r3, #7
 8002008:	4413      	add	r3, r2
 800200a:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <SSD1306_DrawPixel+0xb8>)
 800200c:	5cd3      	ldrb	r3, [r2, r3]
 800200e:	b25a      	sxtb	r2, r3
 8002010:	88bb      	ldrh	r3, [r7, #4]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	2101      	movs	r1, #1
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	b25b      	sxtb	r3, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	b25b      	sxtb	r3, r3
 8002022:	4013      	ands	r3, r2
 8002024:	b259      	sxtb	r1, r3
 8002026:	88fa      	ldrh	r2, [r7, #6]
 8002028:	4603      	mov	r3, r0
 800202a:	01db      	lsls	r3, r3, #7
 800202c:	4413      	add	r3, r2
 800202e:	b2c9      	uxtb	r1, r1
 8002030:	4a04      	ldr	r2, [pc, #16]	; (8002044 <SSD1306_DrawPixel+0xb8>)
 8002032:	54d1      	strb	r1, [r2, r3]
 8002034:	e000      	b.n	8002038 <SSD1306_DrawPixel+0xac>
		return;
 8002036:	bf00      	nop
	}
}
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	200006b0 	.word	0x200006b0
 8002044:	200002b0 	.word	0x200002b0

08002048 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	460a      	mov	r2, r1
 8002052:	80fb      	strh	r3, [r7, #6]
 8002054:	4613      	mov	r3, r2
 8002056:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002058:	4a05      	ldr	r2, [pc, #20]	; (8002070 <SSD1306_GotoXY+0x28>)
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <SSD1306_GotoXY+0x28>)
 8002060:	88bb      	ldrh	r3, [r7, #4]
 8002062:	8053      	strh	r3, [r2, #2]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	200006b0 	.word	0x200006b0

08002074 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	71fb      	strb	r3, [r7, #7]
 8002080:	4613      	mov	r3, r2
 8002082:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002084:	4b3a      	ldr	r3, [pc, #232]	; (8002170 <SSD1306_Putc+0xfc>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	4413      	add	r3, r2
	if (
 8002090:	2b7f      	cmp	r3, #127	; 0x7f
 8002092:	dc07      	bgt.n	80020a4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002094:	4b36      	ldr	r3, [pc, #216]	; (8002170 <SSD1306_Putc+0xfc>)
 8002096:	885b      	ldrh	r3, [r3, #2]
 8002098:	461a      	mov	r2, r3
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	785b      	ldrb	r3, [r3, #1]
 800209e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80020a0:	2b3f      	cmp	r3, #63	; 0x3f
 80020a2:	dd01      	ble.n	80020a8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	e05e      	b.n	8002166 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	e04b      	b.n	8002146 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	3b20      	subs	r3, #32
 80020b6:	6839      	ldr	r1, [r7, #0]
 80020b8:	7849      	ldrb	r1, [r1, #1]
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	4619      	mov	r1, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	440b      	add	r3, r1
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4413      	add	r3, r2
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	e030      	b.n	8002134 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d010      	beq.n	8002104 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80020e2:	4b23      	ldr	r3, [pc, #140]	; (8002170 <SSD1306_Putc+0xfc>)
 80020e4:	881a      	ldrh	r2, [r3, #0]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	4413      	add	r3, r2
 80020ec:	b298      	uxth	r0, r3
 80020ee:	4b20      	ldr	r3, [pc, #128]	; (8002170 <SSD1306_Putc+0xfc>)
 80020f0:	885a      	ldrh	r2, [r3, #2]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	79ba      	ldrb	r2, [r7, #6]
 80020fc:	4619      	mov	r1, r3
 80020fe:	f7ff ff45 	bl	8001f8c <SSD1306_DrawPixel>
 8002102:	e014      	b.n	800212e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002104:	4b1a      	ldr	r3, [pc, #104]	; (8002170 <SSD1306_Putc+0xfc>)
 8002106:	881a      	ldrh	r2, [r3, #0]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	b29b      	uxth	r3, r3
 800210c:	4413      	add	r3, r2
 800210e:	b298      	uxth	r0, r3
 8002110:	4b17      	ldr	r3, [pc, #92]	; (8002170 <SSD1306_Putc+0xfc>)
 8002112:	885a      	ldrh	r2, [r3, #2]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	b29b      	uxth	r3, r3
 8002118:	4413      	add	r3, r2
 800211a:	b299      	uxth	r1, r3
 800211c:	79bb      	ldrb	r3, [r7, #6]
 800211e:	2b00      	cmp	r3, #0
 8002120:	bf0c      	ite	eq
 8002122:	2301      	moveq	r3, #1
 8002124:	2300      	movne	r3, #0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	f7ff ff2f 	bl	8001f8c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	3301      	adds	r3, #1
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4293      	cmp	r3, r2
 800213e:	d3c8      	bcc.n	80020d2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	3301      	adds	r3, #1
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	785b      	ldrb	r3, [r3, #1]
 800214a:	461a      	mov	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	4293      	cmp	r3, r2
 8002150:	d3ad      	bcc.n	80020ae <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002152:	4b07      	ldr	r3, [pc, #28]	; (8002170 <SSD1306_Putc+0xfc>)
 8002154:	881a      	ldrh	r2, [r3, #0]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	4413      	add	r3, r2
 800215e:	b29a      	uxth	r2, r3
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <SSD1306_Putc+0xfc>)
 8002162:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002164:	79fb      	ldrb	r3, [r7, #7]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200006b0 	.word	0x200006b0

08002174 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	4613      	mov	r3, r2
 8002180:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002182:	e012      	b.n	80021aa <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	79fa      	ldrb	r2, [r7, #7]
 800218a:	68b9      	ldr	r1, [r7, #8]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff71 	bl	8002074 <SSD1306_Putc>
 8002192:	4603      	mov	r3, r0
 8002194:	461a      	mov	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d002      	beq.n	80021a4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	e008      	b.n	80021b6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	3301      	adds	r3, #1
 80021a8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1e8      	bne.n	8002184 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	781b      	ldrb	r3, [r3, #0]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80021c2:	2000      	movs	r0, #0
 80021c4:	f7ff feca 	bl	8001f5c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80021c8:	f7ff fe9a 	bl	8001f00 <SSD1306_UpdateScreen>
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80021d6:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <ssd1306_I2C_Init+0x24>)
 80021d8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80021da:	e002      	b.n	80021e2 <ssd1306_I2C_Init+0x12>
		p--;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1f9      	bne.n	80021dc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80021e8:	bf00      	nop
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	0003d090 	.word	0x0003d090

080021f8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	b0c7      	sub	sp, #284	; 0x11c
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	4604      	mov	r4, r0
 8002200:	4608      	mov	r0, r1
 8002202:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002206:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800220a:	600a      	str	r2, [r1, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002212:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002216:	4622      	mov	r2, r4
 8002218:	701a      	strb	r2, [r3, #0]
 800221a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800221e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002222:	4602      	mov	r2, r0
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800222a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800222e:	460a      	mov	r2, r1
 8002230:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002232:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002236:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800223a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800223e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8002242:	7812      	ldrb	r2, [r2, #0]
 8002244:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002246:	2300      	movs	r3, #0
 8002248:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800224c:	e015      	b.n	800227a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800224e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002252:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002256:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	441a      	add	r2, r3
 800225e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002262:	3301      	adds	r3, #1
 8002264:	7811      	ldrb	r1, [r2, #0]
 8002266:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800226a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800226e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002270:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002274:	3301      	adds	r3, #1
 8002276:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800227a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800227e:	b29b      	uxth	r3, r3
 8002280:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002284:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002288:	8812      	ldrh	r2, [r2, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d8df      	bhi.n	800224e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 800228e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002292:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	b299      	uxth	r1, r3
 800229a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800229e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	3301      	adds	r3, #1
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	f107 020c 	add.w	r2, r7, #12
 80022ac:	200a      	movs	r0, #10
 80022ae:	9000      	str	r0, [sp, #0]
 80022b0:	4803      	ldr	r0, [pc, #12]	; (80022c0 <ssd1306_I2C_WriteMulti+0xc8>)
 80022b2:	f000 fed1 	bl	8003058 <HAL_I2C_Master_Transmit>
}
 80022b6:	bf00      	nop
 80022b8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd90      	pop	{r4, r7, pc}
 80022c0:	20000258 	.word	0x20000258

080022c4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
 80022ce:	460b      	mov	r3, r1
 80022d0:	71bb      	strb	r3, [r7, #6]
 80022d2:	4613      	mov	r3, r2
 80022d4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80022d6:	79bb      	ldrb	r3, [r7, #6]
 80022d8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80022da:	797b      	ldrb	r3, [r7, #5]
 80022dc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	b299      	uxth	r1, r3
 80022e2:	f107 020c 	add.w	r2, r7, #12
 80022e6:	230a      	movs	r3, #10
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2302      	movs	r3, #2
 80022ec:	4803      	ldr	r0, [pc, #12]	; (80022fc <ssd1306_I2C_Write+0x38>)
 80022ee:	f000 feb3 	bl	8003058 <HAL_I2C_Master_Transmit>
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000258 	.word	0x20000258

08002300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002306:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <HAL_MspInit+0x40>)
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <HAL_MspInit+0x40>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6193      	str	r3, [r2, #24]
 8002312:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_MspInit+0x40>)
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	607b      	str	r3, [r7, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800231e:	4b08      	ldr	r3, [pc, #32]	; (8002340 <HAL_MspInit+0x40>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4a07      	ldr	r2, [pc, #28]	; (8002340 <HAL_MspInit+0x40>)
 8002324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002328:	61d3      	str	r3, [r2, #28]
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_MspInit+0x40>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	40021000 	.word	0x40021000

08002344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002348:	e7fe      	b.n	8002348 <NMI_Handler+0x4>

0800234a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800234e:	e7fe      	b.n	800234e <HardFault_Handler+0x4>

08002350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002354:	e7fe      	b.n	8002354 <MemManage_Handler+0x4>

08002356 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800235a:	e7fe      	b.n	800235a <BusFault_Handler+0x4>

0800235c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <UsageFault_Handler+0x4>

08002362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr

0800236e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr

0800237a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr

08002386 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800238a:	f000 fa31 	bl	80027f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}

08002392 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  return 1;
 8002396:	2301      	movs	r3, #1
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr

080023a0 <_kill>:

int _kill(int pid, int sig)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023aa:	f003 fab5 	bl	8005918 <__errno>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2216      	movs	r2, #22
 80023b2:	601a      	str	r2, [r3, #0]
  return -1;
 80023b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <_exit>:

void _exit (int status)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ffe7 	bl	80023a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023d2:	e7fe      	b.n	80023d2 <_exit+0x12>

080023d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	e00a      	b.n	80023fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023e6:	f3af 8000 	nop.w
 80023ea:	4601      	mov	r1, r0
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	60ba      	str	r2, [r7, #8]
 80023f2:	b2ca      	uxtb	r2, r1
 80023f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	3301      	adds	r3, #1
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	429a      	cmp	r2, r3
 8002402:	dbf0      	blt.n	80023e6 <_read+0x12>
  }

  return len;
 8002404:	687b      	ldr	r3, [r7, #4]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b086      	sub	sp, #24
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	e009      	b.n	8002434 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	60ba      	str	r2, [r7, #8]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	3301      	adds	r3, #1
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	429a      	cmp	r2, r3
 800243a:	dbf1      	blt.n	8002420 <_write+0x12>
  }
  return len;
 800243c:	687b      	ldr	r3, [r7, #4]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <_close>:

int _close(int file)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800244e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800246c:	605a      	str	r2, [r3, #4]
  return 0;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr

0800247a <_isatty>:

int _isatty(int file)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002482:	2301      	movs	r3, #1
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800248e:	b480      	push	{r7}
 8002490:	b085      	sub	sp, #20
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr
	...

080024a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b0:	4a14      	ldr	r2, [pc, #80]	; (8002504 <_sbrk+0x5c>)
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <_sbrk+0x60>)
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024bc:	4b13      	ldr	r3, [pc, #76]	; (800250c <_sbrk+0x64>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <_sbrk+0x64>)
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <_sbrk+0x68>)
 80024c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <_sbrk+0x64>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d207      	bcs.n	80024e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d8:	f003 fa1e 	bl	8005918 <__errno>
 80024dc:	4603      	mov	r3, r0
 80024de:	220c      	movs	r2, #12
 80024e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024e6:	e009      	b.n	80024fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <_sbrk+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <_sbrk+0x64>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	4a05      	ldr	r2, [pc, #20]	; (800250c <_sbrk+0x64>)
 80024f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024fa:	68fb      	ldr	r3, [r7, #12]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20005000 	.word	0x20005000
 8002508:	00000400 	.word	0x00000400
 800250c:	200006b8 	.word	0x200006b8
 8002510:	200008a0 	.word	0x200008a0

08002514 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002526:	f107 0308 	add.w	r3, r7, #8
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
 8002530:	609a      	str	r2, [r3, #8]
 8002532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002534:	463b      	mov	r3, r7
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800253c:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <MX_TIM1_Init+0x98>)
 800253e:	4a1f      	ldr	r2, [pc, #124]	; (80025bc <MX_TIM1_Init+0x9c>)
 8002540:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8002542:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <MX_TIM1_Init+0x98>)
 8002544:	223f      	movs	r2, #63	; 0x3f
 8002546:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <MX_TIM1_Init+0x98>)
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <MX_TIM1_Init+0x98>)
 8002550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002554:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002556:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <MX_TIM1_Init+0x98>)
 8002558:	2200      	movs	r2, #0
 800255a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800255c:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <MX_TIM1_Init+0x98>)
 800255e:	2200      	movs	r2, #0
 8002560:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <MX_TIM1_Init+0x98>)
 8002564:	2200      	movs	r2, #0
 8002566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002568:	4813      	ldr	r0, [pc, #76]	; (80025b8 <MX_TIM1_Init+0x98>)
 800256a:	f001 fdf7 	bl	800415c <HAL_TIM_Base_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002574:	f7ff f905 	bl	8001782 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800257c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800257e:	f107 0308 	add.w	r3, r7, #8
 8002582:	4619      	mov	r1, r3
 8002584:	480c      	ldr	r0, [pc, #48]	; (80025b8 <MX_TIM1_Init+0x98>)
 8002586:	f001 ffb3 	bl	80044f0 <HAL_TIM_ConfigClockSource>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002590:	f7ff f8f7 	bl	8001782 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002594:	2300      	movs	r3, #0
 8002596:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002598:	2300      	movs	r3, #0
 800259a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800259c:	463b      	mov	r3, r7
 800259e:	4619      	mov	r1, r3
 80025a0:	4805      	ldr	r0, [pc, #20]	; (80025b8 <MX_TIM1_Init+0x98>)
 80025a2:	f002 f989 	bl	80048b8 <HAL_TIMEx_MasterConfigSynchronization>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80025ac:	f7ff f8e9 	bl	8001782 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80025b0:	bf00      	nop
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	200006bc 	.word	0x200006bc
 80025bc:	40012c00 	.word	0x40012c00

080025c0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08c      	sub	sp, #48	; 0x30
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025c6:	f107 030c 	add.w	r3, r7, #12
 80025ca:	2224      	movs	r2, #36	; 0x24
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f003 f94f 	bl	8005872 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d4:	1d3b      	adds	r3, r7, #4
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025dc:	4b20      	ldr	r3, [pc, #128]	; (8002660 <MX_TIM2_Init+0xa0>)
 80025de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80025e4:	4b1e      	ldr	r3, [pc, #120]	; (8002660 <MX_TIM2_Init+0xa0>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ea:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <MX_TIM2_Init+0xa0>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80025f0:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <MX_TIM2_Init+0xa0>)
 80025f2:	2264      	movs	r2, #100	; 0x64
 80025f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f6:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <MX_TIM2_Init+0xa0>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fc:	4b18      	ldr	r3, [pc, #96]	; (8002660 <MX_TIM2_Init+0xa0>)
 80025fe:	2200      	movs	r2, #0
 8002600:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002602:	2301      	movs	r3, #1
 8002604:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800260a:	2301      	movs	r3, #1
 800260c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800260e:	2300      	movs	r3, #0
 8002610:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002612:	230f      	movs	r3, #15
 8002614:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002616:	2300      	movs	r3, #0
 8002618:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800261a:	2301      	movs	r3, #1
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800261e:	2300      	movs	r3, #0
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002622:	230f      	movs	r3, #15
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002626:	f107 030c 	add.w	r3, r7, #12
 800262a:	4619      	mov	r1, r3
 800262c:	480c      	ldr	r0, [pc, #48]	; (8002660 <MX_TIM2_Init+0xa0>)
 800262e:	f001 fe2f 	bl	8004290 <HAL_TIM_Encoder_Init>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002638:	f7ff f8a3 	bl	8001782 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800263c:	2300      	movs	r3, #0
 800263e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002640:	2300      	movs	r3, #0
 8002642:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	4619      	mov	r1, r3
 8002648:	4805      	ldr	r0, [pc, #20]	; (8002660 <MX_TIM2_Init+0xa0>)
 800264a:	f002 f935 	bl	80048b8 <HAL_TIMEx_MasterConfigSynchronization>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002654:	f7ff f895 	bl	8001782 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002658:	bf00      	nop
 800265a:	3730      	adds	r7, #48	; 0x30
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20000704 	.word	0x20000704

08002664 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a09      	ldr	r2, [pc, #36]	; (8002698 <HAL_TIM_Base_MspInit+0x34>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d10b      	bne.n	800268e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_TIM_Base_MspInit+0x38>)
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	4a08      	ldr	r2, [pc, #32]	; (800269c <HAL_TIM_Base_MspInit+0x38>)
 800267c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002680:	6193      	str	r3, [r2, #24]
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_TIM_Base_MspInit+0x38>)
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800268e:	bf00      	nop
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr
 8002698:	40012c00 	.word	0x40012c00
 800269c:	40021000 	.word	0x40021000

080026a0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 0310 	add.w	r3, r7, #16
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026be:	d123      	bne.n	8002708 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026c0:	4b13      	ldr	r3, [pc, #76]	; (8002710 <HAL_TIM_Encoder_MspInit+0x70>)
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	4a12      	ldr	r2, [pc, #72]	; (8002710 <HAL_TIM_Encoder_MspInit+0x70>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	61d3      	str	r3, [r2, #28]
 80026cc:	4b10      	ldr	r3, [pc, #64]	; (8002710 <HAL_TIM_Encoder_MspInit+0x70>)
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d8:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <HAL_TIM_Encoder_MspInit+0x70>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	4a0c      	ldr	r2, [pc, #48]	; (8002710 <HAL_TIM_Encoder_MspInit+0x70>)
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	6193      	str	r3, [r2, #24]
 80026e4:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <HAL_TIM_Encoder_MspInit+0x70>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026f0:	2303      	movs	r3, #3
 80026f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026f8:	2301      	movs	r3, #1
 80026fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fc:	f107 0310 	add.w	r3, r7, #16
 8002700:	4619      	mov	r1, r3
 8002702:	4804      	ldr	r0, [pc, #16]	; (8002714 <HAL_TIM_Encoder_MspInit+0x74>)
 8002704:	f000 f998 	bl	8002a38 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002708:	bf00      	nop
 800270a:	3720      	adds	r7, #32
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021000 	.word	0x40021000
 8002714:	40010800 	.word	0x40010800

08002718 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002718:	f7ff fefc 	bl	8002514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800271c:	480b      	ldr	r0, [pc, #44]	; (800274c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800271e:	490c      	ldr	r1, [pc, #48]	; (8002750 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002720:	4a0c      	ldr	r2, [pc, #48]	; (8002754 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002724:	e002      	b.n	800272c <LoopCopyDataInit>

08002726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800272a:	3304      	adds	r3, #4

0800272c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800272c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800272e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002730:	d3f9      	bcc.n	8002726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002732:	4a09      	ldr	r2, [pc, #36]	; (8002758 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002734:	4c09      	ldr	r4, [pc, #36]	; (800275c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002738:	e001      	b.n	800273e <LoopFillZerobss>

0800273a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800273a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800273c:	3204      	adds	r2, #4

0800273e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800273e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002740:	d3fb      	bcc.n	800273a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002742:	f003 f8ef 	bl	8005924 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002746:	f7fe ff29 	bl	800159c <main>
  bx lr
 800274a:	4770      	bx	lr
  ldr r0, =_sdata
 800274c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002750:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002754:	0800aa20 	.word	0x0800aa20
  ldr r2, =_sbss
 8002758:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800275c:	2000089c 	.word	0x2000089c

08002760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002760:	e7fe      	b.n	8002760 <ADC1_2_IRQHandler>
	...

08002764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <HAL_Init+0x28>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a07      	ldr	r2, [pc, #28]	; (800278c <HAL_Init+0x28>)
 800276e:	f043 0310 	orr.w	r3, r3, #16
 8002772:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002774:	2003      	movs	r0, #3
 8002776:	f000 f92b 	bl	80029d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800277a:	200f      	movs	r0, #15
 800277c:	f000 f808 	bl	8002790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002780:	f7ff fdbe 	bl	8002300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40022000 	.word	0x40022000

08002790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002798:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <HAL_InitTick+0x54>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <HAL_InitTick+0x58>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	4619      	mov	r1, r3
 80027a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 f935 	bl	8002a1e <HAL_SYSTICK_Config>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e00e      	b.n	80027dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b0f      	cmp	r3, #15
 80027c2:	d80a      	bhi.n	80027da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027c4:	2200      	movs	r2, #0
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027cc:	f000 f90b 	bl	80029e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027d0:	4a06      	ldr	r2, [pc, #24]	; (80027ec <HAL_InitTick+0x5c>)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	e000      	b.n	80027dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20000010 	.word	0x20000010
 80027e8:	20000018 	.word	0x20000018
 80027ec:	20000014 	.word	0x20000014

080027f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <HAL_IncTick+0x1c>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_IncTick+0x20>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4413      	add	r3, r2
 8002800:	4a03      	ldr	r2, [pc, #12]	; (8002810 <HAL_IncTick+0x20>)
 8002802:	6013      	str	r3, [r2, #0]
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	20000018 	.word	0x20000018
 8002810:	2000074c 	.word	0x2000074c

08002814 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return uwTick;
 8002818:	4b02      	ldr	r3, [pc, #8]	; (8002824 <HAL_GetTick+0x10>)
 800281a:	681b      	ldr	r3, [r3, #0]
}
 800281c:	4618      	mov	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	2000074c 	.word	0x2000074c

08002828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002830:	f7ff fff0 	bl	8002814 <HAL_GetTick>
 8002834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002840:	d005      	beq.n	800284e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <HAL_Delay+0x44>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4413      	add	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800284e:	bf00      	nop
 8002850:	f7ff ffe0 	bl	8002814 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	429a      	cmp	r2, r3
 800285e:	d8f7      	bhi.n	8002850 <HAL_Delay+0x28>
  {
  }
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000018 	.word	0x20000018

08002870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800288c:	4013      	ands	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800289c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a2:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	60d3      	str	r3, [r2, #12]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <__NVIC_GetPriorityGrouping+0x18>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	f003 0307 	and.w	r3, r3, #7
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	6039      	str	r1, [r7, #0]
 80028de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	db0a      	blt.n	80028fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	490c      	ldr	r1, [pc, #48]	; (8002920 <__NVIC_SetPriority+0x4c>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	0112      	lsls	r2, r2, #4
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	440b      	add	r3, r1
 80028f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028fc:	e00a      	b.n	8002914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4908      	ldr	r1, [pc, #32]	; (8002924 <__NVIC_SetPriority+0x50>)
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	3b04      	subs	r3, #4
 800290c:	0112      	lsls	r2, r2, #4
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	440b      	add	r3, r1
 8002912:	761a      	strb	r2, [r3, #24]
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	e000e100 	.word	0xe000e100
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002928:	b480      	push	{r7}
 800292a:	b089      	sub	sp, #36	; 0x24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f1c3 0307 	rsb	r3, r3, #7
 8002942:	2b04      	cmp	r3, #4
 8002944:	bf28      	it	cs
 8002946:	2304      	movcs	r3, #4
 8002948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3304      	adds	r3, #4
 800294e:	2b06      	cmp	r3, #6
 8002950:	d902      	bls.n	8002958 <NVIC_EncodePriority+0x30>
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3b03      	subs	r3, #3
 8002956:	e000      	b.n	800295a <NVIC_EncodePriority+0x32>
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43da      	mvns	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	401a      	ands	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002970:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	43d9      	mvns	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002980:	4313      	orrs	r3, r2
         );
}
 8002982:	4618      	mov	r0, r3
 8002984:	3724      	adds	r7, #36	; 0x24
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3b01      	subs	r3, #1
 8002998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800299c:	d301      	bcc.n	80029a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800299e:	2301      	movs	r3, #1
 80029a0:	e00f      	b.n	80029c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029a2:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <SysTick_Config+0x40>)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029aa:	210f      	movs	r1, #15
 80029ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029b0:	f7ff ff90 	bl	80028d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <SysTick_Config+0x40>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ba:	4b04      	ldr	r3, [pc, #16]	; (80029cc <SysTick_Config+0x40>)
 80029bc:	2207      	movs	r2, #7
 80029be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	e000e010 	.word	0xe000e010

080029d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff ff49 	bl	8002870 <__NVIC_SetPriorityGrouping>
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b086      	sub	sp, #24
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	4603      	mov	r3, r0
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	607a      	str	r2, [r7, #4]
 80029f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029f8:	f7ff ff5e 	bl	80028b8 <__NVIC_GetPriorityGrouping>
 80029fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	68b9      	ldr	r1, [r7, #8]
 8002a02:	6978      	ldr	r0, [r7, #20]
 8002a04:	f7ff ff90 	bl	8002928 <NVIC_EncodePriority>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a0e:	4611      	mov	r1, r2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff5f 	bl	80028d4 <__NVIC_SetPriority>
}
 8002a16:	bf00      	nop
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ffb0 	bl	800298c <SysTick_Config>
 8002a2c:	4603      	mov	r3, r0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b08b      	sub	sp, #44	; 0x2c
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a42:	2300      	movs	r3, #0
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a46:	2300      	movs	r3, #0
 8002a48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a4a:	e169      	b.n	8002d20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	f040 8158 	bne.w	8002d1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4a9a      	ldr	r2, [pc, #616]	; (8002cd8 <HAL_GPIO_Init+0x2a0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d05e      	beq.n	8002b32 <HAL_GPIO_Init+0xfa>
 8002a74:	4a98      	ldr	r2, [pc, #608]	; (8002cd8 <HAL_GPIO_Init+0x2a0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d875      	bhi.n	8002b66 <HAL_GPIO_Init+0x12e>
 8002a7a:	4a98      	ldr	r2, [pc, #608]	; (8002cdc <HAL_GPIO_Init+0x2a4>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d058      	beq.n	8002b32 <HAL_GPIO_Init+0xfa>
 8002a80:	4a96      	ldr	r2, [pc, #600]	; (8002cdc <HAL_GPIO_Init+0x2a4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d86f      	bhi.n	8002b66 <HAL_GPIO_Init+0x12e>
 8002a86:	4a96      	ldr	r2, [pc, #600]	; (8002ce0 <HAL_GPIO_Init+0x2a8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d052      	beq.n	8002b32 <HAL_GPIO_Init+0xfa>
 8002a8c:	4a94      	ldr	r2, [pc, #592]	; (8002ce0 <HAL_GPIO_Init+0x2a8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d869      	bhi.n	8002b66 <HAL_GPIO_Init+0x12e>
 8002a92:	4a94      	ldr	r2, [pc, #592]	; (8002ce4 <HAL_GPIO_Init+0x2ac>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d04c      	beq.n	8002b32 <HAL_GPIO_Init+0xfa>
 8002a98:	4a92      	ldr	r2, [pc, #584]	; (8002ce4 <HAL_GPIO_Init+0x2ac>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d863      	bhi.n	8002b66 <HAL_GPIO_Init+0x12e>
 8002a9e:	4a92      	ldr	r2, [pc, #584]	; (8002ce8 <HAL_GPIO_Init+0x2b0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d046      	beq.n	8002b32 <HAL_GPIO_Init+0xfa>
 8002aa4:	4a90      	ldr	r2, [pc, #576]	; (8002ce8 <HAL_GPIO_Init+0x2b0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d85d      	bhi.n	8002b66 <HAL_GPIO_Init+0x12e>
 8002aaa:	2b12      	cmp	r3, #18
 8002aac:	d82a      	bhi.n	8002b04 <HAL_GPIO_Init+0xcc>
 8002aae:	2b12      	cmp	r3, #18
 8002ab0:	d859      	bhi.n	8002b66 <HAL_GPIO_Init+0x12e>
 8002ab2:	a201      	add	r2, pc, #4	; (adr r2, 8002ab8 <HAL_GPIO_Init+0x80>)
 8002ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab8:	08002b33 	.word	0x08002b33
 8002abc:	08002b0d 	.word	0x08002b0d
 8002ac0:	08002b1f 	.word	0x08002b1f
 8002ac4:	08002b61 	.word	0x08002b61
 8002ac8:	08002b67 	.word	0x08002b67
 8002acc:	08002b67 	.word	0x08002b67
 8002ad0:	08002b67 	.word	0x08002b67
 8002ad4:	08002b67 	.word	0x08002b67
 8002ad8:	08002b67 	.word	0x08002b67
 8002adc:	08002b67 	.word	0x08002b67
 8002ae0:	08002b67 	.word	0x08002b67
 8002ae4:	08002b67 	.word	0x08002b67
 8002ae8:	08002b67 	.word	0x08002b67
 8002aec:	08002b67 	.word	0x08002b67
 8002af0:	08002b67 	.word	0x08002b67
 8002af4:	08002b67 	.word	0x08002b67
 8002af8:	08002b67 	.word	0x08002b67
 8002afc:	08002b15 	.word	0x08002b15
 8002b00:	08002b29 	.word	0x08002b29
 8002b04:	4a79      	ldr	r2, [pc, #484]	; (8002cec <HAL_GPIO_Init+0x2b4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d013      	beq.n	8002b32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b0a:	e02c      	b.n	8002b66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	623b      	str	r3, [r7, #32]
          break;
 8002b12:	e029      	b.n	8002b68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	623b      	str	r3, [r7, #32]
          break;
 8002b1c:	e024      	b.n	8002b68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	3308      	adds	r3, #8
 8002b24:	623b      	str	r3, [r7, #32]
          break;
 8002b26:	e01f      	b.n	8002b68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	330c      	adds	r3, #12
 8002b2e:	623b      	str	r3, [r7, #32]
          break;
 8002b30:	e01a      	b.n	8002b68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d102      	bne.n	8002b40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	623b      	str	r3, [r7, #32]
          break;
 8002b3e:	e013      	b.n	8002b68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d105      	bne.n	8002b54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b48:	2308      	movs	r3, #8
 8002b4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	611a      	str	r2, [r3, #16]
          break;
 8002b52:	e009      	b.n	8002b68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b54:	2308      	movs	r3, #8
 8002b56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69fa      	ldr	r2, [r7, #28]
 8002b5c:	615a      	str	r2, [r3, #20]
          break;
 8002b5e:	e003      	b.n	8002b68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b60:	2300      	movs	r3, #0
 8002b62:	623b      	str	r3, [r7, #32]
          break;
 8002b64:	e000      	b.n	8002b68 <HAL_GPIO_Init+0x130>
          break;
 8002b66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	2bff      	cmp	r3, #255	; 0xff
 8002b6c:	d801      	bhi.n	8002b72 <HAL_GPIO_Init+0x13a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	e001      	b.n	8002b76 <HAL_GPIO_Init+0x13e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3304      	adds	r3, #4
 8002b76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	2bff      	cmp	r3, #255	; 0xff
 8002b7c:	d802      	bhi.n	8002b84 <HAL_GPIO_Init+0x14c>
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	e002      	b.n	8002b8a <HAL_GPIO_Init+0x152>
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	3b08      	subs	r3, #8
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	210f      	movs	r1, #15
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	fa01 f303 	lsl.w	r3, r1, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	401a      	ands	r2, r3
 8002b9c:	6a39      	ldr	r1, [r7, #32]
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 80b1 	beq.w	8002d1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bb8:	4b4d      	ldr	r3, [pc, #308]	; (8002cf0 <HAL_GPIO_Init+0x2b8>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	4a4c      	ldr	r2, [pc, #304]	; (8002cf0 <HAL_GPIO_Init+0x2b8>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6193      	str	r3, [r2, #24]
 8002bc4:	4b4a      	ldr	r3, [pc, #296]	; (8002cf0 <HAL_GPIO_Init+0x2b8>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bd0:	4a48      	ldr	r2, [pc, #288]	; (8002cf4 <HAL_GPIO_Init+0x2bc>)
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	089b      	lsrs	r3, r3, #2
 8002bd6:	3302      	adds	r3, #2
 8002bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	220f      	movs	r2, #15
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a40      	ldr	r2, [pc, #256]	; (8002cf8 <HAL_GPIO_Init+0x2c0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d013      	beq.n	8002c24 <HAL_GPIO_Init+0x1ec>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a3f      	ldr	r2, [pc, #252]	; (8002cfc <HAL_GPIO_Init+0x2c4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d00d      	beq.n	8002c20 <HAL_GPIO_Init+0x1e8>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a3e      	ldr	r2, [pc, #248]	; (8002d00 <HAL_GPIO_Init+0x2c8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d007      	beq.n	8002c1c <HAL_GPIO_Init+0x1e4>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a3d      	ldr	r2, [pc, #244]	; (8002d04 <HAL_GPIO_Init+0x2cc>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d101      	bne.n	8002c18 <HAL_GPIO_Init+0x1e0>
 8002c14:	2303      	movs	r3, #3
 8002c16:	e006      	b.n	8002c26 <HAL_GPIO_Init+0x1ee>
 8002c18:	2304      	movs	r3, #4
 8002c1a:	e004      	b.n	8002c26 <HAL_GPIO_Init+0x1ee>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e002      	b.n	8002c26 <HAL_GPIO_Init+0x1ee>
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <HAL_GPIO_Init+0x1ee>
 8002c24:	2300      	movs	r3, #0
 8002c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c28:	f002 0203 	and.w	r2, r2, #3
 8002c2c:	0092      	lsls	r2, r2, #2
 8002c2e:	4093      	lsls	r3, r2
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c36:	492f      	ldr	r1, [pc, #188]	; (8002cf4 <HAL_GPIO_Init+0x2bc>)
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	089b      	lsrs	r3, r3, #2
 8002c3c:	3302      	adds	r3, #2
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d006      	beq.n	8002c5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c50:	4b2d      	ldr	r3, [pc, #180]	; (8002d08 <HAL_GPIO_Init+0x2d0>)
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	492c      	ldr	r1, [pc, #176]	; (8002d08 <HAL_GPIO_Init+0x2d0>)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	608b      	str	r3, [r1, #8]
 8002c5c:	e006      	b.n	8002c6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c5e:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <HAL_GPIO_Init+0x2d0>)
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	43db      	mvns	r3, r3
 8002c66:	4928      	ldr	r1, [pc, #160]	; (8002d08 <HAL_GPIO_Init+0x2d0>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d006      	beq.n	8002c86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c78:	4b23      	ldr	r3, [pc, #140]	; (8002d08 <HAL_GPIO_Init+0x2d0>)
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	4922      	ldr	r1, [pc, #136]	; (8002d08 <HAL_GPIO_Init+0x2d0>)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	60cb      	str	r3, [r1, #12]
 8002c84:	e006      	b.n	8002c94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c86:	4b20      	ldr	r3, [pc, #128]	; (8002d08 <HAL_GPIO_Init+0x2d0>)
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	491e      	ldr	r1, [pc, #120]	; (8002d08 <HAL_GPIO_Init+0x2d0>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d006      	beq.n	8002cae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ca0:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <HAL_GPIO_Init+0x2d0>)
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	4918      	ldr	r1, [pc, #96]	; (8002d08 <HAL_GPIO_Init+0x2d0>)
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	604b      	str	r3, [r1, #4]
 8002cac:	e006      	b.n	8002cbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cae:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <HAL_GPIO_Init+0x2d0>)
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	4914      	ldr	r1, [pc, #80]	; (8002d08 <HAL_GPIO_Init+0x2d0>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d021      	beq.n	8002d0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cc8:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <HAL_GPIO_Init+0x2d0>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	490e      	ldr	r1, [pc, #56]	; (8002d08 <HAL_GPIO_Init+0x2d0>)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	600b      	str	r3, [r1, #0]
 8002cd4:	e021      	b.n	8002d1a <HAL_GPIO_Init+0x2e2>
 8002cd6:	bf00      	nop
 8002cd8:	10320000 	.word	0x10320000
 8002cdc:	10310000 	.word	0x10310000
 8002ce0:	10220000 	.word	0x10220000
 8002ce4:	10210000 	.word	0x10210000
 8002ce8:	10120000 	.word	0x10120000
 8002cec:	10110000 	.word	0x10110000
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40010000 	.word	0x40010000
 8002cf8:	40010800 	.word	0x40010800
 8002cfc:	40010c00 	.word	0x40010c00
 8002d00:	40011000 	.word	0x40011000
 8002d04:	40011400 	.word	0x40011400
 8002d08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_GPIO_Init+0x304>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	4909      	ldr	r1, [pc, #36]	; (8002d3c <HAL_GPIO_Init+0x304>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f47f ae8e 	bne.w	8002a4c <HAL_GPIO_Init+0x14>
  }
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	372c      	adds	r7, #44	; 0x2c
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	40010400 	.word	0x40010400

08002d40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	887b      	ldrh	r3, [r7, #2]
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
 8002d5c:	e001      	b.n	8002d62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	460b      	mov	r3, r1
 8002d78:	807b      	strh	r3, [r7, #2]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d7e:	787b      	ldrb	r3, [r7, #1]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d84:	887a      	ldrh	r2, [r7, #2]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d8a:	e003      	b.n	8002d94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d8c:	887b      	ldrh	r3, [r7, #2]
 8002d8e:	041a      	lsls	r2, r3, #16
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	611a      	str	r2, [r3, #16]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr

08002d9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b085      	sub	sp, #20
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	460b      	mov	r3, r1
 8002da8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002db0:	887a      	ldrh	r2, [r7, #2]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4013      	ands	r3, r2
 8002db6:	041a      	lsls	r2, r3, #16
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	43d9      	mvns	r1, r3
 8002dbc:	887b      	ldrh	r3, [r7, #2]
 8002dbe:	400b      	ands	r3, r1
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	611a      	str	r2, [r3, #16]
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e12b      	b.n	800303a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fe fb90 	bl	800151c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2224      	movs	r2, #36	; 0x24
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0201 	bic.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e34:	f001 f960 	bl	80040f8 <HAL_RCC_GetPCLK1Freq>
 8002e38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	4a81      	ldr	r2, [pc, #516]	; (8003044 <HAL_I2C_Init+0x274>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d807      	bhi.n	8002e54 <HAL_I2C_Init+0x84>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4a80      	ldr	r2, [pc, #512]	; (8003048 <HAL_I2C_Init+0x278>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	bf94      	ite	ls
 8002e4c:	2301      	movls	r3, #1
 8002e4e:	2300      	movhi	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	e006      	b.n	8002e62 <HAL_I2C_Init+0x92>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4a7d      	ldr	r2, [pc, #500]	; (800304c <HAL_I2C_Init+0x27c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	bf94      	ite	ls
 8002e5c:	2301      	movls	r3, #1
 8002e5e:	2300      	movhi	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e0e7      	b.n	800303a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	4a78      	ldr	r2, [pc, #480]	; (8003050 <HAL_I2C_Init+0x280>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	0c9b      	lsrs	r3, r3, #18
 8002e74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4a6a      	ldr	r2, [pc, #424]	; (8003044 <HAL_I2C_Init+0x274>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d802      	bhi.n	8002ea4 <HAL_I2C_Init+0xd4>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	e009      	b.n	8002eb8 <HAL_I2C_Init+0xe8>
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002eaa:	fb02 f303 	mul.w	r3, r2, r3
 8002eae:	4a69      	ldr	r2, [pc, #420]	; (8003054 <HAL_I2C_Init+0x284>)
 8002eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb4:	099b      	lsrs	r3, r3, #6
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	495c      	ldr	r1, [pc, #368]	; (8003044 <HAL_I2C_Init+0x274>)
 8002ed4:	428b      	cmp	r3, r1
 8002ed6:	d819      	bhi.n	8002f0c <HAL_I2C_Init+0x13c>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	1e59      	subs	r1, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee6:	1c59      	adds	r1, r3, #1
 8002ee8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002eec:	400b      	ands	r3, r1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <HAL_I2C_Init+0x138>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1e59      	subs	r1, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f00:	3301      	adds	r3, #1
 8002f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f06:	e051      	b.n	8002fac <HAL_I2C_Init+0x1dc>
 8002f08:	2304      	movs	r3, #4
 8002f0a:	e04f      	b.n	8002fac <HAL_I2C_Init+0x1dc>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d111      	bne.n	8002f38 <HAL_I2C_Init+0x168>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1e58      	subs	r0, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6859      	ldr	r1, [r3, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	440b      	add	r3, r1
 8002f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f26:	3301      	adds	r3, #1
 8002f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	e012      	b.n	8002f5e <HAL_I2C_Init+0x18e>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1e58      	subs	r0, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	0099      	lsls	r1, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	bf0c      	ite	eq
 8002f58:	2301      	moveq	r3, #1
 8002f5a:	2300      	movne	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_I2C_Init+0x196>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e022      	b.n	8002fac <HAL_I2C_Init+0x1dc>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10e      	bne.n	8002f8c <HAL_I2C_Init+0x1bc>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	1e58      	subs	r0, r3, #1
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6859      	ldr	r1, [r3, #4]
 8002f76:	460b      	mov	r3, r1
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	440b      	add	r3, r1
 8002f7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f80:	3301      	adds	r3, #1
 8002f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f8a:	e00f      	b.n	8002fac <HAL_I2C_Init+0x1dc>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1e58      	subs	r0, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6859      	ldr	r1, [r3, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	0099      	lsls	r1, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	6809      	ldr	r1, [r1, #0]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6911      	ldr	r1, [r2, #16]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	68d2      	ldr	r2, [r2, #12]
 8002fe6:	4311      	orrs	r1, r2
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	430b      	orrs	r3, r1
 8002fee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	000186a0 	.word	0x000186a0
 8003048:	001e847f 	.word	0x001e847f
 800304c:	003d08ff 	.word	0x003d08ff
 8003050:	431bde83 	.word	0x431bde83
 8003054:	10624dd3 	.word	0x10624dd3

08003058 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	461a      	mov	r2, r3
 8003064:	460b      	mov	r3, r1
 8003066:	817b      	strh	r3, [r7, #10]
 8003068:	4613      	mov	r3, r2
 800306a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800306c:	f7ff fbd2 	bl	8002814 <HAL_GetTick>
 8003070:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b20      	cmp	r3, #32
 800307c:	f040 80e0 	bne.w	8003240 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	2319      	movs	r3, #25
 8003086:	2201      	movs	r2, #1
 8003088:	4970      	ldr	r1, [pc, #448]	; (800324c <HAL_I2C_Master_Transmit+0x1f4>)
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fa92 	bl	80035b4 <I2C_WaitOnFlagUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003096:	2302      	movs	r3, #2
 8003098:	e0d3      	b.n	8003242 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_I2C_Master_Transmit+0x50>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e0cc      	b.n	8003242 <HAL_I2C_Master_Transmit+0x1ea>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d007      	beq.n	80030ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0201 	orr.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2221      	movs	r2, #33	; 0x21
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2210      	movs	r2, #16
 80030ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	893a      	ldrh	r2, [r7, #8]
 80030fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4a50      	ldr	r2, [pc, #320]	; (8003250 <HAL_I2C_Master_Transmit+0x1f8>)
 800310e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003110:	8979      	ldrh	r1, [r7, #10]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	6a3a      	ldr	r2, [r7, #32]
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f9ca 	bl	80034b0 <I2C_MasterRequestWrite>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e08d      	b.n	8003242 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003126:	2300      	movs	r3, #0
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800313c:	e066      	b.n	800320c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	6a39      	ldr	r1, [r7, #32]
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 fb50 	bl	80037e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00d      	beq.n	800316a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	2b04      	cmp	r3, #4
 8003154:	d107      	bne.n	8003166 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003164:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e06b      	b.n	8003242 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	781a      	ldrb	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d11b      	bne.n	80031e0 <HAL_I2C_Master_Transmit+0x188>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d017      	beq.n	80031e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	781a      	ldrb	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	6a39      	ldr	r1, [r7, #32]
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 fb47 	bl	8003878 <I2C_WaitOnBTFFlagUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00d      	beq.n	800320c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d107      	bne.n	8003208 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003206:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e01a      	b.n	8003242 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003210:	2b00      	cmp	r3, #0
 8003212:	d194      	bne.n	800313e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	e000      	b.n	8003242 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003240:	2302      	movs	r3, #2
  }
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	00100002 	.word	0x00100002
 8003250:	ffff0000 	.word	0xffff0000

08003254 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	; 0x28
 8003258:	af02      	add	r7, sp, #8
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	607a      	str	r2, [r7, #4]
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	460b      	mov	r3, r1
 8003262:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003264:	f7ff fad6 	bl	8002814 <HAL_GetTick>
 8003268:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b20      	cmp	r3, #32
 8003278:	f040 8111 	bne.w	800349e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	2319      	movs	r3, #25
 8003282:	2201      	movs	r2, #1
 8003284:	4988      	ldr	r1, [pc, #544]	; (80034a8 <HAL_I2C_IsDeviceReady+0x254>)
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f994 	bl	80035b4 <I2C_WaitOnFlagUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003292:	2302      	movs	r3, #2
 8003294:	e104      	b.n	80034a0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_I2C_IsDeviceReady+0x50>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e0fd      	b.n	80034a0 <HAL_I2C_IsDeviceReady+0x24c>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d007      	beq.n	80032ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0201 	orr.w	r2, r2, #1
 80032c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2224      	movs	r2, #36	; 0x24
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4a70      	ldr	r2, [pc, #448]	; (80034ac <HAL_I2C_IsDeviceReady+0x258>)
 80032ec:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2200      	movs	r2, #0
 8003306:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f952 	bl	80035b4 <I2C_WaitOnFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00d      	beq.n	8003332 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003324:	d103      	bne.n	800332e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800332c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e0b6      	b.n	80034a0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003332:	897b      	ldrh	r3, [r7, #10]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	461a      	mov	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003340:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003342:	f7ff fa67 	bl	8002814 <HAL_GetTick>
 8003346:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b02      	cmp	r3, #2
 8003354:	bf0c      	ite	eq
 8003356:	2301      	moveq	r3, #1
 8003358:	2300      	movne	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336c:	bf0c      	ite	eq
 800336e:	2301      	moveq	r3, #1
 8003370:	2300      	movne	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003376:	e025      	b.n	80033c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003378:	f7ff fa4c 	bl	8002814 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d302      	bcc.n	800338e <HAL_I2C_IsDeviceReady+0x13a>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d103      	bne.n	8003396 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	22a0      	movs	r2, #160	; 0xa0
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	bf0c      	ite	eq
 80033a4:	2301      	moveq	r3, #1
 80033a6:	2300      	movne	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ba:	bf0c      	ite	eq
 80033bc:	2301      	moveq	r3, #1
 80033be:	2300      	movne	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2ba0      	cmp	r3, #160	; 0xa0
 80033ce:	d005      	beq.n	80033dc <HAL_I2C_IsDeviceReady+0x188>
 80033d0:	7dfb      	ldrb	r3, [r7, #23]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d102      	bne.n	80033dc <HAL_I2C_IsDeviceReady+0x188>
 80033d6:	7dbb      	ldrb	r3, [r7, #22]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0cd      	beq.n	8003378 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d129      	bne.n	8003446 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003400:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003402:	2300      	movs	r3, #0
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	2319      	movs	r3, #25
 800341e:	2201      	movs	r2, #1
 8003420:	4921      	ldr	r1, [pc, #132]	; (80034a8 <HAL_I2C_IsDeviceReady+0x254>)
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f8c6 	bl	80035b4 <I2C_WaitOnFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e036      	b.n	80034a0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	e02c      	b.n	80034a0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003454:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800345e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	2319      	movs	r3, #25
 8003466:	2201      	movs	r2, #1
 8003468:	490f      	ldr	r1, [pc, #60]	; (80034a8 <HAL_I2C_IsDeviceReady+0x254>)
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f8a2 	bl	80035b4 <I2C_WaitOnFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e012      	b.n	80034a0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	3301      	adds	r3, #1
 800347e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	429a      	cmp	r2, r3
 8003486:	f4ff af32 	bcc.w	80032ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800349e:	2302      	movs	r3, #2
  }
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3720      	adds	r7, #32
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	00100002 	.word	0x00100002
 80034ac:	ffff0000 	.word	0xffff0000

080034b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b088      	sub	sp, #32
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	460b      	mov	r3, r1
 80034be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d006      	beq.n	80034da <I2C_MasterRequestWrite+0x2a>
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d003      	beq.n	80034da <I2C_MasterRequestWrite+0x2a>
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034d8:	d108      	bne.n	80034ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e00b      	b.n	8003504 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	2b12      	cmp	r3, #18
 80034f2:	d107      	bne.n	8003504 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003502:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f84f 	bl	80035b4 <I2C_WaitOnFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00d      	beq.n	8003538 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800352a:	d103      	bne.n	8003534 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003532:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e035      	b.n	80035a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003540:	d108      	bne.n	8003554 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003542:	897b      	ldrh	r3, [r7, #10]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003550:	611a      	str	r2, [r3, #16]
 8003552:	e01b      	b.n	800358c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003554:	897b      	ldrh	r3, [r7, #10]
 8003556:	11db      	asrs	r3, r3, #7
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f003 0306 	and.w	r3, r3, #6
 800355e:	b2db      	uxtb	r3, r3
 8003560:	f063 030f 	orn	r3, r3, #15
 8003564:	b2da      	uxtb	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	490e      	ldr	r1, [pc, #56]	; (80035ac <I2C_MasterRequestWrite+0xfc>)
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f898 	bl	80036a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e010      	b.n	80035a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003582:	897b      	ldrh	r3, [r7, #10]
 8003584:	b2da      	uxtb	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	4907      	ldr	r1, [pc, #28]	; (80035b0 <I2C_MasterRequestWrite+0x100>)
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f888 	bl	80036a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	00010008 	.word	0x00010008
 80035b0:	00010002 	.word	0x00010002

080035b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	4613      	mov	r3, r2
 80035c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c4:	e048      	b.n	8003658 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035cc:	d044      	beq.n	8003658 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ce:	f7ff f921 	bl	8002814 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d302      	bcc.n	80035e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d139      	bne.n	8003658 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	0c1b      	lsrs	r3, r3, #16
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d10d      	bne.n	800360a <I2C_WaitOnFlagUntilTimeout+0x56>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	43da      	mvns	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	4013      	ands	r3, r2
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf0c      	ite	eq
 8003600:	2301      	moveq	r3, #1
 8003602:	2300      	movne	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	e00c      	b.n	8003624 <I2C_WaitOnFlagUntilTimeout+0x70>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	43da      	mvns	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	4013      	ands	r3, r2
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	bf0c      	ite	eq
 800361c:	2301      	moveq	r3, #1
 800361e:	2300      	movne	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	429a      	cmp	r2, r3
 8003628:	d116      	bne.n	8003658 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	f043 0220 	orr.w	r2, r3, #32
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e023      	b.n	80036a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	0c1b      	lsrs	r3, r3, #16
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b01      	cmp	r3, #1
 8003660:	d10d      	bne.n	800367e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	43da      	mvns	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4013      	ands	r3, r2
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	e00c      	b.n	8003698 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	43da      	mvns	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	4013      	ands	r3, r2
 800368a:	b29b      	uxth	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	bf0c      	ite	eq
 8003690:	2301      	moveq	r3, #1
 8003692:	2300      	movne	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	461a      	mov	r2, r3
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	429a      	cmp	r2, r3
 800369c:	d093      	beq.n	80035c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036b6:	e071      	b.n	800379c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c6:	d123      	bne.n	8003710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	f043 0204 	orr.w	r2, r3, #4
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e067      	b.n	80037e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003716:	d041      	beq.n	800379c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003718:	f7ff f87c 	bl	8002814 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	429a      	cmp	r2, r3
 8003726:	d302      	bcc.n	800372e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d136      	bne.n	800379c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	0c1b      	lsrs	r3, r3, #16
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b01      	cmp	r3, #1
 8003736:	d10c      	bne.n	8003752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	43da      	mvns	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4013      	ands	r3, r2
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	bf14      	ite	ne
 800374a:	2301      	movne	r3, #1
 800374c:	2300      	moveq	r3, #0
 800374e:	b2db      	uxtb	r3, r3
 8003750:	e00b      	b.n	800376a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	43da      	mvns	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	4013      	ands	r3, r2
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	bf14      	ite	ne
 8003764:	2301      	movne	r3, #1
 8003766:	2300      	moveq	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d016      	beq.n	800379c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	f043 0220 	orr.w	r2, r3, #32
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e021      	b.n	80037e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	0c1b      	lsrs	r3, r3, #16
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d10c      	bne.n	80037c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	43da      	mvns	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	4013      	ands	r3, r2
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf14      	ite	ne
 80037b8:	2301      	movne	r3, #1
 80037ba:	2300      	moveq	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	e00b      	b.n	80037d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	43da      	mvns	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4013      	ands	r3, r2
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	bf14      	ite	ne
 80037d2:	2301      	movne	r3, #1
 80037d4:	2300      	moveq	r3, #0
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f47f af6d 	bne.w	80036b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037f4:	e034      	b.n	8003860 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f886 	bl	8003908 <I2C_IsAcknowledgeFailed>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e034      	b.n	8003870 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800380c:	d028      	beq.n	8003860 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380e:	f7ff f801 	bl	8002814 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	429a      	cmp	r2, r3
 800381c:	d302      	bcc.n	8003824 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d11d      	bne.n	8003860 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382e:	2b80      	cmp	r3, #128	; 0x80
 8003830:	d016      	beq.n	8003860 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	f043 0220 	orr.w	r2, r3, #32
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e007      	b.n	8003870 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386a:	2b80      	cmp	r3, #128	; 0x80
 800386c:	d1c3      	bne.n	80037f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003884:	e034      	b.n	80038f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 f83e 	bl	8003908 <I2C_IsAcknowledgeFailed>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e034      	b.n	8003900 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800389c:	d028      	beq.n	80038f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389e:	f7fe ffb9 	bl	8002814 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d302      	bcc.n	80038b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d11d      	bne.n	80038f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d016      	beq.n	80038f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	f043 0220 	orr.w	r2, r3, #32
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e007      	b.n	8003900 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d1c3      	bne.n	8003886 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391e:	d11b      	bne.n	8003958 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003928:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	f043 0204 	orr.w	r2, r3, #4
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e000      	b.n	800395a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e272      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 8087 	beq.w	8003a92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003984:	4b92      	ldr	r3, [pc, #584]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 030c 	and.w	r3, r3, #12
 800398c:	2b04      	cmp	r3, #4
 800398e:	d00c      	beq.n	80039aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003990:	4b8f      	ldr	r3, [pc, #572]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 030c 	and.w	r3, r3, #12
 8003998:	2b08      	cmp	r3, #8
 800399a:	d112      	bne.n	80039c2 <HAL_RCC_OscConfig+0x5e>
 800399c:	4b8c      	ldr	r3, [pc, #560]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a8:	d10b      	bne.n	80039c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039aa:	4b89      	ldr	r3, [pc, #548]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d06c      	beq.n	8003a90 <HAL_RCC_OscConfig+0x12c>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d168      	bne.n	8003a90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e24c      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ca:	d106      	bne.n	80039da <HAL_RCC_OscConfig+0x76>
 80039cc:	4b80      	ldr	r3, [pc, #512]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a7f      	ldr	r2, [pc, #508]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	e02e      	b.n	8003a38 <HAL_RCC_OscConfig+0xd4>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10c      	bne.n	80039fc <HAL_RCC_OscConfig+0x98>
 80039e2:	4b7b      	ldr	r3, [pc, #492]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a7a      	ldr	r2, [pc, #488]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	4b78      	ldr	r3, [pc, #480]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a77      	ldr	r2, [pc, #476]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	e01d      	b.n	8003a38 <HAL_RCC_OscConfig+0xd4>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCC_OscConfig+0xbc>
 8003a06:	4b72      	ldr	r3, [pc, #456]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a71      	ldr	r2, [pc, #452]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	4b6f      	ldr	r3, [pc, #444]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a6e      	ldr	r2, [pc, #440]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	e00b      	b.n	8003a38 <HAL_RCC_OscConfig+0xd4>
 8003a20:	4b6b      	ldr	r3, [pc, #428]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a6a      	ldr	r2, [pc, #424]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	4b68      	ldr	r3, [pc, #416]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a67      	ldr	r2, [pc, #412]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d013      	beq.n	8003a68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a40:	f7fe fee8 	bl	8002814 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a48:	f7fe fee4 	bl	8002814 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	; 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e200      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	4b5d      	ldr	r3, [pc, #372]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0xe4>
 8003a66:	e014      	b.n	8003a92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7fe fed4 	bl	8002814 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a70:	f7fe fed0 	bl	8002814 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b64      	cmp	r3, #100	; 0x64
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e1ec      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a82:	4b53      	ldr	r3, [pc, #332]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x10c>
 8003a8e:	e000      	b.n	8003a92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d063      	beq.n	8003b66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a9e:	4b4c      	ldr	r3, [pc, #304]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003aaa:	4b49      	ldr	r3, [pc, #292]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d11c      	bne.n	8003af0 <HAL_RCC_OscConfig+0x18c>
 8003ab6:	4b46      	ldr	r3, [pc, #280]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d116      	bne.n	8003af0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac2:	4b43      	ldr	r3, [pc, #268]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <HAL_RCC_OscConfig+0x176>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d001      	beq.n	8003ada <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e1c0      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ada:	4b3d      	ldr	r3, [pc, #244]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4939      	ldr	r1, [pc, #228]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aee:	e03a      	b.n	8003b66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d020      	beq.n	8003b3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003af8:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <HAL_RCC_OscConfig+0x270>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afe:	f7fe fe89 	bl	8002814 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b06:	f7fe fe85 	bl	8002814 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e1a1      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b18:	4b2d      	ldr	r3, [pc, #180]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f0      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b24:	4b2a      	ldr	r3, [pc, #168]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	4927      	ldr	r1, [pc, #156]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	600b      	str	r3, [r1, #0]
 8003b38:	e015      	b.n	8003b66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b3a:	4b26      	ldr	r3, [pc, #152]	; (8003bd4 <HAL_RCC_OscConfig+0x270>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fe fe68 	bl	8002814 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b48:	f7fe fe64 	bl	8002814 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e180      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5a:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d03a      	beq.n	8003be8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d019      	beq.n	8003bae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b7a:	4b17      	ldr	r3, [pc, #92]	; (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b80:	f7fe fe48 	bl	8002814 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b88:	f7fe fe44 	bl	8002814 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e160      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ba6:	2001      	movs	r0, #1
 8003ba8:	f000 faba 	bl	8004120 <RCC_Delay>
 8003bac:	e01c      	b.n	8003be8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bae:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb4:	f7fe fe2e 	bl	8002814 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bba:	e00f      	b.n	8003bdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bbc:	f7fe fe2a 	bl	8002814 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d908      	bls.n	8003bdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e146      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	42420000 	.word	0x42420000
 8003bd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bdc:	4b92      	ldr	r3, [pc, #584]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e9      	bne.n	8003bbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80a6 	beq.w	8003d42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bfa:	4b8b      	ldr	r3, [pc, #556]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10d      	bne.n	8003c22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c06:	4b88      	ldr	r3, [pc, #544]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	4a87      	ldr	r2, [pc, #540]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c10:	61d3      	str	r3, [r2, #28]
 8003c12:	4b85      	ldr	r3, [pc, #532]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c22:	4b82      	ldr	r3, [pc, #520]	; (8003e2c <HAL_RCC_OscConfig+0x4c8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d118      	bne.n	8003c60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c2e:	4b7f      	ldr	r3, [pc, #508]	; (8003e2c <HAL_RCC_OscConfig+0x4c8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a7e      	ldr	r2, [pc, #504]	; (8003e2c <HAL_RCC_OscConfig+0x4c8>)
 8003c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c3a:	f7fe fdeb 	bl	8002814 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c42:	f7fe fde7 	bl	8002814 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b64      	cmp	r3, #100	; 0x64
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e103      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c54:	4b75      	ldr	r3, [pc, #468]	; (8003e2c <HAL_RCC_OscConfig+0x4c8>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d106      	bne.n	8003c76 <HAL_RCC_OscConfig+0x312>
 8003c68:	4b6f      	ldr	r3, [pc, #444]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	4a6e      	ldr	r2, [pc, #440]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6213      	str	r3, [r2, #32]
 8003c74:	e02d      	b.n	8003cd2 <HAL_RCC_OscConfig+0x36e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x334>
 8003c7e:	4b6a      	ldr	r3, [pc, #424]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	4a69      	ldr	r2, [pc, #420]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	6213      	str	r3, [r2, #32]
 8003c8a:	4b67      	ldr	r3, [pc, #412]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	4a66      	ldr	r2, [pc, #408]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c90:	f023 0304 	bic.w	r3, r3, #4
 8003c94:	6213      	str	r3, [r2, #32]
 8003c96:	e01c      	b.n	8003cd2 <HAL_RCC_OscConfig+0x36e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	2b05      	cmp	r3, #5
 8003c9e:	d10c      	bne.n	8003cba <HAL_RCC_OscConfig+0x356>
 8003ca0:	4b61      	ldr	r3, [pc, #388]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	4a60      	ldr	r2, [pc, #384]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003ca6:	f043 0304 	orr.w	r3, r3, #4
 8003caa:	6213      	str	r3, [r2, #32]
 8003cac:	4b5e      	ldr	r3, [pc, #376]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	4a5d      	ldr	r2, [pc, #372]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	6213      	str	r3, [r2, #32]
 8003cb8:	e00b      	b.n	8003cd2 <HAL_RCC_OscConfig+0x36e>
 8003cba:	4b5b      	ldr	r3, [pc, #364]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	4a5a      	ldr	r2, [pc, #360]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	f023 0301 	bic.w	r3, r3, #1
 8003cc4:	6213      	str	r3, [r2, #32]
 8003cc6:	4b58      	ldr	r3, [pc, #352]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	4a57      	ldr	r2, [pc, #348]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003ccc:	f023 0304 	bic.w	r3, r3, #4
 8003cd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d015      	beq.n	8003d06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cda:	f7fe fd9b 	bl	8002814 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce0:	e00a      	b.n	8003cf8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce2:	f7fe fd97 	bl	8002814 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e0b1      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf8:	4b4b      	ldr	r3, [pc, #300]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0ee      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x37e>
 8003d04:	e014      	b.n	8003d30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d06:	f7fe fd85 	bl	8002814 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d0c:	e00a      	b.n	8003d24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0e:	f7fe fd81 	bl	8002814 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e09b      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d24:	4b40      	ldr	r3, [pc, #256]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1ee      	bne.n	8003d0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d105      	bne.n	8003d42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d36:	4b3c      	ldr	r3, [pc, #240]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	4a3b      	ldr	r2, [pc, #236]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 8087 	beq.w	8003e5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d4c:	4b36      	ldr	r3, [pc, #216]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 030c 	and.w	r3, r3, #12
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d061      	beq.n	8003e1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d146      	bne.n	8003dee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d60:	4b33      	ldr	r3, [pc, #204]	; (8003e30 <HAL_RCC_OscConfig+0x4cc>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d66:	f7fe fd55 	bl	8002814 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d6e:	f7fe fd51 	bl	8002814 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e06d      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d80:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f0      	bne.n	8003d6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d94:	d108      	bne.n	8003da8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d96:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	4921      	ldr	r1, [pc, #132]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003da8:	4b1f      	ldr	r3, [pc, #124]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a19      	ldr	r1, [r3, #32]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	430b      	orrs	r3, r1
 8003dba:	491b      	ldr	r1, [pc, #108]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <HAL_RCC_OscConfig+0x4cc>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc6:	f7fe fd25 	bl	8002814 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dce:	f7fe fd21 	bl	8002814 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e03d      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003de0:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x46a>
 8003dec:	e035      	b.n	8003e5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dee:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <HAL_RCC_OscConfig+0x4cc>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7fe fd0e 	bl	8002814 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfc:	f7fe fd0a 	bl	8002814 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e026      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x498>
 8003e1a:	e01e      	b.n	8003e5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d107      	bne.n	8003e34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e019      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	40007000 	.word	0x40007000
 8003e30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e34:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <HAL_RCC_OscConfig+0x500>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d106      	bne.n	8003e56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d001      	beq.n	8003e5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40021000 	.word	0x40021000

08003e68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0d0      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e7c:	4b6a      	ldr	r3, [pc, #424]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d910      	bls.n	8003eac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8a:	4b67      	ldr	r3, [pc, #412]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 0207 	bic.w	r2, r3, #7
 8003e92:	4965      	ldr	r1, [pc, #404]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9a:	4b63      	ldr	r3, [pc, #396]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0b8      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d020      	beq.n	8003efa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ec4:	4b59      	ldr	r3, [pc, #356]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	4a58      	ldr	r2, [pc, #352]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003eca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ece:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003edc:	4b53      	ldr	r3, [pc, #332]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	4a52      	ldr	r2, [pc, #328]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ee2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ee6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee8:	4b50      	ldr	r3, [pc, #320]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	494d      	ldr	r1, [pc, #308]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d040      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0e:	4b47      	ldr	r3, [pc, #284]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d115      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e07f      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f26:	4b41      	ldr	r3, [pc, #260]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e073      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f36:	4b3d      	ldr	r3, [pc, #244]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e06b      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f46:	4b39      	ldr	r3, [pc, #228]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f023 0203 	bic.w	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4936      	ldr	r1, [pc, #216]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f58:	f7fe fc5c 	bl	8002814 <HAL_GetTick>
 8003f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f60:	f7fe fc58 	bl	8002814 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e053      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	4b2d      	ldr	r3, [pc, #180]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 020c 	and.w	r2, r3, #12
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d1eb      	bne.n	8003f60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f88:	4b27      	ldr	r3, [pc, #156]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d210      	bcs.n	8003fb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b24      	ldr	r3, [pc, #144]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 0207 	bic.w	r2, r3, #7
 8003f9e:	4922      	ldr	r1, [pc, #136]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	4b20      	ldr	r3, [pc, #128]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e032      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc4:	4b19      	ldr	r3, [pc, #100]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4916      	ldr	r1, [pc, #88]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fe2:	4b12      	ldr	r3, [pc, #72]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	490e      	ldr	r1, [pc, #56]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ff6:	f000 f821 	bl	800403c <HAL_RCC_GetSysClockFreq>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	490a      	ldr	r1, [pc, #40]	; (8004030 <HAL_RCC_ClockConfig+0x1c8>)
 8004008:	5ccb      	ldrb	r3, [r1, r3]
 800400a:	fa22 f303 	lsr.w	r3, r2, r3
 800400e:	4a09      	ldr	r2, [pc, #36]	; (8004034 <HAL_RCC_ClockConfig+0x1cc>)
 8004010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004012:	4b09      	ldr	r3, [pc, #36]	; (8004038 <HAL_RCC_ClockConfig+0x1d0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe fbba 	bl	8002790 <HAL_InitTick>

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40022000 	.word	0x40022000
 800402c:	40021000 	.word	0x40021000
 8004030:	0800a5c0 	.word	0x0800a5c0
 8004034:	20000010 	.word	0x20000010
 8004038:	20000014 	.word	0x20000014

0800403c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	2300      	movs	r3, #0
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	2300      	movs	r3, #0
 8004050:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004056:	4b1e      	ldr	r3, [pc, #120]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 030c 	and.w	r3, r3, #12
 8004062:	2b04      	cmp	r3, #4
 8004064:	d002      	beq.n	800406c <HAL_RCC_GetSysClockFreq+0x30>
 8004066:	2b08      	cmp	r3, #8
 8004068:	d003      	beq.n	8004072 <HAL_RCC_GetSysClockFreq+0x36>
 800406a:	e027      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800406c:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800406e:	613b      	str	r3, [r7, #16]
      break;
 8004070:	e027      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	0c9b      	lsrs	r3, r3, #18
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	4a17      	ldr	r2, [pc, #92]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800407c:	5cd3      	ldrb	r3, [r2, r3]
 800407e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d010      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800408a:	4b11      	ldr	r3, [pc, #68]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	0c5b      	lsrs	r3, r3, #17
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	4a11      	ldr	r2, [pc, #68]	; (80040dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004096:	5cd3      	ldrb	r3, [r2, r3]
 8004098:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a0d      	ldr	r2, [pc, #52]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800409e:	fb03 f202 	mul.w	r2, r3, r2
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	e004      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a0c      	ldr	r2, [pc, #48]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80040b0:	fb02 f303 	mul.w	r3, r2, r3
 80040b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	613b      	str	r3, [r7, #16]
      break;
 80040ba:	e002      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80040be:	613b      	str	r3, [r7, #16]
      break;
 80040c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040c2:	693b      	ldr	r3, [r7, #16]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40021000 	.word	0x40021000
 80040d4:	007a1200 	.word	0x007a1200
 80040d8:	0800a5d8 	.word	0x0800a5d8
 80040dc:	0800a5e8 	.word	0x0800a5e8
 80040e0:	003d0900 	.word	0x003d0900

080040e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040e8:	4b02      	ldr	r3, [pc, #8]	; (80040f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80040ea:	681b      	ldr	r3, [r3, #0]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr
 80040f4:	20000010 	.word	0x20000010

080040f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040fc:	f7ff fff2 	bl	80040e4 <HAL_RCC_GetHCLKFreq>
 8004100:	4602      	mov	r2, r0
 8004102:	4b05      	ldr	r3, [pc, #20]	; (8004118 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	0a1b      	lsrs	r3, r3, #8
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	4903      	ldr	r1, [pc, #12]	; (800411c <HAL_RCC_GetPCLK1Freq+0x24>)
 800410e:	5ccb      	ldrb	r3, [r1, r3]
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004114:	4618      	mov	r0, r3
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40021000 	.word	0x40021000
 800411c:	0800a5d0 	.word	0x0800a5d0

08004120 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004128:	4b0a      	ldr	r3, [pc, #40]	; (8004154 <RCC_Delay+0x34>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a0a      	ldr	r2, [pc, #40]	; (8004158 <RCC_Delay+0x38>)
 800412e:	fba2 2303 	umull	r2, r3, r2, r3
 8004132:	0a5b      	lsrs	r3, r3, #9
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	fb02 f303 	mul.w	r3, r2, r3
 800413a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800413c:	bf00      	nop
  }
  while (Delay --);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	1e5a      	subs	r2, r3, #1
 8004142:	60fa      	str	r2, [r7, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1f9      	bne.n	800413c <RCC_Delay+0x1c>
}
 8004148:	bf00      	nop
 800414a:	bf00      	nop
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr
 8004154:	20000010 	.word	0x20000010
 8004158:	10624dd3 	.word	0x10624dd3

0800415c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e041      	b.n	80041f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d106      	bne.n	8004188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7fe fa6e 	bl	8002664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3304      	adds	r3, #4
 8004198:	4619      	mov	r1, r3
 800419a:	4610      	mov	r0, r2
 800419c:	f000 fa70 	bl	8004680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d001      	beq.n	8004214 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e032      	b.n	800427a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a18      	ldr	r2, [pc, #96]	; (8004284 <HAL_TIM_Base_Start+0x88>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00e      	beq.n	8004244 <HAL_TIM_Base_Start+0x48>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422e:	d009      	beq.n	8004244 <HAL_TIM_Base_Start+0x48>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a14      	ldr	r2, [pc, #80]	; (8004288 <HAL_TIM_Base_Start+0x8c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d004      	beq.n	8004244 <HAL_TIM_Base_Start+0x48>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a13      	ldr	r2, [pc, #76]	; (800428c <HAL_TIM_Base_Start+0x90>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d111      	bne.n	8004268 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b06      	cmp	r3, #6
 8004254:	d010      	beq.n	8004278 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 0201 	orr.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004266:	e007      	b.n	8004278 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr
 8004284:	40012c00 	.word	0x40012c00
 8004288:	40000400 	.word	0x40000400
 800428c:	40000800 	.word	0x40000800

08004290 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e093      	b.n	80043cc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d106      	bne.n	80042be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7fe f9f1 	bl	80026a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2202      	movs	r2, #2
 80042c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6812      	ldr	r2, [r2, #0]
 80042d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042d4:	f023 0307 	bic.w	r3, r3, #7
 80042d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3304      	adds	r3, #4
 80042e2:	4619      	mov	r1, r3
 80042e4:	4610      	mov	r0, r2
 80042e6:	f000 f9cb 	bl	8004680 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004312:	f023 0303 	bic.w	r3, r3, #3
 8004316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	4313      	orrs	r3, r2
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004330:	f023 030c 	bic.w	r3, r3, #12
 8004334:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800433c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004340:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	4313      	orrs	r3, r2
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	011a      	lsls	r2, r3, #4
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	031b      	lsls	r3, r3, #12
 8004360:	4313      	orrs	r3, r2
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800436e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	4313      	orrs	r3, r2
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d110      	bne.n	8004426 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d102      	bne.n	8004410 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800440a:	7b7b      	ldrb	r3, [r7, #13]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d001      	beq.n	8004414 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e069      	b.n	80044e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004424:	e031      	b.n	800448a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b04      	cmp	r3, #4
 800442a:	d110      	bne.n	800444e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800442c:	7bbb      	ldrb	r3, [r7, #14]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d102      	bne.n	8004438 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004432:	7b3b      	ldrb	r3, [r7, #12]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d001      	beq.n	800443c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e055      	b.n	80044e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800444c:	e01d      	b.n	800448a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d108      	bne.n	8004466 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004454:	7bbb      	ldrb	r3, [r7, #14]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d105      	bne.n	8004466 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800445a:	7b7b      	ldrb	r3, [r7, #13]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d102      	bne.n	8004466 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004460:	7b3b      	ldrb	r3, [r7, #12]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d001      	beq.n	800446a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e03e      	b.n	80044e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2202      	movs	r2, #2
 800446e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2202      	movs	r2, #2
 800447e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2202      	movs	r2, #2
 8004486:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_TIM_Encoder_Start+0xc4>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b04      	cmp	r3, #4
 8004494:	d008      	beq.n	80044a8 <HAL_TIM_Encoder_Start+0xd4>
 8004496:	e00f      	b.n	80044b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2201      	movs	r2, #1
 800449e:	2100      	movs	r1, #0
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 f9e5 	bl	8004870 <TIM_CCxChannelCmd>
      break;
 80044a6:	e016      	b.n	80044d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2201      	movs	r2, #1
 80044ae:	2104      	movs	r1, #4
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 f9dd 	bl	8004870 <TIM_CCxChannelCmd>
      break;
 80044b6:	e00e      	b.n	80044d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2201      	movs	r2, #1
 80044be:	2100      	movs	r1, #0
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 f9d5 	bl	8004870 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2201      	movs	r2, #1
 80044cc:	2104      	movs	r1, #4
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 f9ce 	bl	8004870 <TIM_CCxChannelCmd>
      break;
 80044d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0201 	orr.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_TIM_ConfigClockSource+0x1c>
 8004508:	2302      	movs	r3, #2
 800450a:	e0b4      	b.n	8004676 <HAL_TIM_ConfigClockSource+0x186>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800452a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004532:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004544:	d03e      	beq.n	80045c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800454a:	f200 8087 	bhi.w	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800454e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004552:	f000 8086 	beq.w	8004662 <HAL_TIM_ConfigClockSource+0x172>
 8004556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800455a:	d87f      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800455c:	2b70      	cmp	r3, #112	; 0x70
 800455e:	d01a      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0xa6>
 8004560:	2b70      	cmp	r3, #112	; 0x70
 8004562:	d87b      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 8004564:	2b60      	cmp	r3, #96	; 0x60
 8004566:	d050      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x11a>
 8004568:	2b60      	cmp	r3, #96	; 0x60
 800456a:	d877      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800456c:	2b50      	cmp	r3, #80	; 0x50
 800456e:	d03c      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0xfa>
 8004570:	2b50      	cmp	r3, #80	; 0x50
 8004572:	d873      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 8004574:	2b40      	cmp	r3, #64	; 0x40
 8004576:	d058      	beq.n	800462a <HAL_TIM_ConfigClockSource+0x13a>
 8004578:	2b40      	cmp	r3, #64	; 0x40
 800457a:	d86f      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800457c:	2b30      	cmp	r3, #48	; 0x30
 800457e:	d064      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15a>
 8004580:	2b30      	cmp	r3, #48	; 0x30
 8004582:	d86b      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 8004584:	2b20      	cmp	r3, #32
 8004586:	d060      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15a>
 8004588:	2b20      	cmp	r3, #32
 800458a:	d867      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800458c:	2b00      	cmp	r3, #0
 800458e:	d05c      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15a>
 8004590:	2b10      	cmp	r3, #16
 8004592:	d05a      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15a>
 8004594:	e062      	b.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045a6:	f000 f944 	bl	8004832 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	609a      	str	r2, [r3, #8]
      break;
 80045c2:	e04f      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045d4:	f000 f92d 	bl	8004832 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045e6:	609a      	str	r2, [r3, #8]
      break;
 80045e8:	e03c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f6:	461a      	mov	r2, r3
 80045f8:	f000 f8a4 	bl	8004744 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2150      	movs	r1, #80	; 0x50
 8004602:	4618      	mov	r0, r3
 8004604:	f000 f8fb 	bl	80047fe <TIM_ITRx_SetConfig>
      break;
 8004608:	e02c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004616:	461a      	mov	r2, r3
 8004618:	f000 f8c2 	bl	80047a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2160      	movs	r1, #96	; 0x60
 8004622:	4618      	mov	r0, r3
 8004624:	f000 f8eb 	bl	80047fe <TIM_ITRx_SetConfig>
      break;
 8004628:	e01c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004636:	461a      	mov	r2, r3
 8004638:	f000 f884 	bl	8004744 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2140      	movs	r1, #64	; 0x40
 8004642:	4618      	mov	r0, r3
 8004644:	f000 f8db 	bl	80047fe <TIM_ITRx_SetConfig>
      break;
 8004648:	e00c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4619      	mov	r1, r3
 8004654:	4610      	mov	r0, r2
 8004656:	f000 f8d2 	bl	80047fe <TIM_ITRx_SetConfig>
      break;
 800465a:	e003      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
      break;
 8004660:	e000      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004662:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004674:	7bfb      	ldrb	r3, [r7, #15]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a29      	ldr	r2, [pc, #164]	; (8004738 <TIM_Base_SetConfig+0xb8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00b      	beq.n	80046b0 <TIM_Base_SetConfig+0x30>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469e:	d007      	beq.n	80046b0 <TIM_Base_SetConfig+0x30>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a26      	ldr	r2, [pc, #152]	; (800473c <TIM_Base_SetConfig+0xbc>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d003      	beq.n	80046b0 <TIM_Base_SetConfig+0x30>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a25      	ldr	r2, [pc, #148]	; (8004740 <TIM_Base_SetConfig+0xc0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d108      	bne.n	80046c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a1c      	ldr	r2, [pc, #112]	; (8004738 <TIM_Base_SetConfig+0xb8>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00b      	beq.n	80046e2 <TIM_Base_SetConfig+0x62>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d0:	d007      	beq.n	80046e2 <TIM_Base_SetConfig+0x62>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a19      	ldr	r2, [pc, #100]	; (800473c <TIM_Base_SetConfig+0xbc>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d003      	beq.n	80046e2 <TIM_Base_SetConfig+0x62>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a18      	ldr	r2, [pc, #96]	; (8004740 <TIM_Base_SetConfig+0xc0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d108      	bne.n	80046f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a07      	ldr	r2, [pc, #28]	; (8004738 <TIM_Base_SetConfig+0xb8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d103      	bne.n	8004728 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	615a      	str	r2, [r3, #20]
}
 800472e:	bf00      	nop
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	bc80      	pop	{r7}
 8004736:	4770      	bx	lr
 8004738:	40012c00 	.word	0x40012c00
 800473c:	40000400 	.word	0x40000400
 8004740:	40000800 	.word	0x40000800

08004744 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	f023 0201 	bic.w	r2, r3, #1
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800476e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f023 030a 	bic.w	r3, r3, #10
 8004780:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4313      	orrs	r3, r2
 8004788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	621a      	str	r2, [r3, #32]
}
 8004796:	bf00      	nop
 8004798:	371c      	adds	r7, #28
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr

080047a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	f023 0210 	bic.w	r2, r3, #16
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	031b      	lsls	r3, r3, #12
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	621a      	str	r2, [r3, #32]
}
 80047f4:	bf00      	nop
 80047f6:	371c      	adds	r7, #28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr

080047fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047fe:	b480      	push	{r7}
 8004800:	b085      	sub	sp, #20
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	f043 0307 	orr.w	r3, r3, #7
 8004820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	609a      	str	r2, [r3, #8]
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	bc80      	pop	{r7}
 8004830:	4770      	bx	lr

08004832 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004832:	b480      	push	{r7}
 8004834:	b087      	sub	sp, #28
 8004836:	af00      	add	r7, sp, #0
 8004838:	60f8      	str	r0, [r7, #12]
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	607a      	str	r2, [r7, #4]
 800483e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800484c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	021a      	lsls	r2, r3, #8
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	431a      	orrs	r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4313      	orrs	r3, r2
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	609a      	str	r2, [r3, #8]
}
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr

08004870 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f003 031f 	and.w	r3, r3, #31
 8004882:	2201      	movs	r2, #1
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a1a      	ldr	r2, [r3, #32]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	43db      	mvns	r3, r3
 8004892:	401a      	ands	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a1a      	ldr	r2, [r3, #32]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f003 031f 	and.w	r3, r3, #31
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	fa01 f303 	lsl.w	r3, r1, r3
 80048a8:	431a      	orrs	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	621a      	str	r2, [r3, #32]
}
 80048ae:	bf00      	nop
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr

080048b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e046      	b.n	800495e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a16      	ldr	r2, [pc, #88]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00e      	beq.n	8004932 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491c:	d009      	beq.n	8004932 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a12      	ldr	r2, [pc, #72]	; (800496c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d004      	beq.n	8004932 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a10      	ldr	r2, [pc, #64]	; (8004970 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d10c      	bne.n	800494c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	4313      	orrs	r3, r2
 8004942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr
 8004968:	40012c00 	.word	0x40012c00
 800496c:	40000400 	.word	0x40000400
 8004970:	40000800 	.word	0x40000800

08004974 <__cvt>:
 8004974:	2b00      	cmp	r3, #0
 8004976:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800497a:	461f      	mov	r7, r3
 800497c:	bfbb      	ittet	lt
 800497e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004982:	461f      	movlt	r7, r3
 8004984:	2300      	movge	r3, #0
 8004986:	232d      	movlt	r3, #45	; 0x2d
 8004988:	b088      	sub	sp, #32
 800498a:	4614      	mov	r4, r2
 800498c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800498e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004990:	7013      	strb	r3, [r2, #0]
 8004992:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004994:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004998:	f023 0820 	bic.w	r8, r3, #32
 800499c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049a0:	d005      	beq.n	80049ae <__cvt+0x3a>
 80049a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80049a6:	d100      	bne.n	80049aa <__cvt+0x36>
 80049a8:	3501      	adds	r5, #1
 80049aa:	2302      	movs	r3, #2
 80049ac:	e000      	b.n	80049b0 <__cvt+0x3c>
 80049ae:	2303      	movs	r3, #3
 80049b0:	aa07      	add	r2, sp, #28
 80049b2:	9204      	str	r2, [sp, #16]
 80049b4:	aa06      	add	r2, sp, #24
 80049b6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80049ba:	e9cd 3500 	strd	r3, r5, [sp]
 80049be:	4622      	mov	r2, r4
 80049c0:	463b      	mov	r3, r7
 80049c2:	f001 f871 	bl	8005aa8 <_dtoa_r>
 80049c6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80049ca:	4606      	mov	r6, r0
 80049cc:	d102      	bne.n	80049d4 <__cvt+0x60>
 80049ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80049d0:	07db      	lsls	r3, r3, #31
 80049d2:	d522      	bpl.n	8004a1a <__cvt+0xa6>
 80049d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049d8:	eb06 0905 	add.w	r9, r6, r5
 80049dc:	d110      	bne.n	8004a00 <__cvt+0x8c>
 80049de:	7833      	ldrb	r3, [r6, #0]
 80049e0:	2b30      	cmp	r3, #48	; 0x30
 80049e2:	d10a      	bne.n	80049fa <__cvt+0x86>
 80049e4:	2200      	movs	r2, #0
 80049e6:	2300      	movs	r3, #0
 80049e8:	4620      	mov	r0, r4
 80049ea:	4639      	mov	r1, r7
 80049ec:	f7fc f890 	bl	8000b10 <__aeabi_dcmpeq>
 80049f0:	b918      	cbnz	r0, 80049fa <__cvt+0x86>
 80049f2:	f1c5 0501 	rsb	r5, r5, #1
 80049f6:	f8ca 5000 	str.w	r5, [sl]
 80049fa:	f8da 3000 	ldr.w	r3, [sl]
 80049fe:	4499      	add	r9, r3
 8004a00:	2200      	movs	r2, #0
 8004a02:	2300      	movs	r3, #0
 8004a04:	4620      	mov	r0, r4
 8004a06:	4639      	mov	r1, r7
 8004a08:	f7fc f882 	bl	8000b10 <__aeabi_dcmpeq>
 8004a0c:	b108      	cbz	r0, 8004a12 <__cvt+0x9e>
 8004a0e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a12:	2230      	movs	r2, #48	; 0x30
 8004a14:	9b07      	ldr	r3, [sp, #28]
 8004a16:	454b      	cmp	r3, r9
 8004a18:	d307      	bcc.n	8004a2a <__cvt+0xb6>
 8004a1a:	4630      	mov	r0, r6
 8004a1c:	9b07      	ldr	r3, [sp, #28]
 8004a1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004a20:	1b9b      	subs	r3, r3, r6
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	b008      	add	sp, #32
 8004a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a2a:	1c59      	adds	r1, r3, #1
 8004a2c:	9107      	str	r1, [sp, #28]
 8004a2e:	701a      	strb	r2, [r3, #0]
 8004a30:	e7f0      	b.n	8004a14 <__cvt+0xa0>

08004a32 <__exponent>:
 8004a32:	4603      	mov	r3, r0
 8004a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a36:	2900      	cmp	r1, #0
 8004a38:	f803 2b02 	strb.w	r2, [r3], #2
 8004a3c:	bfb6      	itet	lt
 8004a3e:	222d      	movlt	r2, #45	; 0x2d
 8004a40:	222b      	movge	r2, #43	; 0x2b
 8004a42:	4249      	neglt	r1, r1
 8004a44:	2909      	cmp	r1, #9
 8004a46:	7042      	strb	r2, [r0, #1]
 8004a48:	dd2a      	ble.n	8004aa0 <__exponent+0x6e>
 8004a4a:	f10d 0207 	add.w	r2, sp, #7
 8004a4e:	4617      	mov	r7, r2
 8004a50:	260a      	movs	r6, #10
 8004a52:	fb91 f5f6 	sdiv	r5, r1, r6
 8004a56:	4694      	mov	ip, r2
 8004a58:	fb06 1415 	mls	r4, r6, r5, r1
 8004a5c:	3430      	adds	r4, #48	; 0x30
 8004a5e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004a62:	460c      	mov	r4, r1
 8004a64:	2c63      	cmp	r4, #99	; 0x63
 8004a66:	4629      	mov	r1, r5
 8004a68:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8004a6c:	dcf1      	bgt.n	8004a52 <__exponent+0x20>
 8004a6e:	3130      	adds	r1, #48	; 0x30
 8004a70:	f1ac 0402 	sub.w	r4, ip, #2
 8004a74:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004a78:	4622      	mov	r2, r4
 8004a7a:	1c41      	adds	r1, r0, #1
 8004a7c:	42ba      	cmp	r2, r7
 8004a7e:	d30a      	bcc.n	8004a96 <__exponent+0x64>
 8004a80:	f10d 0209 	add.w	r2, sp, #9
 8004a84:	eba2 020c 	sub.w	r2, r2, ip
 8004a88:	42bc      	cmp	r4, r7
 8004a8a:	bf88      	it	hi
 8004a8c:	2200      	movhi	r2, #0
 8004a8e:	4413      	add	r3, r2
 8004a90:	1a18      	subs	r0, r3, r0
 8004a92:	b003      	add	sp, #12
 8004a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a96:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004a9a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004a9e:	e7ed      	b.n	8004a7c <__exponent+0x4a>
 8004aa0:	2330      	movs	r3, #48	; 0x30
 8004aa2:	3130      	adds	r1, #48	; 0x30
 8004aa4:	7083      	strb	r3, [r0, #2]
 8004aa6:	70c1      	strb	r1, [r0, #3]
 8004aa8:	1d03      	adds	r3, r0, #4
 8004aaa:	e7f1      	b.n	8004a90 <__exponent+0x5e>

08004aac <_printf_float>:
 8004aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab0:	b091      	sub	sp, #68	; 0x44
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004ab8:	4616      	mov	r6, r2
 8004aba:	461f      	mov	r7, r3
 8004abc:	4605      	mov	r5, r0
 8004abe:	f000 fee1 	bl	8005884 <_localeconv_r>
 8004ac2:	6803      	ldr	r3, [r0, #0]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ac8:	f7fb fb42 	bl	8000150 <strlen>
 8004acc:	2300      	movs	r3, #0
 8004ace:	930e      	str	r3, [sp, #56]	; 0x38
 8004ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ad4:	900a      	str	r0, [sp, #40]	; 0x28
 8004ad6:	3307      	adds	r3, #7
 8004ad8:	f023 0307 	bic.w	r3, r3, #7
 8004adc:	f103 0208 	add.w	r2, r3, #8
 8004ae0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004ae4:	f8d4 b000 	ldr.w	fp, [r4]
 8004ae8:	f8c8 2000 	str.w	r2, [r8]
 8004aec:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004af0:	4652      	mov	r2, sl
 8004af2:	4643      	mov	r3, r8
 8004af4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004af8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004afc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004afe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b02:	4650      	mov	r0, sl
 8004b04:	4b9c      	ldr	r3, [pc, #624]	; (8004d78 <_printf_float+0x2cc>)
 8004b06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b08:	f7fc f834 	bl	8000b74 <__aeabi_dcmpun>
 8004b0c:	bb70      	cbnz	r0, 8004b6c <_printf_float+0xc0>
 8004b0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b12:	4650      	mov	r0, sl
 8004b14:	4b98      	ldr	r3, [pc, #608]	; (8004d78 <_printf_float+0x2cc>)
 8004b16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b18:	f7fc f80e 	bl	8000b38 <__aeabi_dcmple>
 8004b1c:	bb30      	cbnz	r0, 8004b6c <_printf_float+0xc0>
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2300      	movs	r3, #0
 8004b22:	4650      	mov	r0, sl
 8004b24:	4641      	mov	r1, r8
 8004b26:	f7fb fffd 	bl	8000b24 <__aeabi_dcmplt>
 8004b2a:	b110      	cbz	r0, 8004b32 <_printf_float+0x86>
 8004b2c:	232d      	movs	r3, #45	; 0x2d
 8004b2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b32:	4a92      	ldr	r2, [pc, #584]	; (8004d7c <_printf_float+0x2d0>)
 8004b34:	4b92      	ldr	r3, [pc, #584]	; (8004d80 <_printf_float+0x2d4>)
 8004b36:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004b3a:	bf94      	ite	ls
 8004b3c:	4690      	movls	r8, r2
 8004b3e:	4698      	movhi	r8, r3
 8004b40:	2303      	movs	r3, #3
 8004b42:	f04f 0a00 	mov.w	sl, #0
 8004b46:	6123      	str	r3, [r4, #16]
 8004b48:	f02b 0304 	bic.w	r3, fp, #4
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	4633      	mov	r3, r6
 8004b50:	4621      	mov	r1, r4
 8004b52:	4628      	mov	r0, r5
 8004b54:	9700      	str	r7, [sp, #0]
 8004b56:	aa0f      	add	r2, sp, #60	; 0x3c
 8004b58:	f000 f9d6 	bl	8004f08 <_printf_common>
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	f040 8090 	bne.w	8004c82 <_printf_float+0x1d6>
 8004b62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b66:	b011      	add	sp, #68	; 0x44
 8004b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b6c:	4652      	mov	r2, sl
 8004b6e:	4643      	mov	r3, r8
 8004b70:	4650      	mov	r0, sl
 8004b72:	4641      	mov	r1, r8
 8004b74:	f7fb fffe 	bl	8000b74 <__aeabi_dcmpun>
 8004b78:	b148      	cbz	r0, 8004b8e <_printf_float+0xe2>
 8004b7a:	f1b8 0f00 	cmp.w	r8, #0
 8004b7e:	bfb8      	it	lt
 8004b80:	232d      	movlt	r3, #45	; 0x2d
 8004b82:	4a80      	ldr	r2, [pc, #512]	; (8004d84 <_printf_float+0x2d8>)
 8004b84:	bfb8      	it	lt
 8004b86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b8a:	4b7f      	ldr	r3, [pc, #508]	; (8004d88 <_printf_float+0x2dc>)
 8004b8c:	e7d3      	b.n	8004b36 <_printf_float+0x8a>
 8004b8e:	6863      	ldr	r3, [r4, #4]
 8004b90:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	d142      	bne.n	8004c1e <_printf_float+0x172>
 8004b98:	2306      	movs	r3, #6
 8004b9a:	6063      	str	r3, [r4, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	9206      	str	r2, [sp, #24]
 8004ba0:	aa0e      	add	r2, sp, #56	; 0x38
 8004ba2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004ba6:	aa0d      	add	r2, sp, #52	; 0x34
 8004ba8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004bac:	9203      	str	r2, [sp, #12]
 8004bae:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004bb2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004bb6:	6023      	str	r3, [r4, #0]
 8004bb8:	6863      	ldr	r3, [r4, #4]
 8004bba:	4652      	mov	r2, sl
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	4643      	mov	r3, r8
 8004bc2:	910b      	str	r1, [sp, #44]	; 0x2c
 8004bc4:	f7ff fed6 	bl	8004974 <__cvt>
 8004bc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bca:	4680      	mov	r8, r0
 8004bcc:	2947      	cmp	r1, #71	; 0x47
 8004bce:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004bd0:	d108      	bne.n	8004be4 <_printf_float+0x138>
 8004bd2:	1cc8      	adds	r0, r1, #3
 8004bd4:	db02      	blt.n	8004bdc <_printf_float+0x130>
 8004bd6:	6863      	ldr	r3, [r4, #4]
 8004bd8:	4299      	cmp	r1, r3
 8004bda:	dd40      	ble.n	8004c5e <_printf_float+0x1b2>
 8004bdc:	f1a9 0902 	sub.w	r9, r9, #2
 8004be0:	fa5f f989 	uxtb.w	r9, r9
 8004be4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004be8:	d81f      	bhi.n	8004c2a <_printf_float+0x17e>
 8004bea:	464a      	mov	r2, r9
 8004bec:	3901      	subs	r1, #1
 8004bee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004bf2:	910d      	str	r1, [sp, #52]	; 0x34
 8004bf4:	f7ff ff1d 	bl	8004a32 <__exponent>
 8004bf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bfa:	4682      	mov	sl, r0
 8004bfc:	1813      	adds	r3, r2, r0
 8004bfe:	2a01      	cmp	r2, #1
 8004c00:	6123      	str	r3, [r4, #16]
 8004c02:	dc02      	bgt.n	8004c0a <_printf_float+0x15e>
 8004c04:	6822      	ldr	r2, [r4, #0]
 8004c06:	07d2      	lsls	r2, r2, #31
 8004c08:	d501      	bpl.n	8004c0e <_printf_float+0x162>
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	6123      	str	r3, [r4, #16]
 8004c0e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d09b      	beq.n	8004b4e <_printf_float+0xa2>
 8004c16:	232d      	movs	r3, #45	; 0x2d
 8004c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c1c:	e797      	b.n	8004b4e <_printf_float+0xa2>
 8004c1e:	2947      	cmp	r1, #71	; 0x47
 8004c20:	d1bc      	bne.n	8004b9c <_printf_float+0xf0>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1ba      	bne.n	8004b9c <_printf_float+0xf0>
 8004c26:	2301      	movs	r3, #1
 8004c28:	e7b7      	b.n	8004b9a <_printf_float+0xee>
 8004c2a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004c2e:	d118      	bne.n	8004c62 <_printf_float+0x1b6>
 8004c30:	2900      	cmp	r1, #0
 8004c32:	6863      	ldr	r3, [r4, #4]
 8004c34:	dd0b      	ble.n	8004c4e <_printf_float+0x1a2>
 8004c36:	6121      	str	r1, [r4, #16]
 8004c38:	b913      	cbnz	r3, 8004c40 <_printf_float+0x194>
 8004c3a:	6822      	ldr	r2, [r4, #0]
 8004c3c:	07d0      	lsls	r0, r2, #31
 8004c3e:	d502      	bpl.n	8004c46 <_printf_float+0x19a>
 8004c40:	3301      	adds	r3, #1
 8004c42:	440b      	add	r3, r1
 8004c44:	6123      	str	r3, [r4, #16]
 8004c46:	f04f 0a00 	mov.w	sl, #0
 8004c4a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c4c:	e7df      	b.n	8004c0e <_printf_float+0x162>
 8004c4e:	b913      	cbnz	r3, 8004c56 <_printf_float+0x1aa>
 8004c50:	6822      	ldr	r2, [r4, #0]
 8004c52:	07d2      	lsls	r2, r2, #31
 8004c54:	d501      	bpl.n	8004c5a <_printf_float+0x1ae>
 8004c56:	3302      	adds	r3, #2
 8004c58:	e7f4      	b.n	8004c44 <_printf_float+0x198>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e7f2      	b.n	8004c44 <_printf_float+0x198>
 8004c5e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004c62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c64:	4299      	cmp	r1, r3
 8004c66:	db05      	blt.n	8004c74 <_printf_float+0x1c8>
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	6121      	str	r1, [r4, #16]
 8004c6c:	07d8      	lsls	r0, r3, #31
 8004c6e:	d5ea      	bpl.n	8004c46 <_printf_float+0x19a>
 8004c70:	1c4b      	adds	r3, r1, #1
 8004c72:	e7e7      	b.n	8004c44 <_printf_float+0x198>
 8004c74:	2900      	cmp	r1, #0
 8004c76:	bfcc      	ite	gt
 8004c78:	2201      	movgt	r2, #1
 8004c7a:	f1c1 0202 	rsble	r2, r1, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	e7e0      	b.n	8004c44 <_printf_float+0x198>
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	055a      	lsls	r2, r3, #21
 8004c86:	d407      	bmi.n	8004c98 <_printf_float+0x1ec>
 8004c88:	6923      	ldr	r3, [r4, #16]
 8004c8a:	4642      	mov	r2, r8
 8004c8c:	4631      	mov	r1, r6
 8004c8e:	4628      	mov	r0, r5
 8004c90:	47b8      	blx	r7
 8004c92:	3001      	adds	r0, #1
 8004c94:	d12b      	bne.n	8004cee <_printf_float+0x242>
 8004c96:	e764      	b.n	8004b62 <_printf_float+0xb6>
 8004c98:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004c9c:	f240 80dd 	bls.w	8004e5a <_printf_float+0x3ae>
 8004ca0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f7fb ff32 	bl	8000b10 <__aeabi_dcmpeq>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d033      	beq.n	8004d18 <_printf_float+0x26c>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	4631      	mov	r1, r6
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	4a35      	ldr	r2, [pc, #212]	; (8004d8c <_printf_float+0x2e0>)
 8004cb8:	47b8      	blx	r7
 8004cba:	3001      	adds	r0, #1
 8004cbc:	f43f af51 	beq.w	8004b62 <_printf_float+0xb6>
 8004cc0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	db02      	blt.n	8004cce <_printf_float+0x222>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	07d8      	lsls	r0, r3, #31
 8004ccc:	d50f      	bpl.n	8004cee <_printf_float+0x242>
 8004cce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	47b8      	blx	r7
 8004cd8:	3001      	adds	r0, #1
 8004cda:	f43f af42 	beq.w	8004b62 <_printf_float+0xb6>
 8004cde:	f04f 0800 	mov.w	r8, #0
 8004ce2:	f104 091a 	add.w	r9, r4, #26
 8004ce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	4543      	cmp	r3, r8
 8004cec:	dc09      	bgt.n	8004d02 <_printf_float+0x256>
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	079b      	lsls	r3, r3, #30
 8004cf2:	f100 8104 	bmi.w	8004efe <_printf_float+0x452>
 8004cf6:	68e0      	ldr	r0, [r4, #12]
 8004cf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cfa:	4298      	cmp	r0, r3
 8004cfc:	bfb8      	it	lt
 8004cfe:	4618      	movlt	r0, r3
 8004d00:	e731      	b.n	8004b66 <_printf_float+0xba>
 8004d02:	2301      	movs	r3, #1
 8004d04:	464a      	mov	r2, r9
 8004d06:	4631      	mov	r1, r6
 8004d08:	4628      	mov	r0, r5
 8004d0a:	47b8      	blx	r7
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	f43f af28 	beq.w	8004b62 <_printf_float+0xb6>
 8004d12:	f108 0801 	add.w	r8, r8, #1
 8004d16:	e7e6      	b.n	8004ce6 <_printf_float+0x23a>
 8004d18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	dc38      	bgt.n	8004d90 <_printf_float+0x2e4>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	4631      	mov	r1, r6
 8004d22:	4628      	mov	r0, r5
 8004d24:	4a19      	ldr	r2, [pc, #100]	; (8004d8c <_printf_float+0x2e0>)
 8004d26:	47b8      	blx	r7
 8004d28:	3001      	adds	r0, #1
 8004d2a:	f43f af1a 	beq.w	8004b62 <_printf_float+0xb6>
 8004d2e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004d32:	4313      	orrs	r3, r2
 8004d34:	d102      	bne.n	8004d3c <_printf_float+0x290>
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	07d9      	lsls	r1, r3, #31
 8004d3a:	d5d8      	bpl.n	8004cee <_printf_float+0x242>
 8004d3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d40:	4631      	mov	r1, r6
 8004d42:	4628      	mov	r0, r5
 8004d44:	47b8      	blx	r7
 8004d46:	3001      	adds	r0, #1
 8004d48:	f43f af0b 	beq.w	8004b62 <_printf_float+0xb6>
 8004d4c:	f04f 0900 	mov.w	r9, #0
 8004d50:	f104 0a1a 	add.w	sl, r4, #26
 8004d54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d56:	425b      	negs	r3, r3
 8004d58:	454b      	cmp	r3, r9
 8004d5a:	dc01      	bgt.n	8004d60 <_printf_float+0x2b4>
 8004d5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d5e:	e794      	b.n	8004c8a <_printf_float+0x1de>
 8004d60:	2301      	movs	r3, #1
 8004d62:	4652      	mov	r2, sl
 8004d64:	4631      	mov	r1, r6
 8004d66:	4628      	mov	r0, r5
 8004d68:	47b8      	blx	r7
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	f43f aef9 	beq.w	8004b62 <_printf_float+0xb6>
 8004d70:	f109 0901 	add.w	r9, r9, #1
 8004d74:	e7ee      	b.n	8004d54 <_printf_float+0x2a8>
 8004d76:	bf00      	nop
 8004d78:	7fefffff 	.word	0x7fefffff
 8004d7c:	0800a5ea 	.word	0x0800a5ea
 8004d80:	0800a5ee 	.word	0x0800a5ee
 8004d84:	0800a5f2 	.word	0x0800a5f2
 8004d88:	0800a5f6 	.word	0x0800a5f6
 8004d8c:	0800a5fa 	.word	0x0800a5fa
 8004d90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d94:	429a      	cmp	r2, r3
 8004d96:	bfa8      	it	ge
 8004d98:	461a      	movge	r2, r3
 8004d9a:	2a00      	cmp	r2, #0
 8004d9c:	4691      	mov	r9, r2
 8004d9e:	dc37      	bgt.n	8004e10 <_printf_float+0x364>
 8004da0:	f04f 0b00 	mov.w	fp, #0
 8004da4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004da8:	f104 021a 	add.w	r2, r4, #26
 8004dac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004db0:	ebaa 0309 	sub.w	r3, sl, r9
 8004db4:	455b      	cmp	r3, fp
 8004db6:	dc33      	bgt.n	8004e20 <_printf_float+0x374>
 8004db8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	db3b      	blt.n	8004e38 <_printf_float+0x38c>
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	07da      	lsls	r2, r3, #31
 8004dc4:	d438      	bmi.n	8004e38 <_printf_float+0x38c>
 8004dc6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004dca:	eba2 0903 	sub.w	r9, r2, r3
 8004dce:	eba2 020a 	sub.w	r2, r2, sl
 8004dd2:	4591      	cmp	r9, r2
 8004dd4:	bfa8      	it	ge
 8004dd6:	4691      	movge	r9, r2
 8004dd8:	f1b9 0f00 	cmp.w	r9, #0
 8004ddc:	dc34      	bgt.n	8004e48 <_printf_float+0x39c>
 8004dde:	f04f 0800 	mov.w	r8, #0
 8004de2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004de6:	f104 0a1a 	add.w	sl, r4, #26
 8004dea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004dee:	1a9b      	subs	r3, r3, r2
 8004df0:	eba3 0309 	sub.w	r3, r3, r9
 8004df4:	4543      	cmp	r3, r8
 8004df6:	f77f af7a 	ble.w	8004cee <_printf_float+0x242>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	4652      	mov	r2, sl
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b8      	blx	r7
 8004e04:	3001      	adds	r0, #1
 8004e06:	f43f aeac 	beq.w	8004b62 <_printf_float+0xb6>
 8004e0a:	f108 0801 	add.w	r8, r8, #1
 8004e0e:	e7ec      	b.n	8004dea <_printf_float+0x33e>
 8004e10:	4613      	mov	r3, r2
 8004e12:	4631      	mov	r1, r6
 8004e14:	4642      	mov	r2, r8
 8004e16:	4628      	mov	r0, r5
 8004e18:	47b8      	blx	r7
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	d1c0      	bne.n	8004da0 <_printf_float+0x2f4>
 8004e1e:	e6a0      	b.n	8004b62 <_printf_float+0xb6>
 8004e20:	2301      	movs	r3, #1
 8004e22:	4631      	mov	r1, r6
 8004e24:	4628      	mov	r0, r5
 8004e26:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e28:	47b8      	blx	r7
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	f43f ae99 	beq.w	8004b62 <_printf_float+0xb6>
 8004e30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e32:	f10b 0b01 	add.w	fp, fp, #1
 8004e36:	e7b9      	b.n	8004dac <_printf_float+0x300>
 8004e38:	4631      	mov	r1, r6
 8004e3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e3e:	4628      	mov	r0, r5
 8004e40:	47b8      	blx	r7
 8004e42:	3001      	adds	r0, #1
 8004e44:	d1bf      	bne.n	8004dc6 <_printf_float+0x31a>
 8004e46:	e68c      	b.n	8004b62 <_printf_float+0xb6>
 8004e48:	464b      	mov	r3, r9
 8004e4a:	4631      	mov	r1, r6
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	eb08 020a 	add.w	r2, r8, sl
 8004e52:	47b8      	blx	r7
 8004e54:	3001      	adds	r0, #1
 8004e56:	d1c2      	bne.n	8004dde <_printf_float+0x332>
 8004e58:	e683      	b.n	8004b62 <_printf_float+0xb6>
 8004e5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e5c:	2a01      	cmp	r2, #1
 8004e5e:	dc01      	bgt.n	8004e64 <_printf_float+0x3b8>
 8004e60:	07db      	lsls	r3, r3, #31
 8004e62:	d539      	bpl.n	8004ed8 <_printf_float+0x42c>
 8004e64:	2301      	movs	r3, #1
 8004e66:	4642      	mov	r2, r8
 8004e68:	4631      	mov	r1, r6
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	47b8      	blx	r7
 8004e6e:	3001      	adds	r0, #1
 8004e70:	f43f ae77 	beq.w	8004b62 <_printf_float+0xb6>
 8004e74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e78:	4631      	mov	r1, r6
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	47b8      	blx	r7
 8004e7e:	3001      	adds	r0, #1
 8004e80:	f43f ae6f 	beq.w	8004b62 <_printf_float+0xb6>
 8004e84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e88:	2200      	movs	r2, #0
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004e90:	f7fb fe3e 	bl	8000b10 <__aeabi_dcmpeq>
 8004e94:	b9d8      	cbnz	r0, 8004ece <_printf_float+0x422>
 8004e96:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8004e9a:	f108 0201 	add.w	r2, r8, #1
 8004e9e:	4631      	mov	r1, r6
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	47b8      	blx	r7
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	d10e      	bne.n	8004ec6 <_printf_float+0x41a>
 8004ea8:	e65b      	b.n	8004b62 <_printf_float+0xb6>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	464a      	mov	r2, r9
 8004eae:	4631      	mov	r1, r6
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	47b8      	blx	r7
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	f43f ae54 	beq.w	8004b62 <_printf_float+0xb6>
 8004eba:	f108 0801 	add.w	r8, r8, #1
 8004ebe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	4543      	cmp	r3, r8
 8004ec4:	dcf1      	bgt.n	8004eaa <_printf_float+0x3fe>
 8004ec6:	4653      	mov	r3, sl
 8004ec8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ecc:	e6de      	b.n	8004c8c <_printf_float+0x1e0>
 8004ece:	f04f 0800 	mov.w	r8, #0
 8004ed2:	f104 091a 	add.w	r9, r4, #26
 8004ed6:	e7f2      	b.n	8004ebe <_printf_float+0x412>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	4642      	mov	r2, r8
 8004edc:	e7df      	b.n	8004e9e <_printf_float+0x3f2>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	464a      	mov	r2, r9
 8004ee2:	4631      	mov	r1, r6
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	47b8      	blx	r7
 8004ee8:	3001      	adds	r0, #1
 8004eea:	f43f ae3a 	beq.w	8004b62 <_printf_float+0xb6>
 8004eee:	f108 0801 	add.w	r8, r8, #1
 8004ef2:	68e3      	ldr	r3, [r4, #12]
 8004ef4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004ef6:	1a5b      	subs	r3, r3, r1
 8004ef8:	4543      	cmp	r3, r8
 8004efa:	dcf0      	bgt.n	8004ede <_printf_float+0x432>
 8004efc:	e6fb      	b.n	8004cf6 <_printf_float+0x24a>
 8004efe:	f04f 0800 	mov.w	r8, #0
 8004f02:	f104 0919 	add.w	r9, r4, #25
 8004f06:	e7f4      	b.n	8004ef2 <_printf_float+0x446>

08004f08 <_printf_common>:
 8004f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f0c:	4616      	mov	r6, r2
 8004f0e:	4699      	mov	r9, r3
 8004f10:	688a      	ldr	r2, [r1, #8]
 8004f12:	690b      	ldr	r3, [r1, #16]
 8004f14:	4607      	mov	r7, r0
 8004f16:	4293      	cmp	r3, r2
 8004f18:	bfb8      	it	lt
 8004f1a:	4613      	movlt	r3, r2
 8004f1c:	6033      	str	r3, [r6, #0]
 8004f1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f22:	460c      	mov	r4, r1
 8004f24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f28:	b10a      	cbz	r2, 8004f2e <_printf_common+0x26>
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	6033      	str	r3, [r6, #0]
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	0699      	lsls	r1, r3, #26
 8004f32:	bf42      	ittt	mi
 8004f34:	6833      	ldrmi	r3, [r6, #0]
 8004f36:	3302      	addmi	r3, #2
 8004f38:	6033      	strmi	r3, [r6, #0]
 8004f3a:	6825      	ldr	r5, [r4, #0]
 8004f3c:	f015 0506 	ands.w	r5, r5, #6
 8004f40:	d106      	bne.n	8004f50 <_printf_common+0x48>
 8004f42:	f104 0a19 	add.w	sl, r4, #25
 8004f46:	68e3      	ldr	r3, [r4, #12]
 8004f48:	6832      	ldr	r2, [r6, #0]
 8004f4a:	1a9b      	subs	r3, r3, r2
 8004f4c:	42ab      	cmp	r3, r5
 8004f4e:	dc2b      	bgt.n	8004fa8 <_printf_common+0xa0>
 8004f50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f54:	1e13      	subs	r3, r2, #0
 8004f56:	6822      	ldr	r2, [r4, #0]
 8004f58:	bf18      	it	ne
 8004f5a:	2301      	movne	r3, #1
 8004f5c:	0692      	lsls	r2, r2, #26
 8004f5e:	d430      	bmi.n	8004fc2 <_printf_common+0xba>
 8004f60:	4649      	mov	r1, r9
 8004f62:	4638      	mov	r0, r7
 8004f64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f68:	47c0      	blx	r8
 8004f6a:	3001      	adds	r0, #1
 8004f6c:	d023      	beq.n	8004fb6 <_printf_common+0xae>
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	6922      	ldr	r2, [r4, #16]
 8004f72:	f003 0306 	and.w	r3, r3, #6
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	bf14      	ite	ne
 8004f7a:	2500      	movne	r5, #0
 8004f7c:	6833      	ldreq	r3, [r6, #0]
 8004f7e:	f04f 0600 	mov.w	r6, #0
 8004f82:	bf08      	it	eq
 8004f84:	68e5      	ldreq	r5, [r4, #12]
 8004f86:	f104 041a 	add.w	r4, r4, #26
 8004f8a:	bf08      	it	eq
 8004f8c:	1aed      	subeq	r5, r5, r3
 8004f8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f92:	bf08      	it	eq
 8004f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	bfc4      	itt	gt
 8004f9c:	1a9b      	subgt	r3, r3, r2
 8004f9e:	18ed      	addgt	r5, r5, r3
 8004fa0:	42b5      	cmp	r5, r6
 8004fa2:	d11a      	bne.n	8004fda <_printf_common+0xd2>
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	e008      	b.n	8004fba <_printf_common+0xb2>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	4652      	mov	r2, sl
 8004fac:	4649      	mov	r1, r9
 8004fae:	4638      	mov	r0, r7
 8004fb0:	47c0      	blx	r8
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	d103      	bne.n	8004fbe <_printf_common+0xb6>
 8004fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fbe:	3501      	adds	r5, #1
 8004fc0:	e7c1      	b.n	8004f46 <_printf_common+0x3e>
 8004fc2:	2030      	movs	r0, #48	; 0x30
 8004fc4:	18e1      	adds	r1, r4, r3
 8004fc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fd0:	4422      	add	r2, r4
 8004fd2:	3302      	adds	r3, #2
 8004fd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fd8:	e7c2      	b.n	8004f60 <_printf_common+0x58>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	4622      	mov	r2, r4
 8004fde:	4649      	mov	r1, r9
 8004fe0:	4638      	mov	r0, r7
 8004fe2:	47c0      	blx	r8
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d0e6      	beq.n	8004fb6 <_printf_common+0xae>
 8004fe8:	3601      	adds	r6, #1
 8004fea:	e7d9      	b.n	8004fa0 <_printf_common+0x98>

08004fec <_printf_i>:
 8004fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff0:	7e0f      	ldrb	r7, [r1, #24]
 8004ff2:	4691      	mov	r9, r2
 8004ff4:	2f78      	cmp	r7, #120	; 0x78
 8004ff6:	4680      	mov	r8, r0
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	469a      	mov	sl, r3
 8004ffc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ffe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005002:	d807      	bhi.n	8005014 <_printf_i+0x28>
 8005004:	2f62      	cmp	r7, #98	; 0x62
 8005006:	d80a      	bhi.n	800501e <_printf_i+0x32>
 8005008:	2f00      	cmp	r7, #0
 800500a:	f000 80d5 	beq.w	80051b8 <_printf_i+0x1cc>
 800500e:	2f58      	cmp	r7, #88	; 0x58
 8005010:	f000 80c1 	beq.w	8005196 <_printf_i+0x1aa>
 8005014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005018:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800501c:	e03a      	b.n	8005094 <_printf_i+0xa8>
 800501e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005022:	2b15      	cmp	r3, #21
 8005024:	d8f6      	bhi.n	8005014 <_printf_i+0x28>
 8005026:	a101      	add	r1, pc, #4	; (adr r1, 800502c <_printf_i+0x40>)
 8005028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800502c:	08005085 	.word	0x08005085
 8005030:	08005099 	.word	0x08005099
 8005034:	08005015 	.word	0x08005015
 8005038:	08005015 	.word	0x08005015
 800503c:	08005015 	.word	0x08005015
 8005040:	08005015 	.word	0x08005015
 8005044:	08005099 	.word	0x08005099
 8005048:	08005015 	.word	0x08005015
 800504c:	08005015 	.word	0x08005015
 8005050:	08005015 	.word	0x08005015
 8005054:	08005015 	.word	0x08005015
 8005058:	0800519f 	.word	0x0800519f
 800505c:	080050c5 	.word	0x080050c5
 8005060:	08005159 	.word	0x08005159
 8005064:	08005015 	.word	0x08005015
 8005068:	08005015 	.word	0x08005015
 800506c:	080051c1 	.word	0x080051c1
 8005070:	08005015 	.word	0x08005015
 8005074:	080050c5 	.word	0x080050c5
 8005078:	08005015 	.word	0x08005015
 800507c:	08005015 	.word	0x08005015
 8005080:	08005161 	.word	0x08005161
 8005084:	682b      	ldr	r3, [r5, #0]
 8005086:	1d1a      	adds	r2, r3, #4
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	602a      	str	r2, [r5, #0]
 800508c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005090:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005094:	2301      	movs	r3, #1
 8005096:	e0a0      	b.n	80051da <_printf_i+0x1ee>
 8005098:	6820      	ldr	r0, [r4, #0]
 800509a:	682b      	ldr	r3, [r5, #0]
 800509c:	0607      	lsls	r7, r0, #24
 800509e:	f103 0104 	add.w	r1, r3, #4
 80050a2:	6029      	str	r1, [r5, #0]
 80050a4:	d501      	bpl.n	80050aa <_printf_i+0xbe>
 80050a6:	681e      	ldr	r6, [r3, #0]
 80050a8:	e003      	b.n	80050b2 <_printf_i+0xc6>
 80050aa:	0646      	lsls	r6, r0, #25
 80050ac:	d5fb      	bpl.n	80050a6 <_printf_i+0xba>
 80050ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80050b2:	2e00      	cmp	r6, #0
 80050b4:	da03      	bge.n	80050be <_printf_i+0xd2>
 80050b6:	232d      	movs	r3, #45	; 0x2d
 80050b8:	4276      	negs	r6, r6
 80050ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050be:	230a      	movs	r3, #10
 80050c0:	4859      	ldr	r0, [pc, #356]	; (8005228 <_printf_i+0x23c>)
 80050c2:	e012      	b.n	80050ea <_printf_i+0xfe>
 80050c4:	682b      	ldr	r3, [r5, #0]
 80050c6:	6820      	ldr	r0, [r4, #0]
 80050c8:	1d19      	adds	r1, r3, #4
 80050ca:	6029      	str	r1, [r5, #0]
 80050cc:	0605      	lsls	r5, r0, #24
 80050ce:	d501      	bpl.n	80050d4 <_printf_i+0xe8>
 80050d0:	681e      	ldr	r6, [r3, #0]
 80050d2:	e002      	b.n	80050da <_printf_i+0xee>
 80050d4:	0641      	lsls	r1, r0, #25
 80050d6:	d5fb      	bpl.n	80050d0 <_printf_i+0xe4>
 80050d8:	881e      	ldrh	r6, [r3, #0]
 80050da:	2f6f      	cmp	r7, #111	; 0x6f
 80050dc:	bf0c      	ite	eq
 80050de:	2308      	moveq	r3, #8
 80050e0:	230a      	movne	r3, #10
 80050e2:	4851      	ldr	r0, [pc, #324]	; (8005228 <_printf_i+0x23c>)
 80050e4:	2100      	movs	r1, #0
 80050e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050ea:	6865      	ldr	r5, [r4, #4]
 80050ec:	2d00      	cmp	r5, #0
 80050ee:	bfa8      	it	ge
 80050f0:	6821      	ldrge	r1, [r4, #0]
 80050f2:	60a5      	str	r5, [r4, #8]
 80050f4:	bfa4      	itt	ge
 80050f6:	f021 0104 	bicge.w	r1, r1, #4
 80050fa:	6021      	strge	r1, [r4, #0]
 80050fc:	b90e      	cbnz	r6, 8005102 <_printf_i+0x116>
 80050fe:	2d00      	cmp	r5, #0
 8005100:	d04b      	beq.n	800519a <_printf_i+0x1ae>
 8005102:	4615      	mov	r5, r2
 8005104:	fbb6 f1f3 	udiv	r1, r6, r3
 8005108:	fb03 6711 	mls	r7, r3, r1, r6
 800510c:	5dc7      	ldrb	r7, [r0, r7]
 800510e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005112:	4637      	mov	r7, r6
 8005114:	42bb      	cmp	r3, r7
 8005116:	460e      	mov	r6, r1
 8005118:	d9f4      	bls.n	8005104 <_printf_i+0x118>
 800511a:	2b08      	cmp	r3, #8
 800511c:	d10b      	bne.n	8005136 <_printf_i+0x14a>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	07de      	lsls	r6, r3, #31
 8005122:	d508      	bpl.n	8005136 <_printf_i+0x14a>
 8005124:	6923      	ldr	r3, [r4, #16]
 8005126:	6861      	ldr	r1, [r4, #4]
 8005128:	4299      	cmp	r1, r3
 800512a:	bfde      	ittt	le
 800512c:	2330      	movle	r3, #48	; 0x30
 800512e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005132:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005136:	1b52      	subs	r2, r2, r5
 8005138:	6122      	str	r2, [r4, #16]
 800513a:	464b      	mov	r3, r9
 800513c:	4621      	mov	r1, r4
 800513e:	4640      	mov	r0, r8
 8005140:	f8cd a000 	str.w	sl, [sp]
 8005144:	aa03      	add	r2, sp, #12
 8005146:	f7ff fedf 	bl	8004f08 <_printf_common>
 800514a:	3001      	adds	r0, #1
 800514c:	d14a      	bne.n	80051e4 <_printf_i+0x1f8>
 800514e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005152:	b004      	add	sp, #16
 8005154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005158:	6823      	ldr	r3, [r4, #0]
 800515a:	f043 0320 	orr.w	r3, r3, #32
 800515e:	6023      	str	r3, [r4, #0]
 8005160:	2778      	movs	r7, #120	; 0x78
 8005162:	4832      	ldr	r0, [pc, #200]	; (800522c <_printf_i+0x240>)
 8005164:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	6829      	ldr	r1, [r5, #0]
 800516c:	061f      	lsls	r7, r3, #24
 800516e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005172:	d402      	bmi.n	800517a <_printf_i+0x18e>
 8005174:	065f      	lsls	r7, r3, #25
 8005176:	bf48      	it	mi
 8005178:	b2b6      	uxthmi	r6, r6
 800517a:	07df      	lsls	r7, r3, #31
 800517c:	bf48      	it	mi
 800517e:	f043 0320 	orrmi.w	r3, r3, #32
 8005182:	6029      	str	r1, [r5, #0]
 8005184:	bf48      	it	mi
 8005186:	6023      	strmi	r3, [r4, #0]
 8005188:	b91e      	cbnz	r6, 8005192 <_printf_i+0x1a6>
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	f023 0320 	bic.w	r3, r3, #32
 8005190:	6023      	str	r3, [r4, #0]
 8005192:	2310      	movs	r3, #16
 8005194:	e7a6      	b.n	80050e4 <_printf_i+0xf8>
 8005196:	4824      	ldr	r0, [pc, #144]	; (8005228 <_printf_i+0x23c>)
 8005198:	e7e4      	b.n	8005164 <_printf_i+0x178>
 800519a:	4615      	mov	r5, r2
 800519c:	e7bd      	b.n	800511a <_printf_i+0x12e>
 800519e:	682b      	ldr	r3, [r5, #0]
 80051a0:	6826      	ldr	r6, [r4, #0]
 80051a2:	1d18      	adds	r0, r3, #4
 80051a4:	6961      	ldr	r1, [r4, #20]
 80051a6:	6028      	str	r0, [r5, #0]
 80051a8:	0635      	lsls	r5, r6, #24
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	d501      	bpl.n	80051b2 <_printf_i+0x1c6>
 80051ae:	6019      	str	r1, [r3, #0]
 80051b0:	e002      	b.n	80051b8 <_printf_i+0x1cc>
 80051b2:	0670      	lsls	r0, r6, #25
 80051b4:	d5fb      	bpl.n	80051ae <_printf_i+0x1c2>
 80051b6:	8019      	strh	r1, [r3, #0]
 80051b8:	2300      	movs	r3, #0
 80051ba:	4615      	mov	r5, r2
 80051bc:	6123      	str	r3, [r4, #16]
 80051be:	e7bc      	b.n	800513a <_printf_i+0x14e>
 80051c0:	682b      	ldr	r3, [r5, #0]
 80051c2:	2100      	movs	r1, #0
 80051c4:	1d1a      	adds	r2, r3, #4
 80051c6:	602a      	str	r2, [r5, #0]
 80051c8:	681d      	ldr	r5, [r3, #0]
 80051ca:	6862      	ldr	r2, [r4, #4]
 80051cc:	4628      	mov	r0, r5
 80051ce:	f000 fbcf 	bl	8005970 <memchr>
 80051d2:	b108      	cbz	r0, 80051d8 <_printf_i+0x1ec>
 80051d4:	1b40      	subs	r0, r0, r5
 80051d6:	6060      	str	r0, [r4, #4]
 80051d8:	6863      	ldr	r3, [r4, #4]
 80051da:	6123      	str	r3, [r4, #16]
 80051dc:	2300      	movs	r3, #0
 80051de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051e2:	e7aa      	b.n	800513a <_printf_i+0x14e>
 80051e4:	462a      	mov	r2, r5
 80051e6:	4649      	mov	r1, r9
 80051e8:	4640      	mov	r0, r8
 80051ea:	6923      	ldr	r3, [r4, #16]
 80051ec:	47d0      	blx	sl
 80051ee:	3001      	adds	r0, #1
 80051f0:	d0ad      	beq.n	800514e <_printf_i+0x162>
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	079b      	lsls	r3, r3, #30
 80051f6:	d413      	bmi.n	8005220 <_printf_i+0x234>
 80051f8:	68e0      	ldr	r0, [r4, #12]
 80051fa:	9b03      	ldr	r3, [sp, #12]
 80051fc:	4298      	cmp	r0, r3
 80051fe:	bfb8      	it	lt
 8005200:	4618      	movlt	r0, r3
 8005202:	e7a6      	b.n	8005152 <_printf_i+0x166>
 8005204:	2301      	movs	r3, #1
 8005206:	4632      	mov	r2, r6
 8005208:	4649      	mov	r1, r9
 800520a:	4640      	mov	r0, r8
 800520c:	47d0      	blx	sl
 800520e:	3001      	adds	r0, #1
 8005210:	d09d      	beq.n	800514e <_printf_i+0x162>
 8005212:	3501      	adds	r5, #1
 8005214:	68e3      	ldr	r3, [r4, #12]
 8005216:	9903      	ldr	r1, [sp, #12]
 8005218:	1a5b      	subs	r3, r3, r1
 800521a:	42ab      	cmp	r3, r5
 800521c:	dcf2      	bgt.n	8005204 <_printf_i+0x218>
 800521e:	e7eb      	b.n	80051f8 <_printf_i+0x20c>
 8005220:	2500      	movs	r5, #0
 8005222:	f104 0619 	add.w	r6, r4, #25
 8005226:	e7f5      	b.n	8005214 <_printf_i+0x228>
 8005228:	0800a5fc 	.word	0x0800a5fc
 800522c:	0800a60d 	.word	0x0800a60d

08005230 <_scanf_float>:
 8005230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005234:	b087      	sub	sp, #28
 8005236:	9303      	str	r3, [sp, #12]
 8005238:	688b      	ldr	r3, [r1, #8]
 800523a:	4617      	mov	r7, r2
 800523c:	1e5a      	subs	r2, r3, #1
 800523e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005242:	bf85      	ittet	hi
 8005244:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005248:	195b      	addhi	r3, r3, r5
 800524a:	2300      	movls	r3, #0
 800524c:	9302      	strhi	r3, [sp, #8]
 800524e:	bf88      	it	hi
 8005250:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005254:	468b      	mov	fp, r1
 8005256:	f04f 0500 	mov.w	r5, #0
 800525a:	bf8c      	ite	hi
 800525c:	608b      	strhi	r3, [r1, #8]
 800525e:	9302      	strls	r3, [sp, #8]
 8005260:	680b      	ldr	r3, [r1, #0]
 8005262:	4680      	mov	r8, r0
 8005264:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005268:	f84b 3b1c 	str.w	r3, [fp], #28
 800526c:	460c      	mov	r4, r1
 800526e:	465e      	mov	r6, fp
 8005270:	46aa      	mov	sl, r5
 8005272:	46a9      	mov	r9, r5
 8005274:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005278:	9501      	str	r5, [sp, #4]
 800527a:	68a2      	ldr	r2, [r4, #8]
 800527c:	b152      	cbz	r2, 8005294 <_scanf_float+0x64>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	2b4e      	cmp	r3, #78	; 0x4e
 8005284:	d864      	bhi.n	8005350 <_scanf_float+0x120>
 8005286:	2b40      	cmp	r3, #64	; 0x40
 8005288:	d83c      	bhi.n	8005304 <_scanf_float+0xd4>
 800528a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800528e:	b2c8      	uxtb	r0, r1
 8005290:	280e      	cmp	r0, #14
 8005292:	d93a      	bls.n	800530a <_scanf_float+0xda>
 8005294:	f1b9 0f00 	cmp.w	r9, #0
 8005298:	d003      	beq.n	80052a2 <_scanf_float+0x72>
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052a0:	6023      	str	r3, [r4, #0]
 80052a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80052a6:	f1ba 0f01 	cmp.w	sl, #1
 80052aa:	f200 8113 	bhi.w	80054d4 <_scanf_float+0x2a4>
 80052ae:	455e      	cmp	r6, fp
 80052b0:	f200 8105 	bhi.w	80054be <_scanf_float+0x28e>
 80052b4:	2501      	movs	r5, #1
 80052b6:	4628      	mov	r0, r5
 80052b8:	b007      	add	sp, #28
 80052ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052be:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80052c2:	2a0d      	cmp	r2, #13
 80052c4:	d8e6      	bhi.n	8005294 <_scanf_float+0x64>
 80052c6:	a101      	add	r1, pc, #4	; (adr r1, 80052cc <_scanf_float+0x9c>)
 80052c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80052cc:	0800540b 	.word	0x0800540b
 80052d0:	08005295 	.word	0x08005295
 80052d4:	08005295 	.word	0x08005295
 80052d8:	08005295 	.word	0x08005295
 80052dc:	0800546b 	.word	0x0800546b
 80052e0:	08005443 	.word	0x08005443
 80052e4:	08005295 	.word	0x08005295
 80052e8:	08005295 	.word	0x08005295
 80052ec:	08005419 	.word	0x08005419
 80052f0:	08005295 	.word	0x08005295
 80052f4:	08005295 	.word	0x08005295
 80052f8:	08005295 	.word	0x08005295
 80052fc:	08005295 	.word	0x08005295
 8005300:	080053d1 	.word	0x080053d1
 8005304:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005308:	e7db      	b.n	80052c2 <_scanf_float+0x92>
 800530a:	290e      	cmp	r1, #14
 800530c:	d8c2      	bhi.n	8005294 <_scanf_float+0x64>
 800530e:	a001      	add	r0, pc, #4	; (adr r0, 8005314 <_scanf_float+0xe4>)
 8005310:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005314:	080053c3 	.word	0x080053c3
 8005318:	08005295 	.word	0x08005295
 800531c:	080053c3 	.word	0x080053c3
 8005320:	08005457 	.word	0x08005457
 8005324:	08005295 	.word	0x08005295
 8005328:	08005371 	.word	0x08005371
 800532c:	080053ad 	.word	0x080053ad
 8005330:	080053ad 	.word	0x080053ad
 8005334:	080053ad 	.word	0x080053ad
 8005338:	080053ad 	.word	0x080053ad
 800533c:	080053ad 	.word	0x080053ad
 8005340:	080053ad 	.word	0x080053ad
 8005344:	080053ad 	.word	0x080053ad
 8005348:	080053ad 	.word	0x080053ad
 800534c:	080053ad 	.word	0x080053ad
 8005350:	2b6e      	cmp	r3, #110	; 0x6e
 8005352:	d809      	bhi.n	8005368 <_scanf_float+0x138>
 8005354:	2b60      	cmp	r3, #96	; 0x60
 8005356:	d8b2      	bhi.n	80052be <_scanf_float+0x8e>
 8005358:	2b54      	cmp	r3, #84	; 0x54
 800535a:	d077      	beq.n	800544c <_scanf_float+0x21c>
 800535c:	2b59      	cmp	r3, #89	; 0x59
 800535e:	d199      	bne.n	8005294 <_scanf_float+0x64>
 8005360:	2d07      	cmp	r5, #7
 8005362:	d197      	bne.n	8005294 <_scanf_float+0x64>
 8005364:	2508      	movs	r5, #8
 8005366:	e029      	b.n	80053bc <_scanf_float+0x18c>
 8005368:	2b74      	cmp	r3, #116	; 0x74
 800536a:	d06f      	beq.n	800544c <_scanf_float+0x21c>
 800536c:	2b79      	cmp	r3, #121	; 0x79
 800536e:	e7f6      	b.n	800535e <_scanf_float+0x12e>
 8005370:	6821      	ldr	r1, [r4, #0]
 8005372:	05c8      	lsls	r0, r1, #23
 8005374:	d51a      	bpl.n	80053ac <_scanf_float+0x17c>
 8005376:	9b02      	ldr	r3, [sp, #8]
 8005378:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800537c:	6021      	str	r1, [r4, #0]
 800537e:	f109 0901 	add.w	r9, r9, #1
 8005382:	b11b      	cbz	r3, 800538c <_scanf_float+0x15c>
 8005384:	3b01      	subs	r3, #1
 8005386:	3201      	adds	r2, #1
 8005388:	9302      	str	r3, [sp, #8]
 800538a:	60a2      	str	r2, [r4, #8]
 800538c:	68a3      	ldr	r3, [r4, #8]
 800538e:	3b01      	subs	r3, #1
 8005390:	60a3      	str	r3, [r4, #8]
 8005392:	6923      	ldr	r3, [r4, #16]
 8005394:	3301      	adds	r3, #1
 8005396:	6123      	str	r3, [r4, #16]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3b01      	subs	r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	607b      	str	r3, [r7, #4]
 80053a0:	f340 8084 	ble.w	80054ac <_scanf_float+0x27c>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	3301      	adds	r3, #1
 80053a8:	603b      	str	r3, [r7, #0]
 80053aa:	e766      	b.n	800527a <_scanf_float+0x4a>
 80053ac:	eb1a 0f05 	cmn.w	sl, r5
 80053b0:	f47f af70 	bne.w	8005294 <_scanf_float+0x64>
 80053b4:	6822      	ldr	r2, [r4, #0]
 80053b6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80053ba:	6022      	str	r2, [r4, #0]
 80053bc:	f806 3b01 	strb.w	r3, [r6], #1
 80053c0:	e7e4      	b.n	800538c <_scanf_float+0x15c>
 80053c2:	6822      	ldr	r2, [r4, #0]
 80053c4:	0610      	lsls	r0, r2, #24
 80053c6:	f57f af65 	bpl.w	8005294 <_scanf_float+0x64>
 80053ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053ce:	e7f4      	b.n	80053ba <_scanf_float+0x18a>
 80053d0:	f1ba 0f00 	cmp.w	sl, #0
 80053d4:	d10e      	bne.n	80053f4 <_scanf_float+0x1c4>
 80053d6:	f1b9 0f00 	cmp.w	r9, #0
 80053da:	d10e      	bne.n	80053fa <_scanf_float+0x1ca>
 80053dc:	6822      	ldr	r2, [r4, #0]
 80053de:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80053e2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80053e6:	d108      	bne.n	80053fa <_scanf_float+0x1ca>
 80053e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80053ec:	f04f 0a01 	mov.w	sl, #1
 80053f0:	6022      	str	r2, [r4, #0]
 80053f2:	e7e3      	b.n	80053bc <_scanf_float+0x18c>
 80053f4:	f1ba 0f02 	cmp.w	sl, #2
 80053f8:	d055      	beq.n	80054a6 <_scanf_float+0x276>
 80053fa:	2d01      	cmp	r5, #1
 80053fc:	d002      	beq.n	8005404 <_scanf_float+0x1d4>
 80053fe:	2d04      	cmp	r5, #4
 8005400:	f47f af48 	bne.w	8005294 <_scanf_float+0x64>
 8005404:	3501      	adds	r5, #1
 8005406:	b2ed      	uxtb	r5, r5
 8005408:	e7d8      	b.n	80053bc <_scanf_float+0x18c>
 800540a:	f1ba 0f01 	cmp.w	sl, #1
 800540e:	f47f af41 	bne.w	8005294 <_scanf_float+0x64>
 8005412:	f04f 0a02 	mov.w	sl, #2
 8005416:	e7d1      	b.n	80053bc <_scanf_float+0x18c>
 8005418:	b97d      	cbnz	r5, 800543a <_scanf_float+0x20a>
 800541a:	f1b9 0f00 	cmp.w	r9, #0
 800541e:	f47f af3c 	bne.w	800529a <_scanf_float+0x6a>
 8005422:	6822      	ldr	r2, [r4, #0]
 8005424:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005428:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800542c:	f47f af39 	bne.w	80052a2 <_scanf_float+0x72>
 8005430:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005434:	2501      	movs	r5, #1
 8005436:	6022      	str	r2, [r4, #0]
 8005438:	e7c0      	b.n	80053bc <_scanf_float+0x18c>
 800543a:	2d03      	cmp	r5, #3
 800543c:	d0e2      	beq.n	8005404 <_scanf_float+0x1d4>
 800543e:	2d05      	cmp	r5, #5
 8005440:	e7de      	b.n	8005400 <_scanf_float+0x1d0>
 8005442:	2d02      	cmp	r5, #2
 8005444:	f47f af26 	bne.w	8005294 <_scanf_float+0x64>
 8005448:	2503      	movs	r5, #3
 800544a:	e7b7      	b.n	80053bc <_scanf_float+0x18c>
 800544c:	2d06      	cmp	r5, #6
 800544e:	f47f af21 	bne.w	8005294 <_scanf_float+0x64>
 8005452:	2507      	movs	r5, #7
 8005454:	e7b2      	b.n	80053bc <_scanf_float+0x18c>
 8005456:	6822      	ldr	r2, [r4, #0]
 8005458:	0591      	lsls	r1, r2, #22
 800545a:	f57f af1b 	bpl.w	8005294 <_scanf_float+0x64>
 800545e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005462:	6022      	str	r2, [r4, #0]
 8005464:	f8cd 9004 	str.w	r9, [sp, #4]
 8005468:	e7a8      	b.n	80053bc <_scanf_float+0x18c>
 800546a:	6822      	ldr	r2, [r4, #0]
 800546c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005470:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005474:	d006      	beq.n	8005484 <_scanf_float+0x254>
 8005476:	0550      	lsls	r0, r2, #21
 8005478:	f57f af0c 	bpl.w	8005294 <_scanf_float+0x64>
 800547c:	f1b9 0f00 	cmp.w	r9, #0
 8005480:	f43f af0f 	beq.w	80052a2 <_scanf_float+0x72>
 8005484:	0591      	lsls	r1, r2, #22
 8005486:	bf58      	it	pl
 8005488:	9901      	ldrpl	r1, [sp, #4]
 800548a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800548e:	bf58      	it	pl
 8005490:	eba9 0101 	subpl.w	r1, r9, r1
 8005494:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005498:	f04f 0900 	mov.w	r9, #0
 800549c:	bf58      	it	pl
 800549e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80054a2:	6022      	str	r2, [r4, #0]
 80054a4:	e78a      	b.n	80053bc <_scanf_float+0x18c>
 80054a6:	f04f 0a03 	mov.w	sl, #3
 80054aa:	e787      	b.n	80053bc <_scanf_float+0x18c>
 80054ac:	4639      	mov	r1, r7
 80054ae:	4640      	mov	r0, r8
 80054b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80054b4:	4798      	blx	r3
 80054b6:	2800      	cmp	r0, #0
 80054b8:	f43f aedf 	beq.w	800527a <_scanf_float+0x4a>
 80054bc:	e6ea      	b.n	8005294 <_scanf_float+0x64>
 80054be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054c2:	463a      	mov	r2, r7
 80054c4:	4640      	mov	r0, r8
 80054c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80054ca:	4798      	blx	r3
 80054cc:	6923      	ldr	r3, [r4, #16]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	6123      	str	r3, [r4, #16]
 80054d2:	e6ec      	b.n	80052ae <_scanf_float+0x7e>
 80054d4:	1e6b      	subs	r3, r5, #1
 80054d6:	2b06      	cmp	r3, #6
 80054d8:	d825      	bhi.n	8005526 <_scanf_float+0x2f6>
 80054da:	2d02      	cmp	r5, #2
 80054dc:	d836      	bhi.n	800554c <_scanf_float+0x31c>
 80054de:	455e      	cmp	r6, fp
 80054e0:	f67f aee8 	bls.w	80052b4 <_scanf_float+0x84>
 80054e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054e8:	463a      	mov	r2, r7
 80054ea:	4640      	mov	r0, r8
 80054ec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80054f0:	4798      	blx	r3
 80054f2:	6923      	ldr	r3, [r4, #16]
 80054f4:	3b01      	subs	r3, #1
 80054f6:	6123      	str	r3, [r4, #16]
 80054f8:	e7f1      	b.n	80054de <_scanf_float+0x2ae>
 80054fa:	9802      	ldr	r0, [sp, #8]
 80054fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005500:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005504:	463a      	mov	r2, r7
 8005506:	9002      	str	r0, [sp, #8]
 8005508:	4640      	mov	r0, r8
 800550a:	4798      	blx	r3
 800550c:	6923      	ldr	r3, [r4, #16]
 800550e:	3b01      	subs	r3, #1
 8005510:	6123      	str	r3, [r4, #16]
 8005512:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005516:	fa5f fa8a 	uxtb.w	sl, sl
 800551a:	f1ba 0f02 	cmp.w	sl, #2
 800551e:	d1ec      	bne.n	80054fa <_scanf_float+0x2ca>
 8005520:	3d03      	subs	r5, #3
 8005522:	b2ed      	uxtb	r5, r5
 8005524:	1b76      	subs	r6, r6, r5
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	05da      	lsls	r2, r3, #23
 800552a:	d52f      	bpl.n	800558c <_scanf_float+0x35c>
 800552c:	055b      	lsls	r3, r3, #21
 800552e:	d510      	bpl.n	8005552 <_scanf_float+0x322>
 8005530:	455e      	cmp	r6, fp
 8005532:	f67f aebf 	bls.w	80052b4 <_scanf_float+0x84>
 8005536:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800553a:	463a      	mov	r2, r7
 800553c:	4640      	mov	r0, r8
 800553e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005542:	4798      	blx	r3
 8005544:	6923      	ldr	r3, [r4, #16]
 8005546:	3b01      	subs	r3, #1
 8005548:	6123      	str	r3, [r4, #16]
 800554a:	e7f1      	b.n	8005530 <_scanf_float+0x300>
 800554c:	46aa      	mov	sl, r5
 800554e:	9602      	str	r6, [sp, #8]
 8005550:	e7df      	b.n	8005512 <_scanf_float+0x2e2>
 8005552:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005556:	6923      	ldr	r3, [r4, #16]
 8005558:	2965      	cmp	r1, #101	; 0x65
 800555a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800555e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8005562:	6123      	str	r3, [r4, #16]
 8005564:	d00c      	beq.n	8005580 <_scanf_float+0x350>
 8005566:	2945      	cmp	r1, #69	; 0x45
 8005568:	d00a      	beq.n	8005580 <_scanf_float+0x350>
 800556a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800556e:	463a      	mov	r2, r7
 8005570:	4640      	mov	r0, r8
 8005572:	4798      	blx	r3
 8005574:	6923      	ldr	r3, [r4, #16]
 8005576:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800557a:	3b01      	subs	r3, #1
 800557c:	1eb5      	subs	r5, r6, #2
 800557e:	6123      	str	r3, [r4, #16]
 8005580:	463a      	mov	r2, r7
 8005582:	4640      	mov	r0, r8
 8005584:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005588:	4798      	blx	r3
 800558a:	462e      	mov	r6, r5
 800558c:	6825      	ldr	r5, [r4, #0]
 800558e:	f015 0510 	ands.w	r5, r5, #16
 8005592:	d155      	bne.n	8005640 <_scanf_float+0x410>
 8005594:	7035      	strb	r5, [r6, #0]
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800559c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a0:	d11d      	bne.n	80055de <_scanf_float+0x3ae>
 80055a2:	9b01      	ldr	r3, [sp, #4]
 80055a4:	454b      	cmp	r3, r9
 80055a6:	eba3 0209 	sub.w	r2, r3, r9
 80055aa:	d125      	bne.n	80055f8 <_scanf_float+0x3c8>
 80055ac:	2200      	movs	r2, #0
 80055ae:	4659      	mov	r1, fp
 80055b0:	4640      	mov	r0, r8
 80055b2:	f002 fc0d 	bl	8007dd0 <_strtod_r>
 80055b6:	9b03      	ldr	r3, [sp, #12]
 80055b8:	f8d4 c000 	ldr.w	ip, [r4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f01c 0f02 	tst.w	ip, #2
 80055c2:	4606      	mov	r6, r0
 80055c4:	460f      	mov	r7, r1
 80055c6:	f103 0204 	add.w	r2, r3, #4
 80055ca:	d020      	beq.n	800560e <_scanf_float+0x3de>
 80055cc:	9903      	ldr	r1, [sp, #12]
 80055ce:	600a      	str	r2, [r1, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	e9c3 6700 	strd	r6, r7, [r3]
 80055d6:	68e3      	ldr	r3, [r4, #12]
 80055d8:	3301      	adds	r3, #1
 80055da:	60e3      	str	r3, [r4, #12]
 80055dc:	e66b      	b.n	80052b6 <_scanf_float+0x86>
 80055de:	9b04      	ldr	r3, [sp, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d0e3      	beq.n	80055ac <_scanf_float+0x37c>
 80055e4:	9905      	ldr	r1, [sp, #20]
 80055e6:	230a      	movs	r3, #10
 80055e8:	462a      	mov	r2, r5
 80055ea:	4640      	mov	r0, r8
 80055ec:	3101      	adds	r1, #1
 80055ee:	f002 fc73 	bl	8007ed8 <_strtol_r>
 80055f2:	9b04      	ldr	r3, [sp, #16]
 80055f4:	9e05      	ldr	r6, [sp, #20]
 80055f6:	1ac2      	subs	r2, r0, r3
 80055f8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80055fc:	429e      	cmp	r6, r3
 80055fe:	bf28      	it	cs
 8005600:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005604:	4630      	mov	r0, r6
 8005606:	490f      	ldr	r1, [pc, #60]	; (8005644 <_scanf_float+0x414>)
 8005608:	f000 f8d0 	bl	80057ac <siprintf>
 800560c:	e7ce      	b.n	80055ac <_scanf_float+0x37c>
 800560e:	f01c 0f04 	tst.w	ip, #4
 8005612:	d1db      	bne.n	80055cc <_scanf_float+0x39c>
 8005614:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005618:	f8cc 2000 	str.w	r2, [ip]
 800561c:	f8d3 8000 	ldr.w	r8, [r3]
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	f7fb faa6 	bl	8000b74 <__aeabi_dcmpun>
 8005628:	b128      	cbz	r0, 8005636 <_scanf_float+0x406>
 800562a:	4807      	ldr	r0, [pc, #28]	; (8005648 <_scanf_float+0x418>)
 800562c:	f000 f9ae 	bl	800598c <nanf>
 8005630:	f8c8 0000 	str.w	r0, [r8]
 8005634:	e7cf      	b.n	80055d6 <_scanf_float+0x3a6>
 8005636:	4630      	mov	r0, r6
 8005638:	4639      	mov	r1, r7
 800563a:	f7fb faf9 	bl	8000c30 <__aeabi_d2f>
 800563e:	e7f7      	b.n	8005630 <_scanf_float+0x400>
 8005640:	2500      	movs	r5, #0
 8005642:	e638      	b.n	80052b6 <_scanf_float+0x86>
 8005644:	0800a61e 	.word	0x0800a61e
 8005648:	0800a9b5 	.word	0x0800a9b5

0800564c <std>:
 800564c:	2300      	movs	r3, #0
 800564e:	b510      	push	{r4, lr}
 8005650:	4604      	mov	r4, r0
 8005652:	e9c0 3300 	strd	r3, r3, [r0]
 8005656:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800565a:	6083      	str	r3, [r0, #8]
 800565c:	8181      	strh	r1, [r0, #12]
 800565e:	6643      	str	r3, [r0, #100]	; 0x64
 8005660:	81c2      	strh	r2, [r0, #14]
 8005662:	6183      	str	r3, [r0, #24]
 8005664:	4619      	mov	r1, r3
 8005666:	2208      	movs	r2, #8
 8005668:	305c      	adds	r0, #92	; 0x5c
 800566a:	f000 f902 	bl	8005872 <memset>
 800566e:	4b05      	ldr	r3, [pc, #20]	; (8005684 <std+0x38>)
 8005670:	6224      	str	r4, [r4, #32]
 8005672:	6263      	str	r3, [r4, #36]	; 0x24
 8005674:	4b04      	ldr	r3, [pc, #16]	; (8005688 <std+0x3c>)
 8005676:	62a3      	str	r3, [r4, #40]	; 0x28
 8005678:	4b04      	ldr	r3, [pc, #16]	; (800568c <std+0x40>)
 800567a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800567c:	4b04      	ldr	r3, [pc, #16]	; (8005690 <std+0x44>)
 800567e:	6323      	str	r3, [r4, #48]	; 0x30
 8005680:	bd10      	pop	{r4, pc}
 8005682:	bf00      	nop
 8005684:	080057ed 	.word	0x080057ed
 8005688:	0800580f 	.word	0x0800580f
 800568c:	08005847 	.word	0x08005847
 8005690:	0800586b 	.word	0x0800586b

08005694 <stdio_exit_handler>:
 8005694:	4a02      	ldr	r2, [pc, #8]	; (80056a0 <stdio_exit_handler+0xc>)
 8005696:	4903      	ldr	r1, [pc, #12]	; (80056a4 <stdio_exit_handler+0x10>)
 8005698:	4803      	ldr	r0, [pc, #12]	; (80056a8 <stdio_exit_handler+0x14>)
 800569a:	f000 b869 	b.w	8005770 <_fwalk_sglue>
 800569e:	bf00      	nop
 80056a0:	2000001c 	.word	0x2000001c
 80056a4:	08008291 	.word	0x08008291
 80056a8:	20000028 	.word	0x20000028

080056ac <cleanup_stdio>:
 80056ac:	6841      	ldr	r1, [r0, #4]
 80056ae:	4b0c      	ldr	r3, [pc, #48]	; (80056e0 <cleanup_stdio+0x34>)
 80056b0:	b510      	push	{r4, lr}
 80056b2:	4299      	cmp	r1, r3
 80056b4:	4604      	mov	r4, r0
 80056b6:	d001      	beq.n	80056bc <cleanup_stdio+0x10>
 80056b8:	f002 fdea 	bl	8008290 <_fflush_r>
 80056bc:	68a1      	ldr	r1, [r4, #8]
 80056be:	4b09      	ldr	r3, [pc, #36]	; (80056e4 <cleanup_stdio+0x38>)
 80056c0:	4299      	cmp	r1, r3
 80056c2:	d002      	beq.n	80056ca <cleanup_stdio+0x1e>
 80056c4:	4620      	mov	r0, r4
 80056c6:	f002 fde3 	bl	8008290 <_fflush_r>
 80056ca:	68e1      	ldr	r1, [r4, #12]
 80056cc:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <cleanup_stdio+0x3c>)
 80056ce:	4299      	cmp	r1, r3
 80056d0:	d004      	beq.n	80056dc <cleanup_stdio+0x30>
 80056d2:	4620      	mov	r0, r4
 80056d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d8:	f002 bdda 	b.w	8008290 <_fflush_r>
 80056dc:	bd10      	pop	{r4, pc}
 80056de:	bf00      	nop
 80056e0:	20000750 	.word	0x20000750
 80056e4:	200007b8 	.word	0x200007b8
 80056e8:	20000820 	.word	0x20000820

080056ec <global_stdio_init.part.0>:
 80056ec:	b510      	push	{r4, lr}
 80056ee:	4b0b      	ldr	r3, [pc, #44]	; (800571c <global_stdio_init.part.0+0x30>)
 80056f0:	4c0b      	ldr	r4, [pc, #44]	; (8005720 <global_stdio_init.part.0+0x34>)
 80056f2:	4a0c      	ldr	r2, [pc, #48]	; (8005724 <global_stdio_init.part.0+0x38>)
 80056f4:	4620      	mov	r0, r4
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	2104      	movs	r1, #4
 80056fa:	2200      	movs	r2, #0
 80056fc:	f7ff ffa6 	bl	800564c <std>
 8005700:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005704:	2201      	movs	r2, #1
 8005706:	2109      	movs	r1, #9
 8005708:	f7ff ffa0 	bl	800564c <std>
 800570c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005710:	2202      	movs	r2, #2
 8005712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005716:	2112      	movs	r1, #18
 8005718:	f7ff bf98 	b.w	800564c <std>
 800571c:	20000888 	.word	0x20000888
 8005720:	20000750 	.word	0x20000750
 8005724:	08005695 	.word	0x08005695

08005728 <__sfp_lock_acquire>:
 8005728:	4801      	ldr	r0, [pc, #4]	; (8005730 <__sfp_lock_acquire+0x8>)
 800572a:	f000 b91f 	b.w	800596c <__retarget_lock_acquire_recursive>
 800572e:	bf00      	nop
 8005730:	20000891 	.word	0x20000891

08005734 <__sfp_lock_release>:
 8005734:	4801      	ldr	r0, [pc, #4]	; (800573c <__sfp_lock_release+0x8>)
 8005736:	f000 b91a 	b.w	800596e <__retarget_lock_release_recursive>
 800573a:	bf00      	nop
 800573c:	20000891 	.word	0x20000891

08005740 <__sinit>:
 8005740:	b510      	push	{r4, lr}
 8005742:	4604      	mov	r4, r0
 8005744:	f7ff fff0 	bl	8005728 <__sfp_lock_acquire>
 8005748:	6a23      	ldr	r3, [r4, #32]
 800574a:	b11b      	cbz	r3, 8005754 <__sinit+0x14>
 800574c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005750:	f7ff bff0 	b.w	8005734 <__sfp_lock_release>
 8005754:	4b04      	ldr	r3, [pc, #16]	; (8005768 <__sinit+0x28>)
 8005756:	6223      	str	r3, [r4, #32]
 8005758:	4b04      	ldr	r3, [pc, #16]	; (800576c <__sinit+0x2c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1f5      	bne.n	800574c <__sinit+0xc>
 8005760:	f7ff ffc4 	bl	80056ec <global_stdio_init.part.0>
 8005764:	e7f2      	b.n	800574c <__sinit+0xc>
 8005766:	bf00      	nop
 8005768:	080056ad 	.word	0x080056ad
 800576c:	20000888 	.word	0x20000888

08005770 <_fwalk_sglue>:
 8005770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005774:	4607      	mov	r7, r0
 8005776:	4688      	mov	r8, r1
 8005778:	4614      	mov	r4, r2
 800577a:	2600      	movs	r6, #0
 800577c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005780:	f1b9 0901 	subs.w	r9, r9, #1
 8005784:	d505      	bpl.n	8005792 <_fwalk_sglue+0x22>
 8005786:	6824      	ldr	r4, [r4, #0]
 8005788:	2c00      	cmp	r4, #0
 800578a:	d1f7      	bne.n	800577c <_fwalk_sglue+0xc>
 800578c:	4630      	mov	r0, r6
 800578e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005792:	89ab      	ldrh	r3, [r5, #12]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d907      	bls.n	80057a8 <_fwalk_sglue+0x38>
 8005798:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800579c:	3301      	adds	r3, #1
 800579e:	d003      	beq.n	80057a8 <_fwalk_sglue+0x38>
 80057a0:	4629      	mov	r1, r5
 80057a2:	4638      	mov	r0, r7
 80057a4:	47c0      	blx	r8
 80057a6:	4306      	orrs	r6, r0
 80057a8:	3568      	adds	r5, #104	; 0x68
 80057aa:	e7e9      	b.n	8005780 <_fwalk_sglue+0x10>

080057ac <siprintf>:
 80057ac:	b40e      	push	{r1, r2, r3}
 80057ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057b2:	b500      	push	{lr}
 80057b4:	b09c      	sub	sp, #112	; 0x70
 80057b6:	ab1d      	add	r3, sp, #116	; 0x74
 80057b8:	9002      	str	r0, [sp, #8]
 80057ba:	9006      	str	r0, [sp, #24]
 80057bc:	9107      	str	r1, [sp, #28]
 80057be:	9104      	str	r1, [sp, #16]
 80057c0:	4808      	ldr	r0, [pc, #32]	; (80057e4 <siprintf+0x38>)
 80057c2:	4909      	ldr	r1, [pc, #36]	; (80057e8 <siprintf+0x3c>)
 80057c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80057c8:	9105      	str	r1, [sp, #20]
 80057ca:	6800      	ldr	r0, [r0, #0]
 80057cc:	a902      	add	r1, sp, #8
 80057ce:	9301      	str	r3, [sp, #4]
 80057d0:	f002 fbde 	bl	8007f90 <_svfiprintf_r>
 80057d4:	2200      	movs	r2, #0
 80057d6:	9b02      	ldr	r3, [sp, #8]
 80057d8:	701a      	strb	r2, [r3, #0]
 80057da:	b01c      	add	sp, #112	; 0x70
 80057dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80057e0:	b003      	add	sp, #12
 80057e2:	4770      	bx	lr
 80057e4:	20000074 	.word	0x20000074
 80057e8:	ffff0208 	.word	0xffff0208

080057ec <__sread>:
 80057ec:	b510      	push	{r4, lr}
 80057ee:	460c      	mov	r4, r1
 80057f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f4:	f000 f86c 	bl	80058d0 <_read_r>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	bfab      	itete	ge
 80057fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057fe:	89a3      	ldrhlt	r3, [r4, #12]
 8005800:	181b      	addge	r3, r3, r0
 8005802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005806:	bfac      	ite	ge
 8005808:	6563      	strge	r3, [r4, #84]	; 0x54
 800580a:	81a3      	strhlt	r3, [r4, #12]
 800580c:	bd10      	pop	{r4, pc}

0800580e <__swrite>:
 800580e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005812:	461f      	mov	r7, r3
 8005814:	898b      	ldrh	r3, [r1, #12]
 8005816:	4605      	mov	r5, r0
 8005818:	05db      	lsls	r3, r3, #23
 800581a:	460c      	mov	r4, r1
 800581c:	4616      	mov	r6, r2
 800581e:	d505      	bpl.n	800582c <__swrite+0x1e>
 8005820:	2302      	movs	r3, #2
 8005822:	2200      	movs	r2, #0
 8005824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005828:	f000 f840 	bl	80058ac <_lseek_r>
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	4632      	mov	r2, r6
 8005830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005834:	81a3      	strh	r3, [r4, #12]
 8005836:	4628      	mov	r0, r5
 8005838:	463b      	mov	r3, r7
 800583a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800583e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005842:	f000 b857 	b.w	80058f4 <_write_r>

08005846 <__sseek>:
 8005846:	b510      	push	{r4, lr}
 8005848:	460c      	mov	r4, r1
 800584a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800584e:	f000 f82d 	bl	80058ac <_lseek_r>
 8005852:	1c43      	adds	r3, r0, #1
 8005854:	89a3      	ldrh	r3, [r4, #12]
 8005856:	bf15      	itete	ne
 8005858:	6560      	strne	r0, [r4, #84]	; 0x54
 800585a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800585e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005862:	81a3      	strheq	r3, [r4, #12]
 8005864:	bf18      	it	ne
 8005866:	81a3      	strhne	r3, [r4, #12]
 8005868:	bd10      	pop	{r4, pc}

0800586a <__sclose>:
 800586a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800586e:	f000 b80d 	b.w	800588c <_close_r>

08005872 <memset>:
 8005872:	4603      	mov	r3, r0
 8005874:	4402      	add	r2, r0
 8005876:	4293      	cmp	r3, r2
 8005878:	d100      	bne.n	800587c <memset+0xa>
 800587a:	4770      	bx	lr
 800587c:	f803 1b01 	strb.w	r1, [r3], #1
 8005880:	e7f9      	b.n	8005876 <memset+0x4>
	...

08005884 <_localeconv_r>:
 8005884:	4800      	ldr	r0, [pc, #0]	; (8005888 <_localeconv_r+0x4>)
 8005886:	4770      	bx	lr
 8005888:	20000168 	.word	0x20000168

0800588c <_close_r>:
 800588c:	b538      	push	{r3, r4, r5, lr}
 800588e:	2300      	movs	r3, #0
 8005890:	4d05      	ldr	r5, [pc, #20]	; (80058a8 <_close_r+0x1c>)
 8005892:	4604      	mov	r4, r0
 8005894:	4608      	mov	r0, r1
 8005896:	602b      	str	r3, [r5, #0]
 8005898:	f7fc fdd5 	bl	8002446 <_close>
 800589c:	1c43      	adds	r3, r0, #1
 800589e:	d102      	bne.n	80058a6 <_close_r+0x1a>
 80058a0:	682b      	ldr	r3, [r5, #0]
 80058a2:	b103      	cbz	r3, 80058a6 <_close_r+0x1a>
 80058a4:	6023      	str	r3, [r4, #0]
 80058a6:	bd38      	pop	{r3, r4, r5, pc}
 80058a8:	2000088c 	.word	0x2000088c

080058ac <_lseek_r>:
 80058ac:	b538      	push	{r3, r4, r5, lr}
 80058ae:	4604      	mov	r4, r0
 80058b0:	4608      	mov	r0, r1
 80058b2:	4611      	mov	r1, r2
 80058b4:	2200      	movs	r2, #0
 80058b6:	4d05      	ldr	r5, [pc, #20]	; (80058cc <_lseek_r+0x20>)
 80058b8:	602a      	str	r2, [r5, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	f7fc fde7 	bl	800248e <_lseek>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	d102      	bne.n	80058ca <_lseek_r+0x1e>
 80058c4:	682b      	ldr	r3, [r5, #0]
 80058c6:	b103      	cbz	r3, 80058ca <_lseek_r+0x1e>
 80058c8:	6023      	str	r3, [r4, #0]
 80058ca:	bd38      	pop	{r3, r4, r5, pc}
 80058cc:	2000088c 	.word	0x2000088c

080058d0 <_read_r>:
 80058d0:	b538      	push	{r3, r4, r5, lr}
 80058d2:	4604      	mov	r4, r0
 80058d4:	4608      	mov	r0, r1
 80058d6:	4611      	mov	r1, r2
 80058d8:	2200      	movs	r2, #0
 80058da:	4d05      	ldr	r5, [pc, #20]	; (80058f0 <_read_r+0x20>)
 80058dc:	602a      	str	r2, [r5, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	f7fc fd78 	bl	80023d4 <_read>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	d102      	bne.n	80058ee <_read_r+0x1e>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	b103      	cbz	r3, 80058ee <_read_r+0x1e>
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	bd38      	pop	{r3, r4, r5, pc}
 80058f0:	2000088c 	.word	0x2000088c

080058f4 <_write_r>:
 80058f4:	b538      	push	{r3, r4, r5, lr}
 80058f6:	4604      	mov	r4, r0
 80058f8:	4608      	mov	r0, r1
 80058fa:	4611      	mov	r1, r2
 80058fc:	2200      	movs	r2, #0
 80058fe:	4d05      	ldr	r5, [pc, #20]	; (8005914 <_write_r+0x20>)
 8005900:	602a      	str	r2, [r5, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	f7fc fd83 	bl	800240e <_write>
 8005908:	1c43      	adds	r3, r0, #1
 800590a:	d102      	bne.n	8005912 <_write_r+0x1e>
 800590c:	682b      	ldr	r3, [r5, #0]
 800590e:	b103      	cbz	r3, 8005912 <_write_r+0x1e>
 8005910:	6023      	str	r3, [r4, #0]
 8005912:	bd38      	pop	{r3, r4, r5, pc}
 8005914:	2000088c 	.word	0x2000088c

08005918 <__errno>:
 8005918:	4b01      	ldr	r3, [pc, #4]	; (8005920 <__errno+0x8>)
 800591a:	6818      	ldr	r0, [r3, #0]
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	20000074 	.word	0x20000074

08005924 <__libc_init_array>:
 8005924:	b570      	push	{r4, r5, r6, lr}
 8005926:	2600      	movs	r6, #0
 8005928:	4d0c      	ldr	r5, [pc, #48]	; (800595c <__libc_init_array+0x38>)
 800592a:	4c0d      	ldr	r4, [pc, #52]	; (8005960 <__libc_init_array+0x3c>)
 800592c:	1b64      	subs	r4, r4, r5
 800592e:	10a4      	asrs	r4, r4, #2
 8005930:	42a6      	cmp	r6, r4
 8005932:	d109      	bne.n	8005948 <__libc_init_array+0x24>
 8005934:	f003 fbbe 	bl	80090b4 <_init>
 8005938:	2600      	movs	r6, #0
 800593a:	4d0a      	ldr	r5, [pc, #40]	; (8005964 <__libc_init_array+0x40>)
 800593c:	4c0a      	ldr	r4, [pc, #40]	; (8005968 <__libc_init_array+0x44>)
 800593e:	1b64      	subs	r4, r4, r5
 8005940:	10a4      	asrs	r4, r4, #2
 8005942:	42a6      	cmp	r6, r4
 8005944:	d105      	bne.n	8005952 <__libc_init_array+0x2e>
 8005946:	bd70      	pop	{r4, r5, r6, pc}
 8005948:	f855 3b04 	ldr.w	r3, [r5], #4
 800594c:	4798      	blx	r3
 800594e:	3601      	adds	r6, #1
 8005950:	e7ee      	b.n	8005930 <__libc_init_array+0xc>
 8005952:	f855 3b04 	ldr.w	r3, [r5], #4
 8005956:	4798      	blx	r3
 8005958:	3601      	adds	r6, #1
 800595a:	e7f2      	b.n	8005942 <__libc_init_array+0x1e>
 800595c:	0800aa18 	.word	0x0800aa18
 8005960:	0800aa18 	.word	0x0800aa18
 8005964:	0800aa18 	.word	0x0800aa18
 8005968:	0800aa1c 	.word	0x0800aa1c

0800596c <__retarget_lock_acquire_recursive>:
 800596c:	4770      	bx	lr

0800596e <__retarget_lock_release_recursive>:
 800596e:	4770      	bx	lr

08005970 <memchr>:
 8005970:	4603      	mov	r3, r0
 8005972:	b510      	push	{r4, lr}
 8005974:	b2c9      	uxtb	r1, r1
 8005976:	4402      	add	r2, r0
 8005978:	4293      	cmp	r3, r2
 800597a:	4618      	mov	r0, r3
 800597c:	d101      	bne.n	8005982 <memchr+0x12>
 800597e:	2000      	movs	r0, #0
 8005980:	e003      	b.n	800598a <memchr+0x1a>
 8005982:	7804      	ldrb	r4, [r0, #0]
 8005984:	3301      	adds	r3, #1
 8005986:	428c      	cmp	r4, r1
 8005988:	d1f6      	bne.n	8005978 <memchr+0x8>
 800598a:	bd10      	pop	{r4, pc}

0800598c <nanf>:
 800598c:	4800      	ldr	r0, [pc, #0]	; (8005990 <nanf+0x4>)
 800598e:	4770      	bx	lr
 8005990:	7fc00000 	.word	0x7fc00000

08005994 <quorem>:
 8005994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005998:	6903      	ldr	r3, [r0, #16]
 800599a:	690c      	ldr	r4, [r1, #16]
 800599c:	4607      	mov	r7, r0
 800599e:	42a3      	cmp	r3, r4
 80059a0:	db7f      	blt.n	8005aa2 <quorem+0x10e>
 80059a2:	3c01      	subs	r4, #1
 80059a4:	f100 0514 	add.w	r5, r0, #20
 80059a8:	f101 0814 	add.w	r8, r1, #20
 80059ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059b0:	9301      	str	r3, [sp, #4]
 80059b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059ba:	3301      	adds	r3, #1
 80059bc:	429a      	cmp	r2, r3
 80059be:	fbb2 f6f3 	udiv	r6, r2, r3
 80059c2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059ca:	d331      	bcc.n	8005a30 <quorem+0x9c>
 80059cc:	f04f 0e00 	mov.w	lr, #0
 80059d0:	4640      	mov	r0, r8
 80059d2:	46ac      	mov	ip, r5
 80059d4:	46f2      	mov	sl, lr
 80059d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80059da:	b293      	uxth	r3, r2
 80059dc:	fb06 e303 	mla	r3, r6, r3, lr
 80059e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059e4:	0c1a      	lsrs	r2, r3, #16
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	fb06 220e 	mla	r2, r6, lr, r2
 80059ec:	ebaa 0303 	sub.w	r3, sl, r3
 80059f0:	f8dc a000 	ldr.w	sl, [ip]
 80059f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059f8:	fa1f fa8a 	uxth.w	sl, sl
 80059fc:	4453      	add	r3, sl
 80059fe:	f8dc a000 	ldr.w	sl, [ip]
 8005a02:	b292      	uxth	r2, r2
 8005a04:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005a08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a12:	4581      	cmp	r9, r0
 8005a14:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a18:	f84c 3b04 	str.w	r3, [ip], #4
 8005a1c:	d2db      	bcs.n	80059d6 <quorem+0x42>
 8005a1e:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a22:	b92b      	cbnz	r3, 8005a30 <quorem+0x9c>
 8005a24:	9b01      	ldr	r3, [sp, #4]
 8005a26:	3b04      	subs	r3, #4
 8005a28:	429d      	cmp	r5, r3
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	d32d      	bcc.n	8005a8a <quorem+0xf6>
 8005a2e:	613c      	str	r4, [r7, #16]
 8005a30:	4638      	mov	r0, r7
 8005a32:	f001 f9dd 	bl	8006df0 <__mcmp>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	db23      	blt.n	8005a82 <quorem+0xee>
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	3601      	adds	r6, #1
 8005a40:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a44:	f8d1 c000 	ldr.w	ip, [r1]
 8005a48:	b293      	uxth	r3, r2
 8005a4a:	1ac3      	subs	r3, r0, r3
 8005a4c:	0c12      	lsrs	r2, r2, #16
 8005a4e:	fa1f f08c 	uxth.w	r0, ip
 8005a52:	4403      	add	r3, r0
 8005a54:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005a58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a62:	45c1      	cmp	r9, r8
 8005a64:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005a68:	f841 3b04 	str.w	r3, [r1], #4
 8005a6c:	d2e8      	bcs.n	8005a40 <quorem+0xac>
 8005a6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a76:	b922      	cbnz	r2, 8005a82 <quorem+0xee>
 8005a78:	3b04      	subs	r3, #4
 8005a7a:	429d      	cmp	r5, r3
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	d30a      	bcc.n	8005a96 <quorem+0x102>
 8005a80:	613c      	str	r4, [r7, #16]
 8005a82:	4630      	mov	r0, r6
 8005a84:	b003      	add	sp, #12
 8005a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8a:	6812      	ldr	r2, [r2, #0]
 8005a8c:	3b04      	subs	r3, #4
 8005a8e:	2a00      	cmp	r2, #0
 8005a90:	d1cd      	bne.n	8005a2e <quorem+0x9a>
 8005a92:	3c01      	subs	r4, #1
 8005a94:	e7c8      	b.n	8005a28 <quorem+0x94>
 8005a96:	6812      	ldr	r2, [r2, #0]
 8005a98:	3b04      	subs	r3, #4
 8005a9a:	2a00      	cmp	r2, #0
 8005a9c:	d1f0      	bne.n	8005a80 <quorem+0xec>
 8005a9e:	3c01      	subs	r4, #1
 8005aa0:	e7eb      	b.n	8005a7a <quorem+0xe6>
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	e7ee      	b.n	8005a84 <quorem+0xf0>
	...

08005aa8 <_dtoa_r>:
 8005aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aac:	4616      	mov	r6, r2
 8005aae:	461f      	mov	r7, r3
 8005ab0:	69c4      	ldr	r4, [r0, #28]
 8005ab2:	b099      	sub	sp, #100	; 0x64
 8005ab4:	4605      	mov	r5, r0
 8005ab6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005aba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005abe:	b974      	cbnz	r4, 8005ade <_dtoa_r+0x36>
 8005ac0:	2010      	movs	r0, #16
 8005ac2:	f000 fe1d 	bl	8006700 <malloc>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	61e8      	str	r0, [r5, #28]
 8005aca:	b920      	cbnz	r0, 8005ad6 <_dtoa_r+0x2e>
 8005acc:	21ef      	movs	r1, #239	; 0xef
 8005ace:	4bac      	ldr	r3, [pc, #688]	; (8005d80 <_dtoa_r+0x2d8>)
 8005ad0:	48ac      	ldr	r0, [pc, #688]	; (8005d84 <_dtoa_r+0x2dc>)
 8005ad2:	f002 fc55 	bl	8008380 <__assert_func>
 8005ad6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ada:	6004      	str	r4, [r0, #0]
 8005adc:	60c4      	str	r4, [r0, #12]
 8005ade:	69eb      	ldr	r3, [r5, #28]
 8005ae0:	6819      	ldr	r1, [r3, #0]
 8005ae2:	b151      	cbz	r1, 8005afa <_dtoa_r+0x52>
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	4093      	lsls	r3, r2
 8005aea:	604a      	str	r2, [r1, #4]
 8005aec:	608b      	str	r3, [r1, #8]
 8005aee:	4628      	mov	r0, r5
 8005af0:	f000 fefa 	bl	80068e8 <_Bfree>
 8005af4:	2200      	movs	r2, #0
 8005af6:	69eb      	ldr	r3, [r5, #28]
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	1e3b      	subs	r3, r7, #0
 8005afc:	bfaf      	iteee	ge
 8005afe:	2300      	movge	r3, #0
 8005b00:	2201      	movlt	r2, #1
 8005b02:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005b06:	9305      	strlt	r3, [sp, #20]
 8005b08:	bfa8      	it	ge
 8005b0a:	f8c8 3000 	strge.w	r3, [r8]
 8005b0e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005b12:	4b9d      	ldr	r3, [pc, #628]	; (8005d88 <_dtoa_r+0x2e0>)
 8005b14:	bfb8      	it	lt
 8005b16:	f8c8 2000 	strlt.w	r2, [r8]
 8005b1a:	ea33 0309 	bics.w	r3, r3, r9
 8005b1e:	d119      	bne.n	8005b54 <_dtoa_r+0xac>
 8005b20:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b2c:	4333      	orrs	r3, r6
 8005b2e:	f000 8589 	beq.w	8006644 <_dtoa_r+0xb9c>
 8005b32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b34:	b953      	cbnz	r3, 8005b4c <_dtoa_r+0xa4>
 8005b36:	4b95      	ldr	r3, [pc, #596]	; (8005d8c <_dtoa_r+0x2e4>)
 8005b38:	e023      	b.n	8005b82 <_dtoa_r+0xda>
 8005b3a:	4b95      	ldr	r3, [pc, #596]	; (8005d90 <_dtoa_r+0x2e8>)
 8005b3c:	9303      	str	r3, [sp, #12]
 8005b3e:	3308      	adds	r3, #8
 8005b40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	9803      	ldr	r0, [sp, #12]
 8005b46:	b019      	add	sp, #100	; 0x64
 8005b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b4c:	4b8f      	ldr	r3, [pc, #572]	; (8005d8c <_dtoa_r+0x2e4>)
 8005b4e:	9303      	str	r3, [sp, #12]
 8005b50:	3303      	adds	r3, #3
 8005b52:	e7f5      	b.n	8005b40 <_dtoa_r+0x98>
 8005b54:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005b58:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005b5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b60:	2200      	movs	r2, #0
 8005b62:	2300      	movs	r3, #0
 8005b64:	f7fa ffd4 	bl	8000b10 <__aeabi_dcmpeq>
 8005b68:	4680      	mov	r8, r0
 8005b6a:	b160      	cbz	r0, 8005b86 <_dtoa_r+0xde>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005b70:	6013      	str	r3, [r2, #0]
 8005b72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8562 	beq.w	800663e <_dtoa_r+0xb96>
 8005b7a:	4b86      	ldr	r3, [pc, #536]	; (8005d94 <_dtoa_r+0x2ec>)
 8005b7c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	9303      	str	r3, [sp, #12]
 8005b84:	e7de      	b.n	8005b44 <_dtoa_r+0x9c>
 8005b86:	ab16      	add	r3, sp, #88	; 0x58
 8005b88:	9301      	str	r3, [sp, #4]
 8005b8a:	ab17      	add	r3, sp, #92	; 0x5c
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	4628      	mov	r0, r5
 8005b90:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005b94:	f001 fa3c 	bl	8007010 <__d2b>
 8005b98:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005b9c:	4682      	mov	sl, r0
 8005b9e:	2c00      	cmp	r4, #0
 8005ba0:	d07e      	beq.n	8005ca0 <_dtoa_r+0x1f8>
 8005ba2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ba6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ba8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bb0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005bb4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005bb8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	4b75      	ldr	r3, [pc, #468]	; (8005d98 <_dtoa_r+0x2f0>)
 8005bc2:	f7fa fb85 	bl	80002d0 <__aeabi_dsub>
 8005bc6:	a368      	add	r3, pc, #416	; (adr r3, 8005d68 <_dtoa_r+0x2c0>)
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	f7fa fd38 	bl	8000640 <__aeabi_dmul>
 8005bd0:	a367      	add	r3, pc, #412	; (adr r3, 8005d70 <_dtoa_r+0x2c8>)
 8005bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd6:	f7fa fb7d 	bl	80002d4 <__adddf3>
 8005bda:	4606      	mov	r6, r0
 8005bdc:	4620      	mov	r0, r4
 8005bde:	460f      	mov	r7, r1
 8005be0:	f7fa fcc4 	bl	800056c <__aeabi_i2d>
 8005be4:	a364      	add	r3, pc, #400	; (adr r3, 8005d78 <_dtoa_r+0x2d0>)
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	f7fa fd29 	bl	8000640 <__aeabi_dmul>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	4639      	mov	r1, r7
 8005bf6:	f7fa fb6d 	bl	80002d4 <__adddf3>
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	460f      	mov	r7, r1
 8005bfe:	f7fa ffcf 	bl	8000ba0 <__aeabi_d2iz>
 8005c02:	2200      	movs	r2, #0
 8005c04:	4683      	mov	fp, r0
 8005c06:	2300      	movs	r3, #0
 8005c08:	4630      	mov	r0, r6
 8005c0a:	4639      	mov	r1, r7
 8005c0c:	f7fa ff8a 	bl	8000b24 <__aeabi_dcmplt>
 8005c10:	b148      	cbz	r0, 8005c26 <_dtoa_r+0x17e>
 8005c12:	4658      	mov	r0, fp
 8005c14:	f7fa fcaa 	bl	800056c <__aeabi_i2d>
 8005c18:	4632      	mov	r2, r6
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	f7fa ff78 	bl	8000b10 <__aeabi_dcmpeq>
 8005c20:	b908      	cbnz	r0, 8005c26 <_dtoa_r+0x17e>
 8005c22:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005c26:	f1bb 0f16 	cmp.w	fp, #22
 8005c2a:	d857      	bhi.n	8005cdc <_dtoa_r+0x234>
 8005c2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c30:	4b5a      	ldr	r3, [pc, #360]	; (8005d9c <_dtoa_r+0x2f4>)
 8005c32:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3a:	f7fa ff73 	bl	8000b24 <__aeabi_dcmplt>
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	d04e      	beq.n	8005ce0 <_dtoa_r+0x238>
 8005c42:	2300      	movs	r3, #0
 8005c44:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005c48:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005c4c:	1b1b      	subs	r3, r3, r4
 8005c4e:	1e5a      	subs	r2, r3, #1
 8005c50:	bf46      	itte	mi
 8005c52:	f1c3 0901 	rsbmi	r9, r3, #1
 8005c56:	2300      	movmi	r3, #0
 8005c58:	f04f 0900 	movpl.w	r9, #0
 8005c5c:	9209      	str	r2, [sp, #36]	; 0x24
 8005c5e:	bf48      	it	mi
 8005c60:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005c62:	f1bb 0f00 	cmp.w	fp, #0
 8005c66:	db3d      	blt.n	8005ce4 <_dtoa_r+0x23c>
 8005c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c6a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005c6e:	445b      	add	r3, fp
 8005c70:	9309      	str	r3, [sp, #36]	; 0x24
 8005c72:	2300      	movs	r3, #0
 8005c74:	930a      	str	r3, [sp, #40]	; 0x28
 8005c76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c78:	2b09      	cmp	r3, #9
 8005c7a:	d867      	bhi.n	8005d4c <_dtoa_r+0x2a4>
 8005c7c:	2b05      	cmp	r3, #5
 8005c7e:	bfc4      	itt	gt
 8005c80:	3b04      	subgt	r3, #4
 8005c82:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005c84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c86:	bfc8      	it	gt
 8005c88:	2400      	movgt	r4, #0
 8005c8a:	f1a3 0302 	sub.w	r3, r3, #2
 8005c8e:	bfd8      	it	le
 8005c90:	2401      	movle	r4, #1
 8005c92:	2b03      	cmp	r3, #3
 8005c94:	f200 8086 	bhi.w	8005da4 <_dtoa_r+0x2fc>
 8005c98:	e8df f003 	tbb	[pc, r3]
 8005c9c:	5637392c 	.word	0x5637392c
 8005ca0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005ca4:	441c      	add	r4, r3
 8005ca6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005caa:	2b20      	cmp	r3, #32
 8005cac:	bfc1      	itttt	gt
 8005cae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005cb2:	fa09 f903 	lslgt.w	r9, r9, r3
 8005cb6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005cba:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005cbe:	bfd6      	itet	le
 8005cc0:	f1c3 0320 	rsble	r3, r3, #32
 8005cc4:	ea49 0003 	orrgt.w	r0, r9, r3
 8005cc8:	fa06 f003 	lslle.w	r0, r6, r3
 8005ccc:	f7fa fc3e 	bl	800054c <__aeabi_ui2d>
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005cd6:	3c01      	subs	r4, #1
 8005cd8:	9213      	str	r2, [sp, #76]	; 0x4c
 8005cda:	e76f      	b.n	8005bbc <_dtoa_r+0x114>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e7b3      	b.n	8005c48 <_dtoa_r+0x1a0>
 8005ce0:	900f      	str	r0, [sp, #60]	; 0x3c
 8005ce2:	e7b2      	b.n	8005c4a <_dtoa_r+0x1a2>
 8005ce4:	f1cb 0300 	rsb	r3, fp, #0
 8005ce8:	930a      	str	r3, [sp, #40]	; 0x28
 8005cea:	2300      	movs	r3, #0
 8005cec:	eba9 090b 	sub.w	r9, r9, fp
 8005cf0:	930e      	str	r3, [sp, #56]	; 0x38
 8005cf2:	e7c0      	b.n	8005c76 <_dtoa_r+0x1ce>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cf8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	dc55      	bgt.n	8005daa <_dtoa_r+0x302>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	461a      	mov	r2, r3
 8005d02:	9306      	str	r3, [sp, #24]
 8005d04:	9308      	str	r3, [sp, #32]
 8005d06:	9223      	str	r2, [sp, #140]	; 0x8c
 8005d08:	e00b      	b.n	8005d22 <_dtoa_r+0x27a>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e7f3      	b.n	8005cf6 <_dtoa_r+0x24e>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d14:	445b      	add	r3, fp
 8005d16:	9306      	str	r3, [sp, #24]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	9308      	str	r3, [sp, #32]
 8005d1e:	bfb8      	it	lt
 8005d20:	2301      	movlt	r3, #1
 8005d22:	2100      	movs	r1, #0
 8005d24:	2204      	movs	r2, #4
 8005d26:	69e8      	ldr	r0, [r5, #28]
 8005d28:	f102 0614 	add.w	r6, r2, #20
 8005d2c:	429e      	cmp	r6, r3
 8005d2e:	d940      	bls.n	8005db2 <_dtoa_r+0x30a>
 8005d30:	6041      	str	r1, [r0, #4]
 8005d32:	4628      	mov	r0, r5
 8005d34:	f000 fd98 	bl	8006868 <_Balloc>
 8005d38:	9003      	str	r0, [sp, #12]
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d13c      	bne.n	8005db8 <_dtoa_r+0x310>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	f240 11af 	movw	r1, #431	; 0x1af
 8005d44:	4b16      	ldr	r3, [pc, #88]	; (8005da0 <_dtoa_r+0x2f8>)
 8005d46:	e6c3      	b.n	8005ad0 <_dtoa_r+0x28>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e7e1      	b.n	8005d10 <_dtoa_r+0x268>
 8005d4c:	2401      	movs	r4, #1
 8005d4e:	2300      	movs	r3, #0
 8005d50:	940b      	str	r4, [sp, #44]	; 0x2c
 8005d52:	9322      	str	r3, [sp, #136]	; 0x88
 8005d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d58:	2200      	movs	r2, #0
 8005d5a:	9306      	str	r3, [sp, #24]
 8005d5c:	9308      	str	r3, [sp, #32]
 8005d5e:	2312      	movs	r3, #18
 8005d60:	e7d1      	b.n	8005d06 <_dtoa_r+0x25e>
 8005d62:	bf00      	nop
 8005d64:	f3af 8000 	nop.w
 8005d68:	636f4361 	.word	0x636f4361
 8005d6c:	3fd287a7 	.word	0x3fd287a7
 8005d70:	8b60c8b3 	.word	0x8b60c8b3
 8005d74:	3fc68a28 	.word	0x3fc68a28
 8005d78:	509f79fb 	.word	0x509f79fb
 8005d7c:	3fd34413 	.word	0x3fd34413
 8005d80:	0800a630 	.word	0x0800a630
 8005d84:	0800a647 	.word	0x0800a647
 8005d88:	7ff00000 	.word	0x7ff00000
 8005d8c:	0800a62c 	.word	0x0800a62c
 8005d90:	0800a623 	.word	0x0800a623
 8005d94:	0800a5fb 	.word	0x0800a5fb
 8005d98:	3ff80000 	.word	0x3ff80000
 8005d9c:	0800a738 	.word	0x0800a738
 8005da0:	0800a69f 	.word	0x0800a69f
 8005da4:	2301      	movs	r3, #1
 8005da6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005da8:	e7d4      	b.n	8005d54 <_dtoa_r+0x2ac>
 8005daa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005dac:	9306      	str	r3, [sp, #24]
 8005dae:	9308      	str	r3, [sp, #32]
 8005db0:	e7b7      	b.n	8005d22 <_dtoa_r+0x27a>
 8005db2:	3101      	adds	r1, #1
 8005db4:	0052      	lsls	r2, r2, #1
 8005db6:	e7b7      	b.n	8005d28 <_dtoa_r+0x280>
 8005db8:	69eb      	ldr	r3, [r5, #28]
 8005dba:	9a03      	ldr	r2, [sp, #12]
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	9b08      	ldr	r3, [sp, #32]
 8005dc0:	2b0e      	cmp	r3, #14
 8005dc2:	f200 80a8 	bhi.w	8005f16 <_dtoa_r+0x46e>
 8005dc6:	2c00      	cmp	r4, #0
 8005dc8:	f000 80a5 	beq.w	8005f16 <_dtoa_r+0x46e>
 8005dcc:	f1bb 0f00 	cmp.w	fp, #0
 8005dd0:	dd34      	ble.n	8005e3c <_dtoa_r+0x394>
 8005dd2:	4b9a      	ldr	r3, [pc, #616]	; (800603c <_dtoa_r+0x594>)
 8005dd4:	f00b 020f 	and.w	r2, fp, #15
 8005dd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ddc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005de0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005de4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005de8:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005dec:	d016      	beq.n	8005e1c <_dtoa_r+0x374>
 8005dee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005df2:	4b93      	ldr	r3, [pc, #588]	; (8006040 <_dtoa_r+0x598>)
 8005df4:	2703      	movs	r7, #3
 8005df6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005dfa:	f7fa fd4b 	bl	8000894 <__aeabi_ddiv>
 8005dfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e02:	f004 040f 	and.w	r4, r4, #15
 8005e06:	4e8e      	ldr	r6, [pc, #568]	; (8006040 <_dtoa_r+0x598>)
 8005e08:	b954      	cbnz	r4, 8005e20 <_dtoa_r+0x378>
 8005e0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e12:	f7fa fd3f 	bl	8000894 <__aeabi_ddiv>
 8005e16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e1a:	e029      	b.n	8005e70 <_dtoa_r+0x3c8>
 8005e1c:	2702      	movs	r7, #2
 8005e1e:	e7f2      	b.n	8005e06 <_dtoa_r+0x35e>
 8005e20:	07e1      	lsls	r1, r4, #31
 8005e22:	d508      	bpl.n	8005e36 <_dtoa_r+0x38e>
 8005e24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e28:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e2c:	f7fa fc08 	bl	8000640 <__aeabi_dmul>
 8005e30:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e34:	3701      	adds	r7, #1
 8005e36:	1064      	asrs	r4, r4, #1
 8005e38:	3608      	adds	r6, #8
 8005e3a:	e7e5      	b.n	8005e08 <_dtoa_r+0x360>
 8005e3c:	f000 80a5 	beq.w	8005f8a <_dtoa_r+0x4e2>
 8005e40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e44:	f1cb 0400 	rsb	r4, fp, #0
 8005e48:	4b7c      	ldr	r3, [pc, #496]	; (800603c <_dtoa_r+0x594>)
 8005e4a:	f004 020f 	and.w	r2, r4, #15
 8005e4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e56:	f7fa fbf3 	bl	8000640 <__aeabi_dmul>
 8005e5a:	2702      	movs	r7, #2
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e62:	4e77      	ldr	r6, [pc, #476]	; (8006040 <_dtoa_r+0x598>)
 8005e64:	1124      	asrs	r4, r4, #4
 8005e66:	2c00      	cmp	r4, #0
 8005e68:	f040 8084 	bne.w	8005f74 <_dtoa_r+0x4cc>
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1d2      	bne.n	8005e16 <_dtoa_r+0x36e>
 8005e70:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005e74:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005e78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 8087 	beq.w	8005f8e <_dtoa_r+0x4e6>
 8005e80:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e84:	2200      	movs	r2, #0
 8005e86:	4b6f      	ldr	r3, [pc, #444]	; (8006044 <_dtoa_r+0x59c>)
 8005e88:	f7fa fe4c 	bl	8000b24 <__aeabi_dcmplt>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	d07e      	beq.n	8005f8e <_dtoa_r+0x4e6>
 8005e90:	9b08      	ldr	r3, [sp, #32]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d07b      	beq.n	8005f8e <_dtoa_r+0x4e6>
 8005e96:	9b06      	ldr	r3, [sp, #24]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	dd38      	ble.n	8005f0e <_dtoa_r+0x466>
 8005e9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	4b69      	ldr	r3, [pc, #420]	; (8006048 <_dtoa_r+0x5a0>)
 8005ea4:	f7fa fbcc 	bl	8000640 <__aeabi_dmul>
 8005ea8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005eac:	9c06      	ldr	r4, [sp, #24]
 8005eae:	f10b 38ff 	add.w	r8, fp, #4294967295	; 0xffffffff
 8005eb2:	3701      	adds	r7, #1
 8005eb4:	4638      	mov	r0, r7
 8005eb6:	f7fa fb59 	bl	800056c <__aeabi_i2d>
 8005eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ebe:	f7fa fbbf 	bl	8000640 <__aeabi_dmul>
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	4b61      	ldr	r3, [pc, #388]	; (800604c <_dtoa_r+0x5a4>)
 8005ec6:	f7fa fa05 	bl	80002d4 <__adddf3>
 8005eca:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005ece:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ed2:	9611      	str	r6, [sp, #68]	; 0x44
 8005ed4:	2c00      	cmp	r4, #0
 8005ed6:	d15d      	bne.n	8005f94 <_dtoa_r+0x4ec>
 8005ed8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005edc:	2200      	movs	r2, #0
 8005ede:	4b5c      	ldr	r3, [pc, #368]	; (8006050 <_dtoa_r+0x5a8>)
 8005ee0:	f7fa f9f6 	bl	80002d0 <__aeabi_dsub>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005eec:	4633      	mov	r3, r6
 8005eee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ef0:	f7fa fe36 	bl	8000b60 <__aeabi_dcmpgt>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	f040 8295 	bne.w	8006424 <_dtoa_r+0x97c>
 8005efa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005efe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f00:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005f04:	f7fa fe0e 	bl	8000b24 <__aeabi_dcmplt>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	f040 8289 	bne.w	8006420 <_dtoa_r+0x978>
 8005f0e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005f12:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f2c0 8151 	blt.w	80061c0 <_dtoa_r+0x718>
 8005f1e:	f1bb 0f0e 	cmp.w	fp, #14
 8005f22:	f300 814d 	bgt.w	80061c0 <_dtoa_r+0x718>
 8005f26:	4b45      	ldr	r3, [pc, #276]	; (800603c <_dtoa_r+0x594>)
 8005f28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005f2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f30:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005f34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f280 80da 	bge.w	80060f0 <_dtoa_r+0x648>
 8005f3c:	9b08      	ldr	r3, [sp, #32]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f300 80d6 	bgt.w	80060f0 <_dtoa_r+0x648>
 8005f44:	f040 826b 	bne.w	800641e <_dtoa_r+0x976>
 8005f48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	4b40      	ldr	r3, [pc, #256]	; (8006050 <_dtoa_r+0x5a8>)
 8005f50:	f7fa fb76 	bl	8000640 <__aeabi_dmul>
 8005f54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f58:	f7fa fdf8 	bl	8000b4c <__aeabi_dcmpge>
 8005f5c:	9c08      	ldr	r4, [sp, #32]
 8005f5e:	4626      	mov	r6, r4
 8005f60:	2800      	cmp	r0, #0
 8005f62:	f040 8241 	bne.w	80063e8 <_dtoa_r+0x940>
 8005f66:	2331      	movs	r3, #49	; 0x31
 8005f68:	9f03      	ldr	r7, [sp, #12]
 8005f6a:	f10b 0b01 	add.w	fp, fp, #1
 8005f6e:	f807 3b01 	strb.w	r3, [r7], #1
 8005f72:	e23d      	b.n	80063f0 <_dtoa_r+0x948>
 8005f74:	07e2      	lsls	r2, r4, #31
 8005f76:	d505      	bpl.n	8005f84 <_dtoa_r+0x4dc>
 8005f78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f7c:	f7fa fb60 	bl	8000640 <__aeabi_dmul>
 8005f80:	2301      	movs	r3, #1
 8005f82:	3701      	adds	r7, #1
 8005f84:	1064      	asrs	r4, r4, #1
 8005f86:	3608      	adds	r6, #8
 8005f88:	e76d      	b.n	8005e66 <_dtoa_r+0x3be>
 8005f8a:	2702      	movs	r7, #2
 8005f8c:	e770      	b.n	8005e70 <_dtoa_r+0x3c8>
 8005f8e:	46d8      	mov	r8, fp
 8005f90:	9c08      	ldr	r4, [sp, #32]
 8005f92:	e78f      	b.n	8005eb4 <_dtoa_r+0x40c>
 8005f94:	9903      	ldr	r1, [sp, #12]
 8005f96:	4b29      	ldr	r3, [pc, #164]	; (800603c <_dtoa_r+0x594>)
 8005f98:	4421      	add	r1, r4
 8005f9a:	9112      	str	r1, [sp, #72]	; 0x48
 8005f9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f9e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005fa2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005fa6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005faa:	2900      	cmp	r1, #0
 8005fac:	d054      	beq.n	8006058 <_dtoa_r+0x5b0>
 8005fae:	2000      	movs	r0, #0
 8005fb0:	4928      	ldr	r1, [pc, #160]	; (8006054 <_dtoa_r+0x5ac>)
 8005fb2:	f7fa fc6f 	bl	8000894 <__aeabi_ddiv>
 8005fb6:	463b      	mov	r3, r7
 8005fb8:	4632      	mov	r2, r6
 8005fba:	f7fa f989 	bl	80002d0 <__aeabi_dsub>
 8005fbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fc2:	9f03      	ldr	r7, [sp, #12]
 8005fc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fc8:	f7fa fdea 	bl	8000ba0 <__aeabi_d2iz>
 8005fcc:	4604      	mov	r4, r0
 8005fce:	f7fa facd 	bl	800056c <__aeabi_i2d>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fda:	f7fa f979 	bl	80002d0 <__aeabi_dsub>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	3430      	adds	r4, #48	; 0x30
 8005fe4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005fe8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005fec:	f807 4b01 	strb.w	r4, [r7], #1
 8005ff0:	f7fa fd98 	bl	8000b24 <__aeabi_dcmplt>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d173      	bne.n	80060e0 <_dtoa_r+0x638>
 8005ff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ffc:	2000      	movs	r0, #0
 8005ffe:	4911      	ldr	r1, [pc, #68]	; (8006044 <_dtoa_r+0x59c>)
 8006000:	f7fa f966 	bl	80002d0 <__aeabi_dsub>
 8006004:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006008:	f7fa fd8c 	bl	8000b24 <__aeabi_dcmplt>
 800600c:	2800      	cmp	r0, #0
 800600e:	f040 80b6 	bne.w	800617e <_dtoa_r+0x6d6>
 8006012:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006014:	429f      	cmp	r7, r3
 8006016:	f43f af7a 	beq.w	8005f0e <_dtoa_r+0x466>
 800601a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800601e:	2200      	movs	r2, #0
 8006020:	4b09      	ldr	r3, [pc, #36]	; (8006048 <_dtoa_r+0x5a0>)
 8006022:	f7fa fb0d 	bl	8000640 <__aeabi_dmul>
 8006026:	2200      	movs	r2, #0
 8006028:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800602c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006030:	4b05      	ldr	r3, [pc, #20]	; (8006048 <_dtoa_r+0x5a0>)
 8006032:	f7fa fb05 	bl	8000640 <__aeabi_dmul>
 8006036:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800603a:	e7c3      	b.n	8005fc4 <_dtoa_r+0x51c>
 800603c:	0800a738 	.word	0x0800a738
 8006040:	0800a710 	.word	0x0800a710
 8006044:	3ff00000 	.word	0x3ff00000
 8006048:	40240000 	.word	0x40240000
 800604c:	401c0000 	.word	0x401c0000
 8006050:	40140000 	.word	0x40140000
 8006054:	3fe00000 	.word	0x3fe00000
 8006058:	4630      	mov	r0, r6
 800605a:	4639      	mov	r1, r7
 800605c:	f7fa faf0 	bl	8000640 <__aeabi_dmul>
 8006060:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006062:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006066:	9c03      	ldr	r4, [sp, #12]
 8006068:	9314      	str	r3, [sp, #80]	; 0x50
 800606a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800606e:	f7fa fd97 	bl	8000ba0 <__aeabi_d2iz>
 8006072:	9015      	str	r0, [sp, #84]	; 0x54
 8006074:	f7fa fa7a 	bl	800056c <__aeabi_i2d>
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006080:	f7fa f926 	bl	80002d0 <__aeabi_dsub>
 8006084:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006086:	4606      	mov	r6, r0
 8006088:	3330      	adds	r3, #48	; 0x30
 800608a:	f804 3b01 	strb.w	r3, [r4], #1
 800608e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006090:	460f      	mov	r7, r1
 8006092:	429c      	cmp	r4, r3
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	d124      	bne.n	80060e4 <_dtoa_r+0x63c>
 800609a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800609e:	4baf      	ldr	r3, [pc, #700]	; (800635c <_dtoa_r+0x8b4>)
 80060a0:	f7fa f918 	bl	80002d4 <__adddf3>
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4630      	mov	r0, r6
 80060aa:	4639      	mov	r1, r7
 80060ac:	f7fa fd58 	bl	8000b60 <__aeabi_dcmpgt>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d163      	bne.n	800617c <_dtoa_r+0x6d4>
 80060b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060b8:	2000      	movs	r0, #0
 80060ba:	49a8      	ldr	r1, [pc, #672]	; (800635c <_dtoa_r+0x8b4>)
 80060bc:	f7fa f908 	bl	80002d0 <__aeabi_dsub>
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	4630      	mov	r0, r6
 80060c6:	4639      	mov	r1, r7
 80060c8:	f7fa fd2c 	bl	8000b24 <__aeabi_dcmplt>
 80060cc:	2800      	cmp	r0, #0
 80060ce:	f43f af1e 	beq.w	8005f0e <_dtoa_r+0x466>
 80060d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80060d4:	1e7b      	subs	r3, r7, #1
 80060d6:	9314      	str	r3, [sp, #80]	; 0x50
 80060d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80060dc:	2b30      	cmp	r3, #48	; 0x30
 80060de:	d0f8      	beq.n	80060d2 <_dtoa_r+0x62a>
 80060e0:	46c3      	mov	fp, r8
 80060e2:	e03b      	b.n	800615c <_dtoa_r+0x6b4>
 80060e4:	4b9e      	ldr	r3, [pc, #632]	; (8006360 <_dtoa_r+0x8b8>)
 80060e6:	f7fa faab 	bl	8000640 <__aeabi_dmul>
 80060ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060ee:	e7bc      	b.n	800606a <_dtoa_r+0x5c2>
 80060f0:	9f03      	ldr	r7, [sp, #12]
 80060f2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80060f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060fa:	4640      	mov	r0, r8
 80060fc:	4649      	mov	r1, r9
 80060fe:	f7fa fbc9 	bl	8000894 <__aeabi_ddiv>
 8006102:	f7fa fd4d 	bl	8000ba0 <__aeabi_d2iz>
 8006106:	4604      	mov	r4, r0
 8006108:	f7fa fa30 	bl	800056c <__aeabi_i2d>
 800610c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006110:	f7fa fa96 	bl	8000640 <__aeabi_dmul>
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	4640      	mov	r0, r8
 800611a:	4649      	mov	r1, r9
 800611c:	f7fa f8d8 	bl	80002d0 <__aeabi_dsub>
 8006120:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006124:	f807 6b01 	strb.w	r6, [r7], #1
 8006128:	9e03      	ldr	r6, [sp, #12]
 800612a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800612e:	1bbe      	subs	r6, r7, r6
 8006130:	45b4      	cmp	ip, r6
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	d136      	bne.n	80061a6 <_dtoa_r+0x6fe>
 8006138:	f7fa f8cc 	bl	80002d4 <__adddf3>
 800613c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006140:	4680      	mov	r8, r0
 8006142:	4689      	mov	r9, r1
 8006144:	f7fa fd0c 	bl	8000b60 <__aeabi_dcmpgt>
 8006148:	bb58      	cbnz	r0, 80061a2 <_dtoa_r+0x6fa>
 800614a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800614e:	4640      	mov	r0, r8
 8006150:	4649      	mov	r1, r9
 8006152:	f7fa fcdd 	bl	8000b10 <__aeabi_dcmpeq>
 8006156:	b108      	cbz	r0, 800615c <_dtoa_r+0x6b4>
 8006158:	07e3      	lsls	r3, r4, #31
 800615a:	d422      	bmi.n	80061a2 <_dtoa_r+0x6fa>
 800615c:	4651      	mov	r1, sl
 800615e:	4628      	mov	r0, r5
 8006160:	f000 fbc2 	bl	80068e8 <_Bfree>
 8006164:	2300      	movs	r3, #0
 8006166:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006168:	703b      	strb	r3, [r7, #0]
 800616a:	f10b 0301 	add.w	r3, fp, #1
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006172:	2b00      	cmp	r3, #0
 8006174:	f43f ace6 	beq.w	8005b44 <_dtoa_r+0x9c>
 8006178:	601f      	str	r7, [r3, #0]
 800617a:	e4e3      	b.n	8005b44 <_dtoa_r+0x9c>
 800617c:	4627      	mov	r7, r4
 800617e:	463b      	mov	r3, r7
 8006180:	461f      	mov	r7, r3
 8006182:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006186:	2a39      	cmp	r2, #57	; 0x39
 8006188:	d107      	bne.n	800619a <_dtoa_r+0x6f2>
 800618a:	9a03      	ldr	r2, [sp, #12]
 800618c:	429a      	cmp	r2, r3
 800618e:	d1f7      	bne.n	8006180 <_dtoa_r+0x6d8>
 8006190:	2230      	movs	r2, #48	; 0x30
 8006192:	9903      	ldr	r1, [sp, #12]
 8006194:	f108 0801 	add.w	r8, r8, #1
 8006198:	700a      	strb	r2, [r1, #0]
 800619a:	781a      	ldrb	r2, [r3, #0]
 800619c:	3201      	adds	r2, #1
 800619e:	701a      	strb	r2, [r3, #0]
 80061a0:	e79e      	b.n	80060e0 <_dtoa_r+0x638>
 80061a2:	46d8      	mov	r8, fp
 80061a4:	e7eb      	b.n	800617e <_dtoa_r+0x6d6>
 80061a6:	2200      	movs	r2, #0
 80061a8:	4b6d      	ldr	r3, [pc, #436]	; (8006360 <_dtoa_r+0x8b8>)
 80061aa:	f7fa fa49 	bl	8000640 <__aeabi_dmul>
 80061ae:	2200      	movs	r2, #0
 80061b0:	2300      	movs	r3, #0
 80061b2:	4680      	mov	r8, r0
 80061b4:	4689      	mov	r9, r1
 80061b6:	f7fa fcab 	bl	8000b10 <__aeabi_dcmpeq>
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d09b      	beq.n	80060f6 <_dtoa_r+0x64e>
 80061be:	e7cd      	b.n	800615c <_dtoa_r+0x6b4>
 80061c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061c2:	2a00      	cmp	r2, #0
 80061c4:	f000 80c4 	beq.w	8006350 <_dtoa_r+0x8a8>
 80061c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80061ca:	2a01      	cmp	r2, #1
 80061cc:	f300 80a8 	bgt.w	8006320 <_dtoa_r+0x878>
 80061d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80061d2:	2a00      	cmp	r2, #0
 80061d4:	f000 80a0 	beq.w	8006318 <_dtoa_r+0x870>
 80061d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061dc:	464f      	mov	r7, r9
 80061de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80061e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061e2:	2101      	movs	r1, #1
 80061e4:	441a      	add	r2, r3
 80061e6:	4628      	mov	r0, r5
 80061e8:	4499      	add	r9, r3
 80061ea:	9209      	str	r2, [sp, #36]	; 0x24
 80061ec:	f000 fc7c 	bl	8006ae8 <__i2b>
 80061f0:	4606      	mov	r6, r0
 80061f2:	b15f      	cbz	r7, 800620c <_dtoa_r+0x764>
 80061f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	dd08      	ble.n	800620c <_dtoa_r+0x764>
 80061fa:	42bb      	cmp	r3, r7
 80061fc:	bfa8      	it	ge
 80061fe:	463b      	movge	r3, r7
 8006200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006202:	eba9 0903 	sub.w	r9, r9, r3
 8006206:	1aff      	subs	r7, r7, r3
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	9309      	str	r3, [sp, #36]	; 0x24
 800620c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800620e:	b1f3      	cbz	r3, 800624e <_dtoa_r+0x7a6>
 8006210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 80a0 	beq.w	8006358 <_dtoa_r+0x8b0>
 8006218:	2c00      	cmp	r4, #0
 800621a:	dd10      	ble.n	800623e <_dtoa_r+0x796>
 800621c:	4631      	mov	r1, r6
 800621e:	4622      	mov	r2, r4
 8006220:	4628      	mov	r0, r5
 8006222:	f000 fd1f 	bl	8006c64 <__pow5mult>
 8006226:	4652      	mov	r2, sl
 8006228:	4601      	mov	r1, r0
 800622a:	4606      	mov	r6, r0
 800622c:	4628      	mov	r0, r5
 800622e:	f000 fc71 	bl	8006b14 <__multiply>
 8006232:	4680      	mov	r8, r0
 8006234:	4651      	mov	r1, sl
 8006236:	4628      	mov	r0, r5
 8006238:	f000 fb56 	bl	80068e8 <_Bfree>
 800623c:	46c2      	mov	sl, r8
 800623e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006240:	1b1a      	subs	r2, r3, r4
 8006242:	d004      	beq.n	800624e <_dtoa_r+0x7a6>
 8006244:	4651      	mov	r1, sl
 8006246:	4628      	mov	r0, r5
 8006248:	f000 fd0c 	bl	8006c64 <__pow5mult>
 800624c:	4682      	mov	sl, r0
 800624e:	2101      	movs	r1, #1
 8006250:	4628      	mov	r0, r5
 8006252:	f000 fc49 	bl	8006ae8 <__i2b>
 8006256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006258:	4604      	mov	r4, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	f340 8082 	ble.w	8006364 <_dtoa_r+0x8bc>
 8006260:	461a      	mov	r2, r3
 8006262:	4601      	mov	r1, r0
 8006264:	4628      	mov	r0, r5
 8006266:	f000 fcfd 	bl	8006c64 <__pow5mult>
 800626a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800626c:	4604      	mov	r4, r0
 800626e:	2b01      	cmp	r3, #1
 8006270:	dd7b      	ble.n	800636a <_dtoa_r+0x8c2>
 8006272:	f04f 0800 	mov.w	r8, #0
 8006276:	6923      	ldr	r3, [r4, #16]
 8006278:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800627c:	6918      	ldr	r0, [r3, #16]
 800627e:	f000 fbe5 	bl	8006a4c <__hi0bits>
 8006282:	f1c0 0020 	rsb	r0, r0, #32
 8006286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006288:	4418      	add	r0, r3
 800628a:	f010 001f 	ands.w	r0, r0, #31
 800628e:	f000 8092 	beq.w	80063b6 <_dtoa_r+0x90e>
 8006292:	f1c0 0320 	rsb	r3, r0, #32
 8006296:	2b04      	cmp	r3, #4
 8006298:	f340 8085 	ble.w	80063a6 <_dtoa_r+0x8fe>
 800629c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800629e:	f1c0 001c 	rsb	r0, r0, #28
 80062a2:	4403      	add	r3, r0
 80062a4:	4481      	add	r9, r0
 80062a6:	4407      	add	r7, r0
 80062a8:	9309      	str	r3, [sp, #36]	; 0x24
 80062aa:	f1b9 0f00 	cmp.w	r9, #0
 80062ae:	dd05      	ble.n	80062bc <_dtoa_r+0x814>
 80062b0:	4651      	mov	r1, sl
 80062b2:	464a      	mov	r2, r9
 80062b4:	4628      	mov	r0, r5
 80062b6:	f000 fd2f 	bl	8006d18 <__lshift>
 80062ba:	4682      	mov	sl, r0
 80062bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062be:	2b00      	cmp	r3, #0
 80062c0:	dd05      	ble.n	80062ce <_dtoa_r+0x826>
 80062c2:	4621      	mov	r1, r4
 80062c4:	461a      	mov	r2, r3
 80062c6:	4628      	mov	r0, r5
 80062c8:	f000 fd26 	bl	8006d18 <__lshift>
 80062cc:	4604      	mov	r4, r0
 80062ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d072      	beq.n	80063ba <_dtoa_r+0x912>
 80062d4:	4621      	mov	r1, r4
 80062d6:	4650      	mov	r0, sl
 80062d8:	f000 fd8a 	bl	8006df0 <__mcmp>
 80062dc:	2800      	cmp	r0, #0
 80062de:	da6c      	bge.n	80063ba <_dtoa_r+0x912>
 80062e0:	2300      	movs	r3, #0
 80062e2:	4651      	mov	r1, sl
 80062e4:	220a      	movs	r2, #10
 80062e6:	4628      	mov	r0, r5
 80062e8:	f000 fb20 	bl	800692c <__multadd>
 80062ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062ee:	4682      	mov	sl, r0
 80062f0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 81ac 	beq.w	8006652 <_dtoa_r+0xbaa>
 80062fa:	2300      	movs	r3, #0
 80062fc:	4631      	mov	r1, r6
 80062fe:	220a      	movs	r2, #10
 8006300:	4628      	mov	r0, r5
 8006302:	f000 fb13 	bl	800692c <__multadd>
 8006306:	9b06      	ldr	r3, [sp, #24]
 8006308:	4606      	mov	r6, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	f300 8093 	bgt.w	8006436 <_dtoa_r+0x98e>
 8006310:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006312:	2b02      	cmp	r3, #2
 8006314:	dc59      	bgt.n	80063ca <_dtoa_r+0x922>
 8006316:	e08e      	b.n	8006436 <_dtoa_r+0x98e>
 8006318:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800631a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800631e:	e75d      	b.n	80061dc <_dtoa_r+0x734>
 8006320:	9b08      	ldr	r3, [sp, #32]
 8006322:	1e5c      	subs	r4, r3, #1
 8006324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006326:	42a3      	cmp	r3, r4
 8006328:	bfbf      	itttt	lt
 800632a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800632c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800632e:	1ae3      	sublt	r3, r4, r3
 8006330:	18d2      	addlt	r2, r2, r3
 8006332:	bfa8      	it	ge
 8006334:	1b1c      	subge	r4, r3, r4
 8006336:	9b08      	ldr	r3, [sp, #32]
 8006338:	bfbe      	ittt	lt
 800633a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800633c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800633e:	2400      	movlt	r4, #0
 8006340:	2b00      	cmp	r3, #0
 8006342:	bfb5      	itete	lt
 8006344:	eba9 0703 	sublt.w	r7, r9, r3
 8006348:	464f      	movge	r7, r9
 800634a:	2300      	movlt	r3, #0
 800634c:	9b08      	ldrge	r3, [sp, #32]
 800634e:	e747      	b.n	80061e0 <_dtoa_r+0x738>
 8006350:	464f      	mov	r7, r9
 8006352:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006354:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006356:	e74c      	b.n	80061f2 <_dtoa_r+0x74a>
 8006358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800635a:	e773      	b.n	8006244 <_dtoa_r+0x79c>
 800635c:	3fe00000 	.word	0x3fe00000
 8006360:	40240000 	.word	0x40240000
 8006364:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006366:	2b01      	cmp	r3, #1
 8006368:	dc18      	bgt.n	800639c <_dtoa_r+0x8f4>
 800636a:	9b04      	ldr	r3, [sp, #16]
 800636c:	b9b3      	cbnz	r3, 800639c <_dtoa_r+0x8f4>
 800636e:	9b05      	ldr	r3, [sp, #20]
 8006370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006374:	b993      	cbnz	r3, 800639c <_dtoa_r+0x8f4>
 8006376:	9b05      	ldr	r3, [sp, #20]
 8006378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800637c:	0d1b      	lsrs	r3, r3, #20
 800637e:	051b      	lsls	r3, r3, #20
 8006380:	b17b      	cbz	r3, 80063a2 <_dtoa_r+0x8fa>
 8006382:	f04f 0801 	mov.w	r8, #1
 8006386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006388:	f109 0901 	add.w	r9, r9, #1
 800638c:	3301      	adds	r3, #1
 800638e:	9309      	str	r3, [sp, #36]	; 0x24
 8006390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006392:	2b00      	cmp	r3, #0
 8006394:	f47f af6f 	bne.w	8006276 <_dtoa_r+0x7ce>
 8006398:	2001      	movs	r0, #1
 800639a:	e774      	b.n	8006286 <_dtoa_r+0x7de>
 800639c:	f04f 0800 	mov.w	r8, #0
 80063a0:	e7f6      	b.n	8006390 <_dtoa_r+0x8e8>
 80063a2:	4698      	mov	r8, r3
 80063a4:	e7f4      	b.n	8006390 <_dtoa_r+0x8e8>
 80063a6:	d080      	beq.n	80062aa <_dtoa_r+0x802>
 80063a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063aa:	331c      	adds	r3, #28
 80063ac:	441a      	add	r2, r3
 80063ae:	4499      	add	r9, r3
 80063b0:	441f      	add	r7, r3
 80063b2:	9209      	str	r2, [sp, #36]	; 0x24
 80063b4:	e779      	b.n	80062aa <_dtoa_r+0x802>
 80063b6:	4603      	mov	r3, r0
 80063b8:	e7f6      	b.n	80063a8 <_dtoa_r+0x900>
 80063ba:	9b08      	ldr	r3, [sp, #32]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	dc34      	bgt.n	800642a <_dtoa_r+0x982>
 80063c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	dd31      	ble.n	800642a <_dtoa_r+0x982>
 80063c6:	9b08      	ldr	r3, [sp, #32]
 80063c8:	9306      	str	r3, [sp, #24]
 80063ca:	9b06      	ldr	r3, [sp, #24]
 80063cc:	b963      	cbnz	r3, 80063e8 <_dtoa_r+0x940>
 80063ce:	4621      	mov	r1, r4
 80063d0:	2205      	movs	r2, #5
 80063d2:	4628      	mov	r0, r5
 80063d4:	f000 faaa 	bl	800692c <__multadd>
 80063d8:	4601      	mov	r1, r0
 80063da:	4604      	mov	r4, r0
 80063dc:	4650      	mov	r0, sl
 80063de:	f000 fd07 	bl	8006df0 <__mcmp>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	f73f adbf 	bgt.w	8005f66 <_dtoa_r+0x4be>
 80063e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063ea:	9f03      	ldr	r7, [sp, #12]
 80063ec:	ea6f 0b03 	mvn.w	fp, r3
 80063f0:	f04f 0800 	mov.w	r8, #0
 80063f4:	4621      	mov	r1, r4
 80063f6:	4628      	mov	r0, r5
 80063f8:	f000 fa76 	bl	80068e8 <_Bfree>
 80063fc:	2e00      	cmp	r6, #0
 80063fe:	f43f aead 	beq.w	800615c <_dtoa_r+0x6b4>
 8006402:	f1b8 0f00 	cmp.w	r8, #0
 8006406:	d005      	beq.n	8006414 <_dtoa_r+0x96c>
 8006408:	45b0      	cmp	r8, r6
 800640a:	d003      	beq.n	8006414 <_dtoa_r+0x96c>
 800640c:	4641      	mov	r1, r8
 800640e:	4628      	mov	r0, r5
 8006410:	f000 fa6a 	bl	80068e8 <_Bfree>
 8006414:	4631      	mov	r1, r6
 8006416:	4628      	mov	r0, r5
 8006418:	f000 fa66 	bl	80068e8 <_Bfree>
 800641c:	e69e      	b.n	800615c <_dtoa_r+0x6b4>
 800641e:	2400      	movs	r4, #0
 8006420:	4626      	mov	r6, r4
 8006422:	e7e1      	b.n	80063e8 <_dtoa_r+0x940>
 8006424:	46c3      	mov	fp, r8
 8006426:	4626      	mov	r6, r4
 8006428:	e59d      	b.n	8005f66 <_dtoa_r+0x4be>
 800642a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 80c8 	beq.w	80065c2 <_dtoa_r+0xb1a>
 8006432:	9b08      	ldr	r3, [sp, #32]
 8006434:	9306      	str	r3, [sp, #24]
 8006436:	2f00      	cmp	r7, #0
 8006438:	dd05      	ble.n	8006446 <_dtoa_r+0x99e>
 800643a:	4631      	mov	r1, r6
 800643c:	463a      	mov	r2, r7
 800643e:	4628      	mov	r0, r5
 8006440:	f000 fc6a 	bl	8006d18 <__lshift>
 8006444:	4606      	mov	r6, r0
 8006446:	f1b8 0f00 	cmp.w	r8, #0
 800644a:	d05b      	beq.n	8006504 <_dtoa_r+0xa5c>
 800644c:	4628      	mov	r0, r5
 800644e:	6871      	ldr	r1, [r6, #4]
 8006450:	f000 fa0a 	bl	8006868 <_Balloc>
 8006454:	4607      	mov	r7, r0
 8006456:	b928      	cbnz	r0, 8006464 <_dtoa_r+0x9bc>
 8006458:	4602      	mov	r2, r0
 800645a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800645e:	4b81      	ldr	r3, [pc, #516]	; (8006664 <_dtoa_r+0xbbc>)
 8006460:	f7ff bb36 	b.w	8005ad0 <_dtoa_r+0x28>
 8006464:	6932      	ldr	r2, [r6, #16]
 8006466:	f106 010c 	add.w	r1, r6, #12
 800646a:	3202      	adds	r2, #2
 800646c:	0092      	lsls	r2, r2, #2
 800646e:	300c      	adds	r0, #12
 8006470:	f001 ff72 	bl	8008358 <memcpy>
 8006474:	2201      	movs	r2, #1
 8006476:	4639      	mov	r1, r7
 8006478:	4628      	mov	r0, r5
 800647a:	f000 fc4d 	bl	8006d18 <__lshift>
 800647e:	46b0      	mov	r8, r6
 8006480:	4606      	mov	r6, r0
 8006482:	9b03      	ldr	r3, [sp, #12]
 8006484:	9a03      	ldr	r2, [sp, #12]
 8006486:	3301      	adds	r3, #1
 8006488:	9308      	str	r3, [sp, #32]
 800648a:	9b06      	ldr	r3, [sp, #24]
 800648c:	4413      	add	r3, r2
 800648e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006490:	9b04      	ldr	r3, [sp, #16]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	930a      	str	r3, [sp, #40]	; 0x28
 8006498:	9b08      	ldr	r3, [sp, #32]
 800649a:	4621      	mov	r1, r4
 800649c:	3b01      	subs	r3, #1
 800649e:	4650      	mov	r0, sl
 80064a0:	9304      	str	r3, [sp, #16]
 80064a2:	f7ff fa77 	bl	8005994 <quorem>
 80064a6:	4641      	mov	r1, r8
 80064a8:	9006      	str	r0, [sp, #24]
 80064aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80064ae:	4650      	mov	r0, sl
 80064b0:	f000 fc9e 	bl	8006df0 <__mcmp>
 80064b4:	4632      	mov	r2, r6
 80064b6:	9009      	str	r0, [sp, #36]	; 0x24
 80064b8:	4621      	mov	r1, r4
 80064ba:	4628      	mov	r0, r5
 80064bc:	f000 fcb4 	bl	8006e28 <__mdiff>
 80064c0:	68c2      	ldr	r2, [r0, #12]
 80064c2:	4607      	mov	r7, r0
 80064c4:	bb02      	cbnz	r2, 8006508 <_dtoa_r+0xa60>
 80064c6:	4601      	mov	r1, r0
 80064c8:	4650      	mov	r0, sl
 80064ca:	f000 fc91 	bl	8006df0 <__mcmp>
 80064ce:	4602      	mov	r2, r0
 80064d0:	4639      	mov	r1, r7
 80064d2:	4628      	mov	r0, r5
 80064d4:	920c      	str	r2, [sp, #48]	; 0x30
 80064d6:	f000 fa07 	bl	80068e8 <_Bfree>
 80064da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064de:	9f08      	ldr	r7, [sp, #32]
 80064e0:	ea43 0102 	orr.w	r1, r3, r2
 80064e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064e6:	4319      	orrs	r1, r3
 80064e8:	d110      	bne.n	800650c <_dtoa_r+0xa64>
 80064ea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064ee:	d029      	beq.n	8006544 <_dtoa_r+0xa9c>
 80064f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	dd02      	ble.n	80064fc <_dtoa_r+0xa54>
 80064f6:	9b06      	ldr	r3, [sp, #24]
 80064f8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80064fc:	9b04      	ldr	r3, [sp, #16]
 80064fe:	f883 9000 	strb.w	r9, [r3]
 8006502:	e777      	b.n	80063f4 <_dtoa_r+0x94c>
 8006504:	4630      	mov	r0, r6
 8006506:	e7ba      	b.n	800647e <_dtoa_r+0x9d6>
 8006508:	2201      	movs	r2, #1
 800650a:	e7e1      	b.n	80064d0 <_dtoa_r+0xa28>
 800650c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650e:	2b00      	cmp	r3, #0
 8006510:	db04      	blt.n	800651c <_dtoa_r+0xa74>
 8006512:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006514:	430b      	orrs	r3, r1
 8006516:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006518:	430b      	orrs	r3, r1
 800651a:	d120      	bne.n	800655e <_dtoa_r+0xab6>
 800651c:	2a00      	cmp	r2, #0
 800651e:	dded      	ble.n	80064fc <_dtoa_r+0xa54>
 8006520:	4651      	mov	r1, sl
 8006522:	2201      	movs	r2, #1
 8006524:	4628      	mov	r0, r5
 8006526:	f000 fbf7 	bl	8006d18 <__lshift>
 800652a:	4621      	mov	r1, r4
 800652c:	4682      	mov	sl, r0
 800652e:	f000 fc5f 	bl	8006df0 <__mcmp>
 8006532:	2800      	cmp	r0, #0
 8006534:	dc03      	bgt.n	800653e <_dtoa_r+0xa96>
 8006536:	d1e1      	bne.n	80064fc <_dtoa_r+0xa54>
 8006538:	f019 0f01 	tst.w	r9, #1
 800653c:	d0de      	beq.n	80064fc <_dtoa_r+0xa54>
 800653e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006542:	d1d8      	bne.n	80064f6 <_dtoa_r+0xa4e>
 8006544:	2339      	movs	r3, #57	; 0x39
 8006546:	9a04      	ldr	r2, [sp, #16]
 8006548:	7013      	strb	r3, [r2, #0]
 800654a:	463b      	mov	r3, r7
 800654c:	461f      	mov	r7, r3
 800654e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006552:	3b01      	subs	r3, #1
 8006554:	2a39      	cmp	r2, #57	; 0x39
 8006556:	d06b      	beq.n	8006630 <_dtoa_r+0xb88>
 8006558:	3201      	adds	r2, #1
 800655a:	701a      	strb	r2, [r3, #0]
 800655c:	e74a      	b.n	80063f4 <_dtoa_r+0x94c>
 800655e:	2a00      	cmp	r2, #0
 8006560:	dd07      	ble.n	8006572 <_dtoa_r+0xaca>
 8006562:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006566:	d0ed      	beq.n	8006544 <_dtoa_r+0xa9c>
 8006568:	9a04      	ldr	r2, [sp, #16]
 800656a:	f109 0301 	add.w	r3, r9, #1
 800656e:	7013      	strb	r3, [r2, #0]
 8006570:	e740      	b.n	80063f4 <_dtoa_r+0x94c>
 8006572:	9b08      	ldr	r3, [sp, #32]
 8006574:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006576:	f803 9c01 	strb.w	r9, [r3, #-1]
 800657a:	4293      	cmp	r3, r2
 800657c:	d042      	beq.n	8006604 <_dtoa_r+0xb5c>
 800657e:	4651      	mov	r1, sl
 8006580:	2300      	movs	r3, #0
 8006582:	220a      	movs	r2, #10
 8006584:	4628      	mov	r0, r5
 8006586:	f000 f9d1 	bl	800692c <__multadd>
 800658a:	45b0      	cmp	r8, r6
 800658c:	4682      	mov	sl, r0
 800658e:	f04f 0300 	mov.w	r3, #0
 8006592:	f04f 020a 	mov.w	r2, #10
 8006596:	4641      	mov	r1, r8
 8006598:	4628      	mov	r0, r5
 800659a:	d107      	bne.n	80065ac <_dtoa_r+0xb04>
 800659c:	f000 f9c6 	bl	800692c <__multadd>
 80065a0:	4680      	mov	r8, r0
 80065a2:	4606      	mov	r6, r0
 80065a4:	9b08      	ldr	r3, [sp, #32]
 80065a6:	3301      	adds	r3, #1
 80065a8:	9308      	str	r3, [sp, #32]
 80065aa:	e775      	b.n	8006498 <_dtoa_r+0x9f0>
 80065ac:	f000 f9be 	bl	800692c <__multadd>
 80065b0:	4631      	mov	r1, r6
 80065b2:	4680      	mov	r8, r0
 80065b4:	2300      	movs	r3, #0
 80065b6:	220a      	movs	r2, #10
 80065b8:	4628      	mov	r0, r5
 80065ba:	f000 f9b7 	bl	800692c <__multadd>
 80065be:	4606      	mov	r6, r0
 80065c0:	e7f0      	b.n	80065a4 <_dtoa_r+0xafc>
 80065c2:	9b08      	ldr	r3, [sp, #32]
 80065c4:	9306      	str	r3, [sp, #24]
 80065c6:	9f03      	ldr	r7, [sp, #12]
 80065c8:	4621      	mov	r1, r4
 80065ca:	4650      	mov	r0, sl
 80065cc:	f7ff f9e2 	bl	8005994 <quorem>
 80065d0:	9b03      	ldr	r3, [sp, #12]
 80065d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80065d6:	f807 9b01 	strb.w	r9, [r7], #1
 80065da:	1afa      	subs	r2, r7, r3
 80065dc:	9b06      	ldr	r3, [sp, #24]
 80065de:	4293      	cmp	r3, r2
 80065e0:	dd07      	ble.n	80065f2 <_dtoa_r+0xb4a>
 80065e2:	4651      	mov	r1, sl
 80065e4:	2300      	movs	r3, #0
 80065e6:	220a      	movs	r2, #10
 80065e8:	4628      	mov	r0, r5
 80065ea:	f000 f99f 	bl	800692c <__multadd>
 80065ee:	4682      	mov	sl, r0
 80065f0:	e7ea      	b.n	80065c8 <_dtoa_r+0xb20>
 80065f2:	9b06      	ldr	r3, [sp, #24]
 80065f4:	f04f 0800 	mov.w	r8, #0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	bfcc      	ite	gt
 80065fc:	461f      	movgt	r7, r3
 80065fe:	2701      	movle	r7, #1
 8006600:	9b03      	ldr	r3, [sp, #12]
 8006602:	441f      	add	r7, r3
 8006604:	4651      	mov	r1, sl
 8006606:	2201      	movs	r2, #1
 8006608:	4628      	mov	r0, r5
 800660a:	f000 fb85 	bl	8006d18 <__lshift>
 800660e:	4621      	mov	r1, r4
 8006610:	4682      	mov	sl, r0
 8006612:	f000 fbed 	bl	8006df0 <__mcmp>
 8006616:	2800      	cmp	r0, #0
 8006618:	dc97      	bgt.n	800654a <_dtoa_r+0xaa2>
 800661a:	d102      	bne.n	8006622 <_dtoa_r+0xb7a>
 800661c:	f019 0f01 	tst.w	r9, #1
 8006620:	d193      	bne.n	800654a <_dtoa_r+0xaa2>
 8006622:	463b      	mov	r3, r7
 8006624:	461f      	mov	r7, r3
 8006626:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800662a:	2a30      	cmp	r2, #48	; 0x30
 800662c:	d0fa      	beq.n	8006624 <_dtoa_r+0xb7c>
 800662e:	e6e1      	b.n	80063f4 <_dtoa_r+0x94c>
 8006630:	9a03      	ldr	r2, [sp, #12]
 8006632:	429a      	cmp	r2, r3
 8006634:	d18a      	bne.n	800654c <_dtoa_r+0xaa4>
 8006636:	2331      	movs	r3, #49	; 0x31
 8006638:	f10b 0b01 	add.w	fp, fp, #1
 800663c:	e797      	b.n	800656e <_dtoa_r+0xac6>
 800663e:	4b0a      	ldr	r3, [pc, #40]	; (8006668 <_dtoa_r+0xbc0>)
 8006640:	f7ff ba9f 	b.w	8005b82 <_dtoa_r+0xda>
 8006644:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006646:	2b00      	cmp	r3, #0
 8006648:	f47f aa77 	bne.w	8005b3a <_dtoa_r+0x92>
 800664c:	4b07      	ldr	r3, [pc, #28]	; (800666c <_dtoa_r+0xbc4>)
 800664e:	f7ff ba98 	b.w	8005b82 <_dtoa_r+0xda>
 8006652:	9b06      	ldr	r3, [sp, #24]
 8006654:	2b00      	cmp	r3, #0
 8006656:	dcb6      	bgt.n	80065c6 <_dtoa_r+0xb1e>
 8006658:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800665a:	2b02      	cmp	r3, #2
 800665c:	f73f aeb5 	bgt.w	80063ca <_dtoa_r+0x922>
 8006660:	e7b1      	b.n	80065c6 <_dtoa_r+0xb1e>
 8006662:	bf00      	nop
 8006664:	0800a69f 	.word	0x0800a69f
 8006668:	0800a5fa 	.word	0x0800a5fa
 800666c:	0800a623 	.word	0x0800a623

08006670 <_free_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	4605      	mov	r5, r0
 8006674:	2900      	cmp	r1, #0
 8006676:	d040      	beq.n	80066fa <_free_r+0x8a>
 8006678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800667c:	1f0c      	subs	r4, r1, #4
 800667e:	2b00      	cmp	r3, #0
 8006680:	bfb8      	it	lt
 8006682:	18e4      	addlt	r4, r4, r3
 8006684:	f000 f8e4 	bl	8006850 <__malloc_lock>
 8006688:	4a1c      	ldr	r2, [pc, #112]	; (80066fc <_free_r+0x8c>)
 800668a:	6813      	ldr	r3, [r2, #0]
 800668c:	b933      	cbnz	r3, 800669c <_free_r+0x2c>
 800668e:	6063      	str	r3, [r4, #4]
 8006690:	6014      	str	r4, [r2, #0]
 8006692:	4628      	mov	r0, r5
 8006694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006698:	f000 b8e0 	b.w	800685c <__malloc_unlock>
 800669c:	42a3      	cmp	r3, r4
 800669e:	d908      	bls.n	80066b2 <_free_r+0x42>
 80066a0:	6820      	ldr	r0, [r4, #0]
 80066a2:	1821      	adds	r1, r4, r0
 80066a4:	428b      	cmp	r3, r1
 80066a6:	bf01      	itttt	eq
 80066a8:	6819      	ldreq	r1, [r3, #0]
 80066aa:	685b      	ldreq	r3, [r3, #4]
 80066ac:	1809      	addeq	r1, r1, r0
 80066ae:	6021      	streq	r1, [r4, #0]
 80066b0:	e7ed      	b.n	800668e <_free_r+0x1e>
 80066b2:	461a      	mov	r2, r3
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	b10b      	cbz	r3, 80066bc <_free_r+0x4c>
 80066b8:	42a3      	cmp	r3, r4
 80066ba:	d9fa      	bls.n	80066b2 <_free_r+0x42>
 80066bc:	6811      	ldr	r1, [r2, #0]
 80066be:	1850      	adds	r0, r2, r1
 80066c0:	42a0      	cmp	r0, r4
 80066c2:	d10b      	bne.n	80066dc <_free_r+0x6c>
 80066c4:	6820      	ldr	r0, [r4, #0]
 80066c6:	4401      	add	r1, r0
 80066c8:	1850      	adds	r0, r2, r1
 80066ca:	4283      	cmp	r3, r0
 80066cc:	6011      	str	r1, [r2, #0]
 80066ce:	d1e0      	bne.n	8006692 <_free_r+0x22>
 80066d0:	6818      	ldr	r0, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	4408      	add	r0, r1
 80066d6:	6010      	str	r0, [r2, #0]
 80066d8:	6053      	str	r3, [r2, #4]
 80066da:	e7da      	b.n	8006692 <_free_r+0x22>
 80066dc:	d902      	bls.n	80066e4 <_free_r+0x74>
 80066de:	230c      	movs	r3, #12
 80066e0:	602b      	str	r3, [r5, #0]
 80066e2:	e7d6      	b.n	8006692 <_free_r+0x22>
 80066e4:	6820      	ldr	r0, [r4, #0]
 80066e6:	1821      	adds	r1, r4, r0
 80066e8:	428b      	cmp	r3, r1
 80066ea:	bf01      	itttt	eq
 80066ec:	6819      	ldreq	r1, [r3, #0]
 80066ee:	685b      	ldreq	r3, [r3, #4]
 80066f0:	1809      	addeq	r1, r1, r0
 80066f2:	6021      	streq	r1, [r4, #0]
 80066f4:	6063      	str	r3, [r4, #4]
 80066f6:	6054      	str	r4, [r2, #4]
 80066f8:	e7cb      	b.n	8006692 <_free_r+0x22>
 80066fa:	bd38      	pop	{r3, r4, r5, pc}
 80066fc:	20000894 	.word	0x20000894

08006700 <malloc>:
 8006700:	4b02      	ldr	r3, [pc, #8]	; (800670c <malloc+0xc>)
 8006702:	4601      	mov	r1, r0
 8006704:	6818      	ldr	r0, [r3, #0]
 8006706:	f000 b823 	b.w	8006750 <_malloc_r>
 800670a:	bf00      	nop
 800670c:	20000074 	.word	0x20000074

08006710 <sbrk_aligned>:
 8006710:	b570      	push	{r4, r5, r6, lr}
 8006712:	4e0e      	ldr	r6, [pc, #56]	; (800674c <sbrk_aligned+0x3c>)
 8006714:	460c      	mov	r4, r1
 8006716:	6831      	ldr	r1, [r6, #0]
 8006718:	4605      	mov	r5, r0
 800671a:	b911      	cbnz	r1, 8006722 <sbrk_aligned+0x12>
 800671c:	f001 fe0c 	bl	8008338 <_sbrk_r>
 8006720:	6030      	str	r0, [r6, #0]
 8006722:	4621      	mov	r1, r4
 8006724:	4628      	mov	r0, r5
 8006726:	f001 fe07 	bl	8008338 <_sbrk_r>
 800672a:	1c43      	adds	r3, r0, #1
 800672c:	d00a      	beq.n	8006744 <sbrk_aligned+0x34>
 800672e:	1cc4      	adds	r4, r0, #3
 8006730:	f024 0403 	bic.w	r4, r4, #3
 8006734:	42a0      	cmp	r0, r4
 8006736:	d007      	beq.n	8006748 <sbrk_aligned+0x38>
 8006738:	1a21      	subs	r1, r4, r0
 800673a:	4628      	mov	r0, r5
 800673c:	f001 fdfc 	bl	8008338 <_sbrk_r>
 8006740:	3001      	adds	r0, #1
 8006742:	d101      	bne.n	8006748 <sbrk_aligned+0x38>
 8006744:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006748:	4620      	mov	r0, r4
 800674a:	bd70      	pop	{r4, r5, r6, pc}
 800674c:	20000898 	.word	0x20000898

08006750 <_malloc_r>:
 8006750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006754:	1ccd      	adds	r5, r1, #3
 8006756:	f025 0503 	bic.w	r5, r5, #3
 800675a:	3508      	adds	r5, #8
 800675c:	2d0c      	cmp	r5, #12
 800675e:	bf38      	it	cc
 8006760:	250c      	movcc	r5, #12
 8006762:	2d00      	cmp	r5, #0
 8006764:	4607      	mov	r7, r0
 8006766:	db01      	blt.n	800676c <_malloc_r+0x1c>
 8006768:	42a9      	cmp	r1, r5
 800676a:	d905      	bls.n	8006778 <_malloc_r+0x28>
 800676c:	230c      	movs	r3, #12
 800676e:	2600      	movs	r6, #0
 8006770:	603b      	str	r3, [r7, #0]
 8006772:	4630      	mov	r0, r6
 8006774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006778:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800684c <_malloc_r+0xfc>
 800677c:	f000 f868 	bl	8006850 <__malloc_lock>
 8006780:	f8d8 3000 	ldr.w	r3, [r8]
 8006784:	461c      	mov	r4, r3
 8006786:	bb5c      	cbnz	r4, 80067e0 <_malloc_r+0x90>
 8006788:	4629      	mov	r1, r5
 800678a:	4638      	mov	r0, r7
 800678c:	f7ff ffc0 	bl	8006710 <sbrk_aligned>
 8006790:	1c43      	adds	r3, r0, #1
 8006792:	4604      	mov	r4, r0
 8006794:	d155      	bne.n	8006842 <_malloc_r+0xf2>
 8006796:	f8d8 4000 	ldr.w	r4, [r8]
 800679a:	4626      	mov	r6, r4
 800679c:	2e00      	cmp	r6, #0
 800679e:	d145      	bne.n	800682c <_malloc_r+0xdc>
 80067a0:	2c00      	cmp	r4, #0
 80067a2:	d048      	beq.n	8006836 <_malloc_r+0xe6>
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	4631      	mov	r1, r6
 80067a8:	4638      	mov	r0, r7
 80067aa:	eb04 0903 	add.w	r9, r4, r3
 80067ae:	f001 fdc3 	bl	8008338 <_sbrk_r>
 80067b2:	4581      	cmp	r9, r0
 80067b4:	d13f      	bne.n	8006836 <_malloc_r+0xe6>
 80067b6:	6821      	ldr	r1, [r4, #0]
 80067b8:	4638      	mov	r0, r7
 80067ba:	1a6d      	subs	r5, r5, r1
 80067bc:	4629      	mov	r1, r5
 80067be:	f7ff ffa7 	bl	8006710 <sbrk_aligned>
 80067c2:	3001      	adds	r0, #1
 80067c4:	d037      	beq.n	8006836 <_malloc_r+0xe6>
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	442b      	add	r3, r5
 80067ca:	6023      	str	r3, [r4, #0]
 80067cc:	f8d8 3000 	ldr.w	r3, [r8]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d038      	beq.n	8006846 <_malloc_r+0xf6>
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	42a2      	cmp	r2, r4
 80067d8:	d12b      	bne.n	8006832 <_malloc_r+0xe2>
 80067da:	2200      	movs	r2, #0
 80067dc:	605a      	str	r2, [r3, #4]
 80067de:	e00f      	b.n	8006800 <_malloc_r+0xb0>
 80067e0:	6822      	ldr	r2, [r4, #0]
 80067e2:	1b52      	subs	r2, r2, r5
 80067e4:	d41f      	bmi.n	8006826 <_malloc_r+0xd6>
 80067e6:	2a0b      	cmp	r2, #11
 80067e8:	d917      	bls.n	800681a <_malloc_r+0xca>
 80067ea:	1961      	adds	r1, r4, r5
 80067ec:	42a3      	cmp	r3, r4
 80067ee:	6025      	str	r5, [r4, #0]
 80067f0:	bf18      	it	ne
 80067f2:	6059      	strne	r1, [r3, #4]
 80067f4:	6863      	ldr	r3, [r4, #4]
 80067f6:	bf08      	it	eq
 80067f8:	f8c8 1000 	streq.w	r1, [r8]
 80067fc:	5162      	str	r2, [r4, r5]
 80067fe:	604b      	str	r3, [r1, #4]
 8006800:	4638      	mov	r0, r7
 8006802:	f104 060b 	add.w	r6, r4, #11
 8006806:	f000 f829 	bl	800685c <__malloc_unlock>
 800680a:	f026 0607 	bic.w	r6, r6, #7
 800680e:	1d23      	adds	r3, r4, #4
 8006810:	1af2      	subs	r2, r6, r3
 8006812:	d0ae      	beq.n	8006772 <_malloc_r+0x22>
 8006814:	1b9b      	subs	r3, r3, r6
 8006816:	50a3      	str	r3, [r4, r2]
 8006818:	e7ab      	b.n	8006772 <_malloc_r+0x22>
 800681a:	42a3      	cmp	r3, r4
 800681c:	6862      	ldr	r2, [r4, #4]
 800681e:	d1dd      	bne.n	80067dc <_malloc_r+0x8c>
 8006820:	f8c8 2000 	str.w	r2, [r8]
 8006824:	e7ec      	b.n	8006800 <_malloc_r+0xb0>
 8006826:	4623      	mov	r3, r4
 8006828:	6864      	ldr	r4, [r4, #4]
 800682a:	e7ac      	b.n	8006786 <_malloc_r+0x36>
 800682c:	4634      	mov	r4, r6
 800682e:	6876      	ldr	r6, [r6, #4]
 8006830:	e7b4      	b.n	800679c <_malloc_r+0x4c>
 8006832:	4613      	mov	r3, r2
 8006834:	e7cc      	b.n	80067d0 <_malloc_r+0x80>
 8006836:	230c      	movs	r3, #12
 8006838:	4638      	mov	r0, r7
 800683a:	603b      	str	r3, [r7, #0]
 800683c:	f000 f80e 	bl	800685c <__malloc_unlock>
 8006840:	e797      	b.n	8006772 <_malloc_r+0x22>
 8006842:	6025      	str	r5, [r4, #0]
 8006844:	e7dc      	b.n	8006800 <_malloc_r+0xb0>
 8006846:	605b      	str	r3, [r3, #4]
 8006848:	deff      	udf	#255	; 0xff
 800684a:	bf00      	nop
 800684c:	20000894 	.word	0x20000894

08006850 <__malloc_lock>:
 8006850:	4801      	ldr	r0, [pc, #4]	; (8006858 <__malloc_lock+0x8>)
 8006852:	f7ff b88b 	b.w	800596c <__retarget_lock_acquire_recursive>
 8006856:	bf00      	nop
 8006858:	20000890 	.word	0x20000890

0800685c <__malloc_unlock>:
 800685c:	4801      	ldr	r0, [pc, #4]	; (8006864 <__malloc_unlock+0x8>)
 800685e:	f7ff b886 	b.w	800596e <__retarget_lock_release_recursive>
 8006862:	bf00      	nop
 8006864:	20000890 	.word	0x20000890

08006868 <_Balloc>:
 8006868:	b570      	push	{r4, r5, r6, lr}
 800686a:	69c6      	ldr	r6, [r0, #28]
 800686c:	4604      	mov	r4, r0
 800686e:	460d      	mov	r5, r1
 8006870:	b976      	cbnz	r6, 8006890 <_Balloc+0x28>
 8006872:	2010      	movs	r0, #16
 8006874:	f7ff ff44 	bl	8006700 <malloc>
 8006878:	4602      	mov	r2, r0
 800687a:	61e0      	str	r0, [r4, #28]
 800687c:	b920      	cbnz	r0, 8006888 <_Balloc+0x20>
 800687e:	216b      	movs	r1, #107	; 0x6b
 8006880:	4b17      	ldr	r3, [pc, #92]	; (80068e0 <_Balloc+0x78>)
 8006882:	4818      	ldr	r0, [pc, #96]	; (80068e4 <_Balloc+0x7c>)
 8006884:	f001 fd7c 	bl	8008380 <__assert_func>
 8006888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800688c:	6006      	str	r6, [r0, #0]
 800688e:	60c6      	str	r6, [r0, #12]
 8006890:	69e6      	ldr	r6, [r4, #28]
 8006892:	68f3      	ldr	r3, [r6, #12]
 8006894:	b183      	cbz	r3, 80068b8 <_Balloc+0x50>
 8006896:	69e3      	ldr	r3, [r4, #28]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800689e:	b9b8      	cbnz	r0, 80068d0 <_Balloc+0x68>
 80068a0:	2101      	movs	r1, #1
 80068a2:	fa01 f605 	lsl.w	r6, r1, r5
 80068a6:	1d72      	adds	r2, r6, #5
 80068a8:	4620      	mov	r0, r4
 80068aa:	0092      	lsls	r2, r2, #2
 80068ac:	f001 fd86 	bl	80083bc <_calloc_r>
 80068b0:	b160      	cbz	r0, 80068cc <_Balloc+0x64>
 80068b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068b6:	e00e      	b.n	80068d6 <_Balloc+0x6e>
 80068b8:	2221      	movs	r2, #33	; 0x21
 80068ba:	2104      	movs	r1, #4
 80068bc:	4620      	mov	r0, r4
 80068be:	f001 fd7d 	bl	80083bc <_calloc_r>
 80068c2:	69e3      	ldr	r3, [r4, #28]
 80068c4:	60f0      	str	r0, [r6, #12]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e4      	bne.n	8006896 <_Balloc+0x2e>
 80068cc:	2000      	movs	r0, #0
 80068ce:	bd70      	pop	{r4, r5, r6, pc}
 80068d0:	6802      	ldr	r2, [r0, #0]
 80068d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80068d6:	2300      	movs	r3, #0
 80068d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068dc:	e7f7      	b.n	80068ce <_Balloc+0x66>
 80068de:	bf00      	nop
 80068e0:	0800a630 	.word	0x0800a630
 80068e4:	0800a6b0 	.word	0x0800a6b0

080068e8 <_Bfree>:
 80068e8:	b570      	push	{r4, r5, r6, lr}
 80068ea:	69c6      	ldr	r6, [r0, #28]
 80068ec:	4605      	mov	r5, r0
 80068ee:	460c      	mov	r4, r1
 80068f0:	b976      	cbnz	r6, 8006910 <_Bfree+0x28>
 80068f2:	2010      	movs	r0, #16
 80068f4:	f7ff ff04 	bl	8006700 <malloc>
 80068f8:	4602      	mov	r2, r0
 80068fa:	61e8      	str	r0, [r5, #28]
 80068fc:	b920      	cbnz	r0, 8006908 <_Bfree+0x20>
 80068fe:	218f      	movs	r1, #143	; 0x8f
 8006900:	4b08      	ldr	r3, [pc, #32]	; (8006924 <_Bfree+0x3c>)
 8006902:	4809      	ldr	r0, [pc, #36]	; (8006928 <_Bfree+0x40>)
 8006904:	f001 fd3c 	bl	8008380 <__assert_func>
 8006908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800690c:	6006      	str	r6, [r0, #0]
 800690e:	60c6      	str	r6, [r0, #12]
 8006910:	b13c      	cbz	r4, 8006922 <_Bfree+0x3a>
 8006912:	69eb      	ldr	r3, [r5, #28]
 8006914:	6862      	ldr	r2, [r4, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800691c:	6021      	str	r1, [r4, #0]
 800691e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006922:	bd70      	pop	{r4, r5, r6, pc}
 8006924:	0800a630 	.word	0x0800a630
 8006928:	0800a6b0 	.word	0x0800a6b0

0800692c <__multadd>:
 800692c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006930:	4607      	mov	r7, r0
 8006932:	460c      	mov	r4, r1
 8006934:	461e      	mov	r6, r3
 8006936:	2000      	movs	r0, #0
 8006938:	690d      	ldr	r5, [r1, #16]
 800693a:	f101 0c14 	add.w	ip, r1, #20
 800693e:	f8dc 3000 	ldr.w	r3, [ip]
 8006942:	3001      	adds	r0, #1
 8006944:	b299      	uxth	r1, r3
 8006946:	fb02 6101 	mla	r1, r2, r1, r6
 800694a:	0c1e      	lsrs	r6, r3, #16
 800694c:	0c0b      	lsrs	r3, r1, #16
 800694e:	fb02 3306 	mla	r3, r2, r6, r3
 8006952:	b289      	uxth	r1, r1
 8006954:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006958:	4285      	cmp	r5, r0
 800695a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800695e:	f84c 1b04 	str.w	r1, [ip], #4
 8006962:	dcec      	bgt.n	800693e <__multadd+0x12>
 8006964:	b30e      	cbz	r6, 80069aa <__multadd+0x7e>
 8006966:	68a3      	ldr	r3, [r4, #8]
 8006968:	42ab      	cmp	r3, r5
 800696a:	dc19      	bgt.n	80069a0 <__multadd+0x74>
 800696c:	6861      	ldr	r1, [r4, #4]
 800696e:	4638      	mov	r0, r7
 8006970:	3101      	adds	r1, #1
 8006972:	f7ff ff79 	bl	8006868 <_Balloc>
 8006976:	4680      	mov	r8, r0
 8006978:	b928      	cbnz	r0, 8006986 <__multadd+0x5a>
 800697a:	4602      	mov	r2, r0
 800697c:	21ba      	movs	r1, #186	; 0xba
 800697e:	4b0c      	ldr	r3, [pc, #48]	; (80069b0 <__multadd+0x84>)
 8006980:	480c      	ldr	r0, [pc, #48]	; (80069b4 <__multadd+0x88>)
 8006982:	f001 fcfd 	bl	8008380 <__assert_func>
 8006986:	6922      	ldr	r2, [r4, #16]
 8006988:	f104 010c 	add.w	r1, r4, #12
 800698c:	3202      	adds	r2, #2
 800698e:	0092      	lsls	r2, r2, #2
 8006990:	300c      	adds	r0, #12
 8006992:	f001 fce1 	bl	8008358 <memcpy>
 8006996:	4621      	mov	r1, r4
 8006998:	4638      	mov	r0, r7
 800699a:	f7ff ffa5 	bl	80068e8 <_Bfree>
 800699e:	4644      	mov	r4, r8
 80069a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80069a4:	3501      	adds	r5, #1
 80069a6:	615e      	str	r6, [r3, #20]
 80069a8:	6125      	str	r5, [r4, #16]
 80069aa:	4620      	mov	r0, r4
 80069ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b0:	0800a69f 	.word	0x0800a69f
 80069b4:	0800a6b0 	.word	0x0800a6b0

080069b8 <__s2b>:
 80069b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069bc:	4615      	mov	r5, r2
 80069be:	2209      	movs	r2, #9
 80069c0:	461f      	mov	r7, r3
 80069c2:	3308      	adds	r3, #8
 80069c4:	460c      	mov	r4, r1
 80069c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80069ca:	4606      	mov	r6, r0
 80069cc:	2201      	movs	r2, #1
 80069ce:	2100      	movs	r1, #0
 80069d0:	429a      	cmp	r2, r3
 80069d2:	db09      	blt.n	80069e8 <__s2b+0x30>
 80069d4:	4630      	mov	r0, r6
 80069d6:	f7ff ff47 	bl	8006868 <_Balloc>
 80069da:	b940      	cbnz	r0, 80069ee <__s2b+0x36>
 80069dc:	4602      	mov	r2, r0
 80069de:	21d3      	movs	r1, #211	; 0xd3
 80069e0:	4b18      	ldr	r3, [pc, #96]	; (8006a44 <__s2b+0x8c>)
 80069e2:	4819      	ldr	r0, [pc, #100]	; (8006a48 <__s2b+0x90>)
 80069e4:	f001 fccc 	bl	8008380 <__assert_func>
 80069e8:	0052      	lsls	r2, r2, #1
 80069ea:	3101      	adds	r1, #1
 80069ec:	e7f0      	b.n	80069d0 <__s2b+0x18>
 80069ee:	9b08      	ldr	r3, [sp, #32]
 80069f0:	2d09      	cmp	r5, #9
 80069f2:	6143      	str	r3, [r0, #20]
 80069f4:	f04f 0301 	mov.w	r3, #1
 80069f8:	6103      	str	r3, [r0, #16]
 80069fa:	dd16      	ble.n	8006a2a <__s2b+0x72>
 80069fc:	f104 0909 	add.w	r9, r4, #9
 8006a00:	46c8      	mov	r8, r9
 8006a02:	442c      	add	r4, r5
 8006a04:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006a08:	4601      	mov	r1, r0
 8006a0a:	220a      	movs	r2, #10
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	3b30      	subs	r3, #48	; 0x30
 8006a10:	f7ff ff8c 	bl	800692c <__multadd>
 8006a14:	45a0      	cmp	r8, r4
 8006a16:	d1f5      	bne.n	8006a04 <__s2b+0x4c>
 8006a18:	f1a5 0408 	sub.w	r4, r5, #8
 8006a1c:	444c      	add	r4, r9
 8006a1e:	1b2d      	subs	r5, r5, r4
 8006a20:	1963      	adds	r3, r4, r5
 8006a22:	42bb      	cmp	r3, r7
 8006a24:	db04      	blt.n	8006a30 <__s2b+0x78>
 8006a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a2a:	2509      	movs	r5, #9
 8006a2c:	340a      	adds	r4, #10
 8006a2e:	e7f6      	b.n	8006a1e <__s2b+0x66>
 8006a30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006a34:	4601      	mov	r1, r0
 8006a36:	220a      	movs	r2, #10
 8006a38:	4630      	mov	r0, r6
 8006a3a:	3b30      	subs	r3, #48	; 0x30
 8006a3c:	f7ff ff76 	bl	800692c <__multadd>
 8006a40:	e7ee      	b.n	8006a20 <__s2b+0x68>
 8006a42:	bf00      	nop
 8006a44:	0800a69f 	.word	0x0800a69f
 8006a48:	0800a6b0 	.word	0x0800a6b0

08006a4c <__hi0bits>:
 8006a4c:	0c02      	lsrs	r2, r0, #16
 8006a4e:	0412      	lsls	r2, r2, #16
 8006a50:	4603      	mov	r3, r0
 8006a52:	b9ca      	cbnz	r2, 8006a88 <__hi0bits+0x3c>
 8006a54:	0403      	lsls	r3, r0, #16
 8006a56:	2010      	movs	r0, #16
 8006a58:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006a5c:	bf04      	itt	eq
 8006a5e:	021b      	lsleq	r3, r3, #8
 8006a60:	3008      	addeq	r0, #8
 8006a62:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006a66:	bf04      	itt	eq
 8006a68:	011b      	lsleq	r3, r3, #4
 8006a6a:	3004      	addeq	r0, #4
 8006a6c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006a70:	bf04      	itt	eq
 8006a72:	009b      	lsleq	r3, r3, #2
 8006a74:	3002      	addeq	r0, #2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	db05      	blt.n	8006a86 <__hi0bits+0x3a>
 8006a7a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006a7e:	f100 0001 	add.w	r0, r0, #1
 8006a82:	bf08      	it	eq
 8006a84:	2020      	moveq	r0, #32
 8006a86:	4770      	bx	lr
 8006a88:	2000      	movs	r0, #0
 8006a8a:	e7e5      	b.n	8006a58 <__hi0bits+0xc>

08006a8c <__lo0bits>:
 8006a8c:	6803      	ldr	r3, [r0, #0]
 8006a8e:	4602      	mov	r2, r0
 8006a90:	f013 0007 	ands.w	r0, r3, #7
 8006a94:	d00b      	beq.n	8006aae <__lo0bits+0x22>
 8006a96:	07d9      	lsls	r1, r3, #31
 8006a98:	d421      	bmi.n	8006ade <__lo0bits+0x52>
 8006a9a:	0798      	lsls	r0, r3, #30
 8006a9c:	bf49      	itett	mi
 8006a9e:	085b      	lsrmi	r3, r3, #1
 8006aa0:	089b      	lsrpl	r3, r3, #2
 8006aa2:	2001      	movmi	r0, #1
 8006aa4:	6013      	strmi	r3, [r2, #0]
 8006aa6:	bf5c      	itt	pl
 8006aa8:	2002      	movpl	r0, #2
 8006aaa:	6013      	strpl	r3, [r2, #0]
 8006aac:	4770      	bx	lr
 8006aae:	b299      	uxth	r1, r3
 8006ab0:	b909      	cbnz	r1, 8006ab6 <__lo0bits+0x2a>
 8006ab2:	2010      	movs	r0, #16
 8006ab4:	0c1b      	lsrs	r3, r3, #16
 8006ab6:	b2d9      	uxtb	r1, r3
 8006ab8:	b909      	cbnz	r1, 8006abe <__lo0bits+0x32>
 8006aba:	3008      	adds	r0, #8
 8006abc:	0a1b      	lsrs	r3, r3, #8
 8006abe:	0719      	lsls	r1, r3, #28
 8006ac0:	bf04      	itt	eq
 8006ac2:	091b      	lsreq	r3, r3, #4
 8006ac4:	3004      	addeq	r0, #4
 8006ac6:	0799      	lsls	r1, r3, #30
 8006ac8:	bf04      	itt	eq
 8006aca:	089b      	lsreq	r3, r3, #2
 8006acc:	3002      	addeq	r0, #2
 8006ace:	07d9      	lsls	r1, r3, #31
 8006ad0:	d403      	bmi.n	8006ada <__lo0bits+0x4e>
 8006ad2:	085b      	lsrs	r3, r3, #1
 8006ad4:	f100 0001 	add.w	r0, r0, #1
 8006ad8:	d003      	beq.n	8006ae2 <__lo0bits+0x56>
 8006ada:	6013      	str	r3, [r2, #0]
 8006adc:	4770      	bx	lr
 8006ade:	2000      	movs	r0, #0
 8006ae0:	4770      	bx	lr
 8006ae2:	2020      	movs	r0, #32
 8006ae4:	4770      	bx	lr
	...

08006ae8 <__i2b>:
 8006ae8:	b510      	push	{r4, lr}
 8006aea:	460c      	mov	r4, r1
 8006aec:	2101      	movs	r1, #1
 8006aee:	f7ff febb 	bl	8006868 <_Balloc>
 8006af2:	4602      	mov	r2, r0
 8006af4:	b928      	cbnz	r0, 8006b02 <__i2b+0x1a>
 8006af6:	f240 1145 	movw	r1, #325	; 0x145
 8006afa:	4b04      	ldr	r3, [pc, #16]	; (8006b0c <__i2b+0x24>)
 8006afc:	4804      	ldr	r0, [pc, #16]	; (8006b10 <__i2b+0x28>)
 8006afe:	f001 fc3f 	bl	8008380 <__assert_func>
 8006b02:	2301      	movs	r3, #1
 8006b04:	6144      	str	r4, [r0, #20]
 8006b06:	6103      	str	r3, [r0, #16]
 8006b08:	bd10      	pop	{r4, pc}
 8006b0a:	bf00      	nop
 8006b0c:	0800a69f 	.word	0x0800a69f
 8006b10:	0800a6b0 	.word	0x0800a6b0

08006b14 <__multiply>:
 8006b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b18:	4691      	mov	r9, r2
 8006b1a:	690a      	ldr	r2, [r1, #16]
 8006b1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b20:	460c      	mov	r4, r1
 8006b22:	429a      	cmp	r2, r3
 8006b24:	bfbe      	ittt	lt
 8006b26:	460b      	movlt	r3, r1
 8006b28:	464c      	movlt	r4, r9
 8006b2a:	4699      	movlt	r9, r3
 8006b2c:	6927      	ldr	r7, [r4, #16]
 8006b2e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006b32:	68a3      	ldr	r3, [r4, #8]
 8006b34:	6861      	ldr	r1, [r4, #4]
 8006b36:	eb07 060a 	add.w	r6, r7, sl
 8006b3a:	42b3      	cmp	r3, r6
 8006b3c:	b085      	sub	sp, #20
 8006b3e:	bfb8      	it	lt
 8006b40:	3101      	addlt	r1, #1
 8006b42:	f7ff fe91 	bl	8006868 <_Balloc>
 8006b46:	b930      	cbnz	r0, 8006b56 <__multiply+0x42>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006b4e:	4b43      	ldr	r3, [pc, #268]	; (8006c5c <__multiply+0x148>)
 8006b50:	4843      	ldr	r0, [pc, #268]	; (8006c60 <__multiply+0x14c>)
 8006b52:	f001 fc15 	bl	8008380 <__assert_func>
 8006b56:	f100 0514 	add.w	r5, r0, #20
 8006b5a:	462b      	mov	r3, r5
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b62:	4543      	cmp	r3, r8
 8006b64:	d321      	bcc.n	8006baa <__multiply+0x96>
 8006b66:	f104 0314 	add.w	r3, r4, #20
 8006b6a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006b6e:	f109 0314 	add.w	r3, r9, #20
 8006b72:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006b76:	9202      	str	r2, [sp, #8]
 8006b78:	1b3a      	subs	r2, r7, r4
 8006b7a:	3a15      	subs	r2, #21
 8006b7c:	f022 0203 	bic.w	r2, r2, #3
 8006b80:	3204      	adds	r2, #4
 8006b82:	f104 0115 	add.w	r1, r4, #21
 8006b86:	428f      	cmp	r7, r1
 8006b88:	bf38      	it	cc
 8006b8a:	2204      	movcc	r2, #4
 8006b8c:	9201      	str	r2, [sp, #4]
 8006b8e:	9a02      	ldr	r2, [sp, #8]
 8006b90:	9303      	str	r3, [sp, #12]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d80c      	bhi.n	8006bb0 <__multiply+0x9c>
 8006b96:	2e00      	cmp	r6, #0
 8006b98:	dd03      	ble.n	8006ba2 <__multiply+0x8e>
 8006b9a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d05a      	beq.n	8006c58 <__multiply+0x144>
 8006ba2:	6106      	str	r6, [r0, #16]
 8006ba4:	b005      	add	sp, #20
 8006ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006baa:	f843 2b04 	str.w	r2, [r3], #4
 8006bae:	e7d8      	b.n	8006b62 <__multiply+0x4e>
 8006bb0:	f8b3 a000 	ldrh.w	sl, [r3]
 8006bb4:	f1ba 0f00 	cmp.w	sl, #0
 8006bb8:	d023      	beq.n	8006c02 <__multiply+0xee>
 8006bba:	46a9      	mov	r9, r5
 8006bbc:	f04f 0c00 	mov.w	ip, #0
 8006bc0:	f104 0e14 	add.w	lr, r4, #20
 8006bc4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006bc8:	f8d9 1000 	ldr.w	r1, [r9]
 8006bcc:	fa1f fb82 	uxth.w	fp, r2
 8006bd0:	b289      	uxth	r1, r1
 8006bd2:	fb0a 110b 	mla	r1, sl, fp, r1
 8006bd6:	4461      	add	r1, ip
 8006bd8:	f8d9 c000 	ldr.w	ip, [r9]
 8006bdc:	0c12      	lsrs	r2, r2, #16
 8006bde:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006be2:	fb0a c202 	mla	r2, sl, r2, ip
 8006be6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006bea:	b289      	uxth	r1, r1
 8006bec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006bf0:	4577      	cmp	r7, lr
 8006bf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006bf6:	f849 1b04 	str.w	r1, [r9], #4
 8006bfa:	d8e3      	bhi.n	8006bc4 <__multiply+0xb0>
 8006bfc:	9a01      	ldr	r2, [sp, #4]
 8006bfe:	f845 c002 	str.w	ip, [r5, r2]
 8006c02:	9a03      	ldr	r2, [sp, #12]
 8006c04:	3304      	adds	r3, #4
 8006c06:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c0a:	f1b9 0f00 	cmp.w	r9, #0
 8006c0e:	d021      	beq.n	8006c54 <__multiply+0x140>
 8006c10:	46ae      	mov	lr, r5
 8006c12:	f04f 0a00 	mov.w	sl, #0
 8006c16:	6829      	ldr	r1, [r5, #0]
 8006c18:	f104 0c14 	add.w	ip, r4, #20
 8006c1c:	f8bc b000 	ldrh.w	fp, [ip]
 8006c20:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006c24:	b289      	uxth	r1, r1
 8006c26:	fb09 220b 	mla	r2, r9, fp, r2
 8006c2a:	4452      	add	r2, sl
 8006c2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c30:	f84e 1b04 	str.w	r1, [lr], #4
 8006c34:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006c38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c3c:	f8be 1000 	ldrh.w	r1, [lr]
 8006c40:	4567      	cmp	r7, ip
 8006c42:	fb09 110a 	mla	r1, r9, sl, r1
 8006c46:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006c4a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c4e:	d8e5      	bhi.n	8006c1c <__multiply+0x108>
 8006c50:	9a01      	ldr	r2, [sp, #4]
 8006c52:	50a9      	str	r1, [r5, r2]
 8006c54:	3504      	adds	r5, #4
 8006c56:	e79a      	b.n	8006b8e <__multiply+0x7a>
 8006c58:	3e01      	subs	r6, #1
 8006c5a:	e79c      	b.n	8006b96 <__multiply+0x82>
 8006c5c:	0800a69f 	.word	0x0800a69f
 8006c60:	0800a6b0 	.word	0x0800a6b0

08006c64 <__pow5mult>:
 8006c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c68:	4615      	mov	r5, r2
 8006c6a:	f012 0203 	ands.w	r2, r2, #3
 8006c6e:	4606      	mov	r6, r0
 8006c70:	460f      	mov	r7, r1
 8006c72:	d007      	beq.n	8006c84 <__pow5mult+0x20>
 8006c74:	4c25      	ldr	r4, [pc, #148]	; (8006d0c <__pow5mult+0xa8>)
 8006c76:	3a01      	subs	r2, #1
 8006c78:	2300      	movs	r3, #0
 8006c7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c7e:	f7ff fe55 	bl	800692c <__multadd>
 8006c82:	4607      	mov	r7, r0
 8006c84:	10ad      	asrs	r5, r5, #2
 8006c86:	d03d      	beq.n	8006d04 <__pow5mult+0xa0>
 8006c88:	69f4      	ldr	r4, [r6, #28]
 8006c8a:	b97c      	cbnz	r4, 8006cac <__pow5mult+0x48>
 8006c8c:	2010      	movs	r0, #16
 8006c8e:	f7ff fd37 	bl	8006700 <malloc>
 8006c92:	4602      	mov	r2, r0
 8006c94:	61f0      	str	r0, [r6, #28]
 8006c96:	b928      	cbnz	r0, 8006ca4 <__pow5mult+0x40>
 8006c98:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006c9c:	4b1c      	ldr	r3, [pc, #112]	; (8006d10 <__pow5mult+0xac>)
 8006c9e:	481d      	ldr	r0, [pc, #116]	; (8006d14 <__pow5mult+0xb0>)
 8006ca0:	f001 fb6e 	bl	8008380 <__assert_func>
 8006ca4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ca8:	6004      	str	r4, [r0, #0]
 8006caa:	60c4      	str	r4, [r0, #12]
 8006cac:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006cb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006cb4:	b94c      	cbnz	r4, 8006cca <__pow5mult+0x66>
 8006cb6:	f240 2171 	movw	r1, #625	; 0x271
 8006cba:	4630      	mov	r0, r6
 8006cbc:	f7ff ff14 	bl	8006ae8 <__i2b>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cc8:	6003      	str	r3, [r0, #0]
 8006cca:	f04f 0900 	mov.w	r9, #0
 8006cce:	07eb      	lsls	r3, r5, #31
 8006cd0:	d50a      	bpl.n	8006ce8 <__pow5mult+0x84>
 8006cd2:	4639      	mov	r1, r7
 8006cd4:	4622      	mov	r2, r4
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	f7ff ff1c 	bl	8006b14 <__multiply>
 8006cdc:	4680      	mov	r8, r0
 8006cde:	4639      	mov	r1, r7
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	f7ff fe01 	bl	80068e8 <_Bfree>
 8006ce6:	4647      	mov	r7, r8
 8006ce8:	106d      	asrs	r5, r5, #1
 8006cea:	d00b      	beq.n	8006d04 <__pow5mult+0xa0>
 8006cec:	6820      	ldr	r0, [r4, #0]
 8006cee:	b938      	cbnz	r0, 8006d00 <__pow5mult+0x9c>
 8006cf0:	4622      	mov	r2, r4
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	f7ff ff0d 	bl	8006b14 <__multiply>
 8006cfa:	6020      	str	r0, [r4, #0]
 8006cfc:	f8c0 9000 	str.w	r9, [r0]
 8006d00:	4604      	mov	r4, r0
 8006d02:	e7e4      	b.n	8006cce <__pow5mult+0x6a>
 8006d04:	4638      	mov	r0, r7
 8006d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d0a:	bf00      	nop
 8006d0c:	0800a800 	.word	0x0800a800
 8006d10:	0800a630 	.word	0x0800a630
 8006d14:	0800a6b0 	.word	0x0800a6b0

08006d18 <__lshift>:
 8006d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	4607      	mov	r7, r0
 8006d20:	4691      	mov	r9, r2
 8006d22:	6923      	ldr	r3, [r4, #16]
 8006d24:	6849      	ldr	r1, [r1, #4]
 8006d26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d2a:	68a3      	ldr	r3, [r4, #8]
 8006d2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d30:	f108 0601 	add.w	r6, r8, #1
 8006d34:	42b3      	cmp	r3, r6
 8006d36:	db0b      	blt.n	8006d50 <__lshift+0x38>
 8006d38:	4638      	mov	r0, r7
 8006d3a:	f7ff fd95 	bl	8006868 <_Balloc>
 8006d3e:	4605      	mov	r5, r0
 8006d40:	b948      	cbnz	r0, 8006d56 <__lshift+0x3e>
 8006d42:	4602      	mov	r2, r0
 8006d44:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006d48:	4b27      	ldr	r3, [pc, #156]	; (8006de8 <__lshift+0xd0>)
 8006d4a:	4828      	ldr	r0, [pc, #160]	; (8006dec <__lshift+0xd4>)
 8006d4c:	f001 fb18 	bl	8008380 <__assert_func>
 8006d50:	3101      	adds	r1, #1
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	e7ee      	b.n	8006d34 <__lshift+0x1c>
 8006d56:	2300      	movs	r3, #0
 8006d58:	f100 0114 	add.w	r1, r0, #20
 8006d5c:	f100 0210 	add.w	r2, r0, #16
 8006d60:	4618      	mov	r0, r3
 8006d62:	4553      	cmp	r3, sl
 8006d64:	db33      	blt.n	8006dce <__lshift+0xb6>
 8006d66:	6920      	ldr	r0, [r4, #16]
 8006d68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d6c:	f104 0314 	add.w	r3, r4, #20
 8006d70:	f019 091f 	ands.w	r9, r9, #31
 8006d74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d7c:	d02b      	beq.n	8006dd6 <__lshift+0xbe>
 8006d7e:	468a      	mov	sl, r1
 8006d80:	2200      	movs	r2, #0
 8006d82:	f1c9 0e20 	rsb	lr, r9, #32
 8006d86:	6818      	ldr	r0, [r3, #0]
 8006d88:	fa00 f009 	lsl.w	r0, r0, r9
 8006d8c:	4310      	orrs	r0, r2
 8006d8e:	f84a 0b04 	str.w	r0, [sl], #4
 8006d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d96:	459c      	cmp	ip, r3
 8006d98:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d9c:	d8f3      	bhi.n	8006d86 <__lshift+0x6e>
 8006d9e:	ebac 0304 	sub.w	r3, ip, r4
 8006da2:	3b15      	subs	r3, #21
 8006da4:	f023 0303 	bic.w	r3, r3, #3
 8006da8:	3304      	adds	r3, #4
 8006daa:	f104 0015 	add.w	r0, r4, #21
 8006dae:	4584      	cmp	ip, r0
 8006db0:	bf38      	it	cc
 8006db2:	2304      	movcc	r3, #4
 8006db4:	50ca      	str	r2, [r1, r3]
 8006db6:	b10a      	cbz	r2, 8006dbc <__lshift+0xa4>
 8006db8:	f108 0602 	add.w	r6, r8, #2
 8006dbc:	3e01      	subs	r6, #1
 8006dbe:	4638      	mov	r0, r7
 8006dc0:	4621      	mov	r1, r4
 8006dc2:	612e      	str	r6, [r5, #16]
 8006dc4:	f7ff fd90 	bl	80068e8 <_Bfree>
 8006dc8:	4628      	mov	r0, r5
 8006dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dce:	f842 0f04 	str.w	r0, [r2, #4]!
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	e7c5      	b.n	8006d62 <__lshift+0x4a>
 8006dd6:	3904      	subs	r1, #4
 8006dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ddc:	459c      	cmp	ip, r3
 8006dde:	f841 2f04 	str.w	r2, [r1, #4]!
 8006de2:	d8f9      	bhi.n	8006dd8 <__lshift+0xc0>
 8006de4:	e7ea      	b.n	8006dbc <__lshift+0xa4>
 8006de6:	bf00      	nop
 8006de8:	0800a69f 	.word	0x0800a69f
 8006dec:	0800a6b0 	.word	0x0800a6b0

08006df0 <__mcmp>:
 8006df0:	4603      	mov	r3, r0
 8006df2:	690a      	ldr	r2, [r1, #16]
 8006df4:	6900      	ldr	r0, [r0, #16]
 8006df6:	b530      	push	{r4, r5, lr}
 8006df8:	1a80      	subs	r0, r0, r2
 8006dfa:	d10d      	bne.n	8006e18 <__mcmp+0x28>
 8006dfc:	3314      	adds	r3, #20
 8006dfe:	3114      	adds	r1, #20
 8006e00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006e04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006e08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e10:	4295      	cmp	r5, r2
 8006e12:	d002      	beq.n	8006e1a <__mcmp+0x2a>
 8006e14:	d304      	bcc.n	8006e20 <__mcmp+0x30>
 8006e16:	2001      	movs	r0, #1
 8006e18:	bd30      	pop	{r4, r5, pc}
 8006e1a:	42a3      	cmp	r3, r4
 8006e1c:	d3f4      	bcc.n	8006e08 <__mcmp+0x18>
 8006e1e:	e7fb      	b.n	8006e18 <__mcmp+0x28>
 8006e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e24:	e7f8      	b.n	8006e18 <__mcmp+0x28>
	...

08006e28 <__mdiff>:
 8006e28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	460d      	mov	r5, r1
 8006e2e:	4607      	mov	r7, r0
 8006e30:	4611      	mov	r1, r2
 8006e32:	4628      	mov	r0, r5
 8006e34:	4614      	mov	r4, r2
 8006e36:	f7ff ffdb 	bl	8006df0 <__mcmp>
 8006e3a:	1e06      	subs	r6, r0, #0
 8006e3c:	d111      	bne.n	8006e62 <__mdiff+0x3a>
 8006e3e:	4631      	mov	r1, r6
 8006e40:	4638      	mov	r0, r7
 8006e42:	f7ff fd11 	bl	8006868 <_Balloc>
 8006e46:	4602      	mov	r2, r0
 8006e48:	b928      	cbnz	r0, 8006e56 <__mdiff+0x2e>
 8006e4a:	f240 2137 	movw	r1, #567	; 0x237
 8006e4e:	4b3a      	ldr	r3, [pc, #232]	; (8006f38 <__mdiff+0x110>)
 8006e50:	483a      	ldr	r0, [pc, #232]	; (8006f3c <__mdiff+0x114>)
 8006e52:	f001 fa95 	bl	8008380 <__assert_func>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e62:	bfa4      	itt	ge
 8006e64:	4623      	movge	r3, r4
 8006e66:	462c      	movge	r4, r5
 8006e68:	4638      	mov	r0, r7
 8006e6a:	6861      	ldr	r1, [r4, #4]
 8006e6c:	bfa6      	itte	ge
 8006e6e:	461d      	movge	r5, r3
 8006e70:	2600      	movge	r6, #0
 8006e72:	2601      	movlt	r6, #1
 8006e74:	f7ff fcf8 	bl	8006868 <_Balloc>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	b918      	cbnz	r0, 8006e84 <__mdiff+0x5c>
 8006e7c:	f240 2145 	movw	r1, #581	; 0x245
 8006e80:	4b2d      	ldr	r3, [pc, #180]	; (8006f38 <__mdiff+0x110>)
 8006e82:	e7e5      	b.n	8006e50 <__mdiff+0x28>
 8006e84:	f102 0814 	add.w	r8, r2, #20
 8006e88:	46c2      	mov	sl, r8
 8006e8a:	f04f 0c00 	mov.w	ip, #0
 8006e8e:	6927      	ldr	r7, [r4, #16]
 8006e90:	60c6      	str	r6, [r0, #12]
 8006e92:	692e      	ldr	r6, [r5, #16]
 8006e94:	f104 0014 	add.w	r0, r4, #20
 8006e98:	f105 0914 	add.w	r9, r5, #20
 8006e9c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006ea0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ea4:	3410      	adds	r4, #16
 8006ea6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006eaa:	f859 3b04 	ldr.w	r3, [r9], #4
 8006eae:	fa1f f18b 	uxth.w	r1, fp
 8006eb2:	4461      	add	r1, ip
 8006eb4:	fa1f fc83 	uxth.w	ip, r3
 8006eb8:	0c1b      	lsrs	r3, r3, #16
 8006eba:	eba1 010c 	sub.w	r1, r1, ip
 8006ebe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ec2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006ec6:	b289      	uxth	r1, r1
 8006ec8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006ecc:	454e      	cmp	r6, r9
 8006ece:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006ed2:	f84a 1b04 	str.w	r1, [sl], #4
 8006ed6:	d8e6      	bhi.n	8006ea6 <__mdiff+0x7e>
 8006ed8:	1b73      	subs	r3, r6, r5
 8006eda:	3b15      	subs	r3, #21
 8006edc:	f023 0303 	bic.w	r3, r3, #3
 8006ee0:	3515      	adds	r5, #21
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	42ae      	cmp	r6, r5
 8006ee6:	bf38      	it	cc
 8006ee8:	2304      	movcc	r3, #4
 8006eea:	4418      	add	r0, r3
 8006eec:	4443      	add	r3, r8
 8006eee:	461e      	mov	r6, r3
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	4575      	cmp	r5, lr
 8006ef4:	d30e      	bcc.n	8006f14 <__mdiff+0xec>
 8006ef6:	f10e 0103 	add.w	r1, lr, #3
 8006efa:	1a09      	subs	r1, r1, r0
 8006efc:	f021 0103 	bic.w	r1, r1, #3
 8006f00:	3803      	subs	r0, #3
 8006f02:	4586      	cmp	lr, r0
 8006f04:	bf38      	it	cc
 8006f06:	2100      	movcc	r1, #0
 8006f08:	440b      	add	r3, r1
 8006f0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f0e:	b189      	cbz	r1, 8006f34 <__mdiff+0x10c>
 8006f10:	6117      	str	r7, [r2, #16]
 8006f12:	e7a3      	b.n	8006e5c <__mdiff+0x34>
 8006f14:	f855 8b04 	ldr.w	r8, [r5], #4
 8006f18:	fa1f f188 	uxth.w	r1, r8
 8006f1c:	4461      	add	r1, ip
 8006f1e:	140c      	asrs	r4, r1, #16
 8006f20:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006f24:	b289      	uxth	r1, r1
 8006f26:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006f2a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006f2e:	f846 1b04 	str.w	r1, [r6], #4
 8006f32:	e7de      	b.n	8006ef2 <__mdiff+0xca>
 8006f34:	3f01      	subs	r7, #1
 8006f36:	e7e8      	b.n	8006f0a <__mdiff+0xe2>
 8006f38:	0800a69f 	.word	0x0800a69f
 8006f3c:	0800a6b0 	.word	0x0800a6b0

08006f40 <__ulp>:
 8006f40:	4b0e      	ldr	r3, [pc, #56]	; (8006f7c <__ulp+0x3c>)
 8006f42:	400b      	ands	r3, r1
 8006f44:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	dc08      	bgt.n	8006f5e <__ulp+0x1e>
 8006f4c:	425b      	negs	r3, r3
 8006f4e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006f52:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006f56:	da04      	bge.n	8006f62 <__ulp+0x22>
 8006f58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006f5c:	4113      	asrs	r3, r2
 8006f5e:	2200      	movs	r2, #0
 8006f60:	e008      	b.n	8006f74 <__ulp+0x34>
 8006f62:	f1a2 0314 	sub.w	r3, r2, #20
 8006f66:	2b1e      	cmp	r3, #30
 8006f68:	bfd6      	itet	le
 8006f6a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006f6e:	2201      	movgt	r2, #1
 8006f70:	40da      	lsrle	r2, r3
 8006f72:	2300      	movs	r3, #0
 8006f74:	4619      	mov	r1, r3
 8006f76:	4610      	mov	r0, r2
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	7ff00000 	.word	0x7ff00000

08006f80 <__b2d>:
 8006f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f82:	6905      	ldr	r5, [r0, #16]
 8006f84:	f100 0714 	add.w	r7, r0, #20
 8006f88:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006f8c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006f90:	1f2e      	subs	r6, r5, #4
 8006f92:	4620      	mov	r0, r4
 8006f94:	f7ff fd5a 	bl	8006a4c <__hi0bits>
 8006f98:	f1c0 0220 	rsb	r2, r0, #32
 8006f9c:	280a      	cmp	r0, #10
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800700c <__b2d+0x8c>
 8006fa4:	600a      	str	r2, [r1, #0]
 8006fa6:	dc12      	bgt.n	8006fce <__b2d+0x4e>
 8006fa8:	f1c0 0e0b 	rsb	lr, r0, #11
 8006fac:	fa24 f20e 	lsr.w	r2, r4, lr
 8006fb0:	42b7      	cmp	r7, r6
 8006fb2:	ea42 010c 	orr.w	r1, r2, ip
 8006fb6:	bf2c      	ite	cs
 8006fb8:	2200      	movcs	r2, #0
 8006fba:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006fbe:	3315      	adds	r3, #21
 8006fc0:	fa04 f303 	lsl.w	r3, r4, r3
 8006fc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	4610      	mov	r0, r2
 8006fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fce:	42b7      	cmp	r7, r6
 8006fd0:	bf2e      	itee	cs
 8006fd2:	2200      	movcs	r2, #0
 8006fd4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006fd8:	f1a5 0608 	subcc.w	r6, r5, #8
 8006fdc:	3b0b      	subs	r3, #11
 8006fde:	d012      	beq.n	8007006 <__b2d+0x86>
 8006fe0:	f1c3 0520 	rsb	r5, r3, #32
 8006fe4:	fa22 f105 	lsr.w	r1, r2, r5
 8006fe8:	409c      	lsls	r4, r3
 8006fea:	430c      	orrs	r4, r1
 8006fec:	42be      	cmp	r6, r7
 8006fee:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8006ff2:	bf94      	ite	ls
 8006ff4:	2400      	movls	r4, #0
 8006ff6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006ffa:	409a      	lsls	r2, r3
 8006ffc:	40ec      	lsrs	r4, r5
 8006ffe:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007002:	4322      	orrs	r2, r4
 8007004:	e7e1      	b.n	8006fca <__b2d+0x4a>
 8007006:	ea44 010c 	orr.w	r1, r4, ip
 800700a:	e7de      	b.n	8006fca <__b2d+0x4a>
 800700c:	3ff00000 	.word	0x3ff00000

08007010 <__d2b>:
 8007010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007012:	2101      	movs	r1, #1
 8007014:	4617      	mov	r7, r2
 8007016:	461c      	mov	r4, r3
 8007018:	9e08      	ldr	r6, [sp, #32]
 800701a:	f7ff fc25 	bl	8006868 <_Balloc>
 800701e:	4605      	mov	r5, r0
 8007020:	b930      	cbnz	r0, 8007030 <__d2b+0x20>
 8007022:	4602      	mov	r2, r0
 8007024:	f240 310f 	movw	r1, #783	; 0x30f
 8007028:	4b22      	ldr	r3, [pc, #136]	; (80070b4 <__d2b+0xa4>)
 800702a:	4823      	ldr	r0, [pc, #140]	; (80070b8 <__d2b+0xa8>)
 800702c:	f001 f9a8 	bl	8008380 <__assert_func>
 8007030:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007034:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007038:	bb24      	cbnz	r4, 8007084 <__d2b+0x74>
 800703a:	2f00      	cmp	r7, #0
 800703c:	9301      	str	r3, [sp, #4]
 800703e:	d026      	beq.n	800708e <__d2b+0x7e>
 8007040:	4668      	mov	r0, sp
 8007042:	9700      	str	r7, [sp, #0]
 8007044:	f7ff fd22 	bl	8006a8c <__lo0bits>
 8007048:	e9dd 1200 	ldrd	r1, r2, [sp]
 800704c:	b1e8      	cbz	r0, 800708a <__d2b+0x7a>
 800704e:	f1c0 0320 	rsb	r3, r0, #32
 8007052:	fa02 f303 	lsl.w	r3, r2, r3
 8007056:	430b      	orrs	r3, r1
 8007058:	40c2      	lsrs	r2, r0
 800705a:	616b      	str	r3, [r5, #20]
 800705c:	9201      	str	r2, [sp, #4]
 800705e:	9b01      	ldr	r3, [sp, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	bf14      	ite	ne
 8007064:	2102      	movne	r1, #2
 8007066:	2101      	moveq	r1, #1
 8007068:	61ab      	str	r3, [r5, #24]
 800706a:	6129      	str	r1, [r5, #16]
 800706c:	b1bc      	cbz	r4, 800709e <__d2b+0x8e>
 800706e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007072:	4404      	add	r4, r0
 8007074:	6034      	str	r4, [r6, #0]
 8007076:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800707a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800707c:	6018      	str	r0, [r3, #0]
 800707e:	4628      	mov	r0, r5
 8007080:	b003      	add	sp, #12
 8007082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007084:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007088:	e7d7      	b.n	800703a <__d2b+0x2a>
 800708a:	6169      	str	r1, [r5, #20]
 800708c:	e7e7      	b.n	800705e <__d2b+0x4e>
 800708e:	a801      	add	r0, sp, #4
 8007090:	f7ff fcfc 	bl	8006a8c <__lo0bits>
 8007094:	9b01      	ldr	r3, [sp, #4]
 8007096:	2101      	movs	r1, #1
 8007098:	616b      	str	r3, [r5, #20]
 800709a:	3020      	adds	r0, #32
 800709c:	e7e5      	b.n	800706a <__d2b+0x5a>
 800709e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80070a2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80070a6:	6030      	str	r0, [r6, #0]
 80070a8:	6918      	ldr	r0, [r3, #16]
 80070aa:	f7ff fccf 	bl	8006a4c <__hi0bits>
 80070ae:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80070b2:	e7e2      	b.n	800707a <__d2b+0x6a>
 80070b4:	0800a69f 	.word	0x0800a69f
 80070b8:	0800a6b0 	.word	0x0800a6b0

080070bc <__ratio>:
 80070bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c0:	4688      	mov	r8, r1
 80070c2:	4669      	mov	r1, sp
 80070c4:	4681      	mov	r9, r0
 80070c6:	f7ff ff5b 	bl	8006f80 <__b2d>
 80070ca:	460f      	mov	r7, r1
 80070cc:	4604      	mov	r4, r0
 80070ce:	460d      	mov	r5, r1
 80070d0:	4640      	mov	r0, r8
 80070d2:	a901      	add	r1, sp, #4
 80070d4:	f7ff ff54 	bl	8006f80 <__b2d>
 80070d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80070dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80070e0:	468b      	mov	fp, r1
 80070e2:	eba3 0c02 	sub.w	ip, r3, r2
 80070e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80070ea:	1a9b      	subs	r3, r3, r2
 80070ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	bfd5      	itete	le
 80070f4:	460a      	movle	r2, r1
 80070f6:	462a      	movgt	r2, r5
 80070f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80070fc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007100:	bfd8      	it	le
 8007102:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007106:	465b      	mov	r3, fp
 8007108:	4602      	mov	r2, r0
 800710a:	4639      	mov	r1, r7
 800710c:	4620      	mov	r0, r4
 800710e:	f7f9 fbc1 	bl	8000894 <__aeabi_ddiv>
 8007112:	b003      	add	sp, #12
 8007114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007118 <__copybits>:
 8007118:	3901      	subs	r1, #1
 800711a:	b570      	push	{r4, r5, r6, lr}
 800711c:	1149      	asrs	r1, r1, #5
 800711e:	6914      	ldr	r4, [r2, #16]
 8007120:	3101      	adds	r1, #1
 8007122:	f102 0314 	add.w	r3, r2, #20
 8007126:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800712a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800712e:	1f05      	subs	r5, r0, #4
 8007130:	42a3      	cmp	r3, r4
 8007132:	d30c      	bcc.n	800714e <__copybits+0x36>
 8007134:	1aa3      	subs	r3, r4, r2
 8007136:	3b11      	subs	r3, #17
 8007138:	f023 0303 	bic.w	r3, r3, #3
 800713c:	3211      	adds	r2, #17
 800713e:	42a2      	cmp	r2, r4
 8007140:	bf88      	it	hi
 8007142:	2300      	movhi	r3, #0
 8007144:	4418      	add	r0, r3
 8007146:	2300      	movs	r3, #0
 8007148:	4288      	cmp	r0, r1
 800714a:	d305      	bcc.n	8007158 <__copybits+0x40>
 800714c:	bd70      	pop	{r4, r5, r6, pc}
 800714e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007152:	f845 6f04 	str.w	r6, [r5, #4]!
 8007156:	e7eb      	b.n	8007130 <__copybits+0x18>
 8007158:	f840 3b04 	str.w	r3, [r0], #4
 800715c:	e7f4      	b.n	8007148 <__copybits+0x30>

0800715e <__any_on>:
 800715e:	f100 0214 	add.w	r2, r0, #20
 8007162:	6900      	ldr	r0, [r0, #16]
 8007164:	114b      	asrs	r3, r1, #5
 8007166:	4298      	cmp	r0, r3
 8007168:	b510      	push	{r4, lr}
 800716a:	db11      	blt.n	8007190 <__any_on+0x32>
 800716c:	dd0a      	ble.n	8007184 <__any_on+0x26>
 800716e:	f011 011f 	ands.w	r1, r1, #31
 8007172:	d007      	beq.n	8007184 <__any_on+0x26>
 8007174:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007178:	fa24 f001 	lsr.w	r0, r4, r1
 800717c:	fa00 f101 	lsl.w	r1, r0, r1
 8007180:	428c      	cmp	r4, r1
 8007182:	d10b      	bne.n	800719c <__any_on+0x3e>
 8007184:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007188:	4293      	cmp	r3, r2
 800718a:	d803      	bhi.n	8007194 <__any_on+0x36>
 800718c:	2000      	movs	r0, #0
 800718e:	bd10      	pop	{r4, pc}
 8007190:	4603      	mov	r3, r0
 8007192:	e7f7      	b.n	8007184 <__any_on+0x26>
 8007194:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007198:	2900      	cmp	r1, #0
 800719a:	d0f5      	beq.n	8007188 <__any_on+0x2a>
 800719c:	2001      	movs	r0, #1
 800719e:	e7f6      	b.n	800718e <__any_on+0x30>

080071a0 <sulp>:
 80071a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071a4:	460f      	mov	r7, r1
 80071a6:	4690      	mov	r8, r2
 80071a8:	f7ff feca 	bl	8006f40 <__ulp>
 80071ac:	4604      	mov	r4, r0
 80071ae:	460d      	mov	r5, r1
 80071b0:	f1b8 0f00 	cmp.w	r8, #0
 80071b4:	d011      	beq.n	80071da <sulp+0x3a>
 80071b6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80071ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80071be:	2b00      	cmp	r3, #0
 80071c0:	dd0b      	ble.n	80071da <sulp+0x3a>
 80071c2:	2400      	movs	r4, #0
 80071c4:	051b      	lsls	r3, r3, #20
 80071c6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80071ca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80071ce:	4622      	mov	r2, r4
 80071d0:	462b      	mov	r3, r5
 80071d2:	f7f9 fa35 	bl	8000640 <__aeabi_dmul>
 80071d6:	4604      	mov	r4, r0
 80071d8:	460d      	mov	r5, r1
 80071da:	4620      	mov	r0, r4
 80071dc:	4629      	mov	r1, r5
 80071de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e2:	0000      	movs	r0, r0
 80071e4:	0000      	movs	r0, r0
	...

080071e8 <_strtod_l>:
 80071e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ec:	b09f      	sub	sp, #124	; 0x7c
 80071ee:	9217      	str	r2, [sp, #92]	; 0x5c
 80071f0:	2200      	movs	r2, #0
 80071f2:	4604      	mov	r4, r0
 80071f4:	921a      	str	r2, [sp, #104]	; 0x68
 80071f6:	460d      	mov	r5, r1
 80071f8:	f04f 0800 	mov.w	r8, #0
 80071fc:	f04f 0900 	mov.w	r9, #0
 8007200:	460a      	mov	r2, r1
 8007202:	9219      	str	r2, [sp, #100]	; 0x64
 8007204:	7811      	ldrb	r1, [r2, #0]
 8007206:	292b      	cmp	r1, #43	; 0x2b
 8007208:	d04a      	beq.n	80072a0 <_strtod_l+0xb8>
 800720a:	d838      	bhi.n	800727e <_strtod_l+0x96>
 800720c:	290d      	cmp	r1, #13
 800720e:	d832      	bhi.n	8007276 <_strtod_l+0x8e>
 8007210:	2908      	cmp	r1, #8
 8007212:	d832      	bhi.n	800727a <_strtod_l+0x92>
 8007214:	2900      	cmp	r1, #0
 8007216:	d03b      	beq.n	8007290 <_strtod_l+0xa8>
 8007218:	2200      	movs	r2, #0
 800721a:	920e      	str	r2, [sp, #56]	; 0x38
 800721c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800721e:	7832      	ldrb	r2, [r6, #0]
 8007220:	2a30      	cmp	r2, #48	; 0x30
 8007222:	f040 80b2 	bne.w	800738a <_strtod_l+0x1a2>
 8007226:	7872      	ldrb	r2, [r6, #1]
 8007228:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800722c:	2a58      	cmp	r2, #88	; 0x58
 800722e:	d16e      	bne.n	800730e <_strtod_l+0x126>
 8007230:	9302      	str	r3, [sp, #8]
 8007232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007234:	4620      	mov	r0, r4
 8007236:	9301      	str	r3, [sp, #4]
 8007238:	ab1a      	add	r3, sp, #104	; 0x68
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	4a8c      	ldr	r2, [pc, #560]	; (8007470 <_strtod_l+0x288>)
 800723e:	ab1b      	add	r3, sp, #108	; 0x6c
 8007240:	a919      	add	r1, sp, #100	; 0x64
 8007242:	f001 f937 	bl	80084b4 <__gethex>
 8007246:	f010 070f 	ands.w	r7, r0, #15
 800724a:	4605      	mov	r5, r0
 800724c:	d005      	beq.n	800725a <_strtod_l+0x72>
 800724e:	2f06      	cmp	r7, #6
 8007250:	d128      	bne.n	80072a4 <_strtod_l+0xbc>
 8007252:	2300      	movs	r3, #0
 8007254:	3601      	adds	r6, #1
 8007256:	9619      	str	r6, [sp, #100]	; 0x64
 8007258:	930e      	str	r3, [sp, #56]	; 0x38
 800725a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800725c:	2b00      	cmp	r3, #0
 800725e:	f040 85a0 	bne.w	8007da2 <_strtod_l+0xbba>
 8007262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007264:	b1cb      	cbz	r3, 800729a <_strtod_l+0xb2>
 8007266:	4642      	mov	r2, r8
 8007268:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800726c:	4610      	mov	r0, r2
 800726e:	4619      	mov	r1, r3
 8007270:	b01f      	add	sp, #124	; 0x7c
 8007272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007276:	2920      	cmp	r1, #32
 8007278:	d1ce      	bne.n	8007218 <_strtod_l+0x30>
 800727a:	3201      	adds	r2, #1
 800727c:	e7c1      	b.n	8007202 <_strtod_l+0x1a>
 800727e:	292d      	cmp	r1, #45	; 0x2d
 8007280:	d1ca      	bne.n	8007218 <_strtod_l+0x30>
 8007282:	2101      	movs	r1, #1
 8007284:	910e      	str	r1, [sp, #56]	; 0x38
 8007286:	1c51      	adds	r1, r2, #1
 8007288:	9119      	str	r1, [sp, #100]	; 0x64
 800728a:	7852      	ldrb	r2, [r2, #1]
 800728c:	2a00      	cmp	r2, #0
 800728e:	d1c5      	bne.n	800721c <_strtod_l+0x34>
 8007290:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007292:	9519      	str	r5, [sp, #100]	; 0x64
 8007294:	2b00      	cmp	r3, #0
 8007296:	f040 8582 	bne.w	8007d9e <_strtod_l+0xbb6>
 800729a:	4642      	mov	r2, r8
 800729c:	464b      	mov	r3, r9
 800729e:	e7e5      	b.n	800726c <_strtod_l+0x84>
 80072a0:	2100      	movs	r1, #0
 80072a2:	e7ef      	b.n	8007284 <_strtod_l+0x9c>
 80072a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80072a6:	b13a      	cbz	r2, 80072b8 <_strtod_l+0xd0>
 80072a8:	2135      	movs	r1, #53	; 0x35
 80072aa:	a81c      	add	r0, sp, #112	; 0x70
 80072ac:	f7ff ff34 	bl	8007118 <__copybits>
 80072b0:	4620      	mov	r0, r4
 80072b2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80072b4:	f7ff fb18 	bl	80068e8 <_Bfree>
 80072b8:	3f01      	subs	r7, #1
 80072ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80072bc:	2f04      	cmp	r7, #4
 80072be:	d806      	bhi.n	80072ce <_strtod_l+0xe6>
 80072c0:	e8df f007 	tbb	[pc, r7]
 80072c4:	201d0314 	.word	0x201d0314
 80072c8:	14          	.byte	0x14
 80072c9:	00          	.byte	0x00
 80072ca:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80072ce:	05e9      	lsls	r1, r5, #23
 80072d0:	bf48      	it	mi
 80072d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80072d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80072da:	0d1b      	lsrs	r3, r3, #20
 80072dc:	051b      	lsls	r3, r3, #20
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1bb      	bne.n	800725a <_strtod_l+0x72>
 80072e2:	f7fe fb19 	bl	8005918 <__errno>
 80072e6:	2322      	movs	r3, #34	; 0x22
 80072e8:	6003      	str	r3, [r0, #0]
 80072ea:	e7b6      	b.n	800725a <_strtod_l+0x72>
 80072ec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80072f0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80072f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80072f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80072fc:	e7e7      	b.n	80072ce <_strtod_l+0xe6>
 80072fe:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007474 <_strtod_l+0x28c>
 8007302:	e7e4      	b.n	80072ce <_strtod_l+0xe6>
 8007304:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007308:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800730c:	e7df      	b.n	80072ce <_strtod_l+0xe6>
 800730e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007310:	1c5a      	adds	r2, r3, #1
 8007312:	9219      	str	r2, [sp, #100]	; 0x64
 8007314:	785b      	ldrb	r3, [r3, #1]
 8007316:	2b30      	cmp	r3, #48	; 0x30
 8007318:	d0f9      	beq.n	800730e <_strtod_l+0x126>
 800731a:	2b00      	cmp	r3, #0
 800731c:	d09d      	beq.n	800725a <_strtod_l+0x72>
 800731e:	2301      	movs	r3, #1
 8007320:	f04f 0a00 	mov.w	sl, #0
 8007324:	220a      	movs	r2, #10
 8007326:	46d3      	mov	fp, sl
 8007328:	9305      	str	r3, [sp, #20]
 800732a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800732c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007330:	930b      	str	r3, [sp, #44]	; 0x2c
 8007332:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007334:	7806      	ldrb	r6, [r0, #0]
 8007336:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800733a:	b2d9      	uxtb	r1, r3
 800733c:	2909      	cmp	r1, #9
 800733e:	d926      	bls.n	800738e <_strtod_l+0x1a6>
 8007340:	2201      	movs	r2, #1
 8007342:	494d      	ldr	r1, [pc, #308]	; (8007478 <_strtod_l+0x290>)
 8007344:	f000 ffe6 	bl	8008314 <strncmp>
 8007348:	2800      	cmp	r0, #0
 800734a:	d030      	beq.n	80073ae <_strtod_l+0x1c6>
 800734c:	2000      	movs	r0, #0
 800734e:	4632      	mov	r2, r6
 8007350:	4603      	mov	r3, r0
 8007352:	465e      	mov	r6, fp
 8007354:	9008      	str	r0, [sp, #32]
 8007356:	2a65      	cmp	r2, #101	; 0x65
 8007358:	d001      	beq.n	800735e <_strtod_l+0x176>
 800735a:	2a45      	cmp	r2, #69	; 0x45
 800735c:	d113      	bne.n	8007386 <_strtod_l+0x19e>
 800735e:	b91e      	cbnz	r6, 8007368 <_strtod_l+0x180>
 8007360:	9a05      	ldr	r2, [sp, #20]
 8007362:	4302      	orrs	r2, r0
 8007364:	d094      	beq.n	8007290 <_strtod_l+0xa8>
 8007366:	2600      	movs	r6, #0
 8007368:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800736a:	1c6a      	adds	r2, r5, #1
 800736c:	9219      	str	r2, [sp, #100]	; 0x64
 800736e:	786a      	ldrb	r2, [r5, #1]
 8007370:	2a2b      	cmp	r2, #43	; 0x2b
 8007372:	d074      	beq.n	800745e <_strtod_l+0x276>
 8007374:	2a2d      	cmp	r2, #45	; 0x2d
 8007376:	d078      	beq.n	800746a <_strtod_l+0x282>
 8007378:	f04f 0c00 	mov.w	ip, #0
 800737c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007380:	2909      	cmp	r1, #9
 8007382:	d97f      	bls.n	8007484 <_strtod_l+0x29c>
 8007384:	9519      	str	r5, [sp, #100]	; 0x64
 8007386:	2700      	movs	r7, #0
 8007388:	e09e      	b.n	80074c8 <_strtod_l+0x2e0>
 800738a:	2300      	movs	r3, #0
 800738c:	e7c8      	b.n	8007320 <_strtod_l+0x138>
 800738e:	f1bb 0f08 	cmp.w	fp, #8
 8007392:	bfd8      	it	le
 8007394:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007396:	f100 0001 	add.w	r0, r0, #1
 800739a:	bfd6      	itet	le
 800739c:	fb02 3301 	mlale	r3, r2, r1, r3
 80073a0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80073a4:	930a      	strle	r3, [sp, #40]	; 0x28
 80073a6:	f10b 0b01 	add.w	fp, fp, #1
 80073aa:	9019      	str	r0, [sp, #100]	; 0x64
 80073ac:	e7c1      	b.n	8007332 <_strtod_l+0x14a>
 80073ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	9219      	str	r2, [sp, #100]	; 0x64
 80073b4:	785a      	ldrb	r2, [r3, #1]
 80073b6:	f1bb 0f00 	cmp.w	fp, #0
 80073ba:	d037      	beq.n	800742c <_strtod_l+0x244>
 80073bc:	465e      	mov	r6, fp
 80073be:	9008      	str	r0, [sp, #32]
 80073c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80073c4:	2b09      	cmp	r3, #9
 80073c6:	d912      	bls.n	80073ee <_strtod_l+0x206>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e7c4      	b.n	8007356 <_strtod_l+0x16e>
 80073cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073ce:	3001      	adds	r0, #1
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	9219      	str	r2, [sp, #100]	; 0x64
 80073d4:	785a      	ldrb	r2, [r3, #1]
 80073d6:	2a30      	cmp	r2, #48	; 0x30
 80073d8:	d0f8      	beq.n	80073cc <_strtod_l+0x1e4>
 80073da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80073de:	2b08      	cmp	r3, #8
 80073e0:	f200 84e4 	bhi.w	8007dac <_strtod_l+0xbc4>
 80073e4:	9008      	str	r0, [sp, #32]
 80073e6:	2000      	movs	r0, #0
 80073e8:	4606      	mov	r6, r0
 80073ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80073ee:	3a30      	subs	r2, #48	; 0x30
 80073f0:	f100 0301 	add.w	r3, r0, #1
 80073f4:	d014      	beq.n	8007420 <_strtod_l+0x238>
 80073f6:	9908      	ldr	r1, [sp, #32]
 80073f8:	eb00 0c06 	add.w	ip, r0, r6
 80073fc:	4419      	add	r1, r3
 80073fe:	9108      	str	r1, [sp, #32]
 8007400:	4633      	mov	r3, r6
 8007402:	210a      	movs	r1, #10
 8007404:	4563      	cmp	r3, ip
 8007406:	d113      	bne.n	8007430 <_strtod_l+0x248>
 8007408:	1833      	adds	r3, r6, r0
 800740a:	2b08      	cmp	r3, #8
 800740c:	f106 0601 	add.w	r6, r6, #1
 8007410:	4406      	add	r6, r0
 8007412:	dc1a      	bgt.n	800744a <_strtod_l+0x262>
 8007414:	230a      	movs	r3, #10
 8007416:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007418:	fb03 2301 	mla	r3, r3, r1, r2
 800741c:	930a      	str	r3, [sp, #40]	; 0x28
 800741e:	2300      	movs	r3, #0
 8007420:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007422:	4618      	mov	r0, r3
 8007424:	1c51      	adds	r1, r2, #1
 8007426:	9119      	str	r1, [sp, #100]	; 0x64
 8007428:	7852      	ldrb	r2, [r2, #1]
 800742a:	e7c9      	b.n	80073c0 <_strtod_l+0x1d8>
 800742c:	4658      	mov	r0, fp
 800742e:	e7d2      	b.n	80073d6 <_strtod_l+0x1ee>
 8007430:	2b08      	cmp	r3, #8
 8007432:	f103 0301 	add.w	r3, r3, #1
 8007436:	dc03      	bgt.n	8007440 <_strtod_l+0x258>
 8007438:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800743a:	434f      	muls	r7, r1
 800743c:	970a      	str	r7, [sp, #40]	; 0x28
 800743e:	e7e1      	b.n	8007404 <_strtod_l+0x21c>
 8007440:	2b10      	cmp	r3, #16
 8007442:	bfd8      	it	le
 8007444:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007448:	e7dc      	b.n	8007404 <_strtod_l+0x21c>
 800744a:	2e10      	cmp	r6, #16
 800744c:	bfdc      	itt	le
 800744e:	230a      	movle	r3, #10
 8007450:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007454:	e7e3      	b.n	800741e <_strtod_l+0x236>
 8007456:	2300      	movs	r3, #0
 8007458:	9308      	str	r3, [sp, #32]
 800745a:	2301      	movs	r3, #1
 800745c:	e780      	b.n	8007360 <_strtod_l+0x178>
 800745e:	f04f 0c00 	mov.w	ip, #0
 8007462:	1caa      	adds	r2, r5, #2
 8007464:	9219      	str	r2, [sp, #100]	; 0x64
 8007466:	78aa      	ldrb	r2, [r5, #2]
 8007468:	e788      	b.n	800737c <_strtod_l+0x194>
 800746a:	f04f 0c01 	mov.w	ip, #1
 800746e:	e7f8      	b.n	8007462 <_strtod_l+0x27a>
 8007470:	0800a810 	.word	0x0800a810
 8007474:	7ff00000 	.word	0x7ff00000
 8007478:	0800a80c 	.word	0x0800a80c
 800747c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800747e:	1c51      	adds	r1, r2, #1
 8007480:	9119      	str	r1, [sp, #100]	; 0x64
 8007482:	7852      	ldrb	r2, [r2, #1]
 8007484:	2a30      	cmp	r2, #48	; 0x30
 8007486:	d0f9      	beq.n	800747c <_strtod_l+0x294>
 8007488:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800748c:	2908      	cmp	r1, #8
 800748e:	f63f af7a 	bhi.w	8007386 <_strtod_l+0x19e>
 8007492:	3a30      	subs	r2, #48	; 0x30
 8007494:	9209      	str	r2, [sp, #36]	; 0x24
 8007496:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007498:	920c      	str	r2, [sp, #48]	; 0x30
 800749a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800749c:	1c57      	adds	r7, r2, #1
 800749e:	9719      	str	r7, [sp, #100]	; 0x64
 80074a0:	7852      	ldrb	r2, [r2, #1]
 80074a2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80074a6:	f1be 0f09 	cmp.w	lr, #9
 80074aa:	d938      	bls.n	800751e <_strtod_l+0x336>
 80074ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80074ae:	1a7f      	subs	r7, r7, r1
 80074b0:	2f08      	cmp	r7, #8
 80074b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80074b6:	dc03      	bgt.n	80074c0 <_strtod_l+0x2d8>
 80074b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074ba:	428f      	cmp	r7, r1
 80074bc:	bfa8      	it	ge
 80074be:	460f      	movge	r7, r1
 80074c0:	f1bc 0f00 	cmp.w	ip, #0
 80074c4:	d000      	beq.n	80074c8 <_strtod_l+0x2e0>
 80074c6:	427f      	negs	r7, r7
 80074c8:	2e00      	cmp	r6, #0
 80074ca:	d14f      	bne.n	800756c <_strtod_l+0x384>
 80074cc:	9905      	ldr	r1, [sp, #20]
 80074ce:	4301      	orrs	r1, r0
 80074d0:	f47f aec3 	bne.w	800725a <_strtod_l+0x72>
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f47f aedb 	bne.w	8007290 <_strtod_l+0xa8>
 80074da:	2a69      	cmp	r2, #105	; 0x69
 80074dc:	d029      	beq.n	8007532 <_strtod_l+0x34a>
 80074de:	dc26      	bgt.n	800752e <_strtod_l+0x346>
 80074e0:	2a49      	cmp	r2, #73	; 0x49
 80074e2:	d026      	beq.n	8007532 <_strtod_l+0x34a>
 80074e4:	2a4e      	cmp	r2, #78	; 0x4e
 80074e6:	f47f aed3 	bne.w	8007290 <_strtod_l+0xa8>
 80074ea:	499a      	ldr	r1, [pc, #616]	; (8007754 <_strtod_l+0x56c>)
 80074ec:	a819      	add	r0, sp, #100	; 0x64
 80074ee:	f001 fa23 	bl	8008938 <__match>
 80074f2:	2800      	cmp	r0, #0
 80074f4:	f43f aecc 	beq.w	8007290 <_strtod_l+0xa8>
 80074f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	2b28      	cmp	r3, #40	; 0x28
 80074fe:	d12f      	bne.n	8007560 <_strtod_l+0x378>
 8007500:	4995      	ldr	r1, [pc, #596]	; (8007758 <_strtod_l+0x570>)
 8007502:	aa1c      	add	r2, sp, #112	; 0x70
 8007504:	a819      	add	r0, sp, #100	; 0x64
 8007506:	f001 fa2b 	bl	8008960 <__hexnan>
 800750a:	2805      	cmp	r0, #5
 800750c:	d128      	bne.n	8007560 <_strtod_l+0x378>
 800750e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007510:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007514:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007518:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800751c:	e69d      	b.n	800725a <_strtod_l+0x72>
 800751e:	210a      	movs	r1, #10
 8007520:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007522:	fb01 2107 	mla	r1, r1, r7, r2
 8007526:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800752a:	9209      	str	r2, [sp, #36]	; 0x24
 800752c:	e7b5      	b.n	800749a <_strtod_l+0x2b2>
 800752e:	2a6e      	cmp	r2, #110	; 0x6e
 8007530:	e7d9      	b.n	80074e6 <_strtod_l+0x2fe>
 8007532:	498a      	ldr	r1, [pc, #552]	; (800775c <_strtod_l+0x574>)
 8007534:	a819      	add	r0, sp, #100	; 0x64
 8007536:	f001 f9ff 	bl	8008938 <__match>
 800753a:	2800      	cmp	r0, #0
 800753c:	f43f aea8 	beq.w	8007290 <_strtod_l+0xa8>
 8007540:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007542:	4987      	ldr	r1, [pc, #540]	; (8007760 <_strtod_l+0x578>)
 8007544:	3b01      	subs	r3, #1
 8007546:	a819      	add	r0, sp, #100	; 0x64
 8007548:	9319      	str	r3, [sp, #100]	; 0x64
 800754a:	f001 f9f5 	bl	8008938 <__match>
 800754e:	b910      	cbnz	r0, 8007556 <_strtod_l+0x36e>
 8007550:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007552:	3301      	adds	r3, #1
 8007554:	9319      	str	r3, [sp, #100]	; 0x64
 8007556:	f04f 0800 	mov.w	r8, #0
 800755a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007764 <_strtod_l+0x57c>
 800755e:	e67c      	b.n	800725a <_strtod_l+0x72>
 8007560:	4881      	ldr	r0, [pc, #516]	; (8007768 <_strtod_l+0x580>)
 8007562:	f000 ff07 	bl	8008374 <nan>
 8007566:	4680      	mov	r8, r0
 8007568:	4689      	mov	r9, r1
 800756a:	e676      	b.n	800725a <_strtod_l+0x72>
 800756c:	9b08      	ldr	r3, [sp, #32]
 800756e:	f1bb 0f00 	cmp.w	fp, #0
 8007572:	bf08      	it	eq
 8007574:	46b3      	moveq	fp, r6
 8007576:	1afb      	subs	r3, r7, r3
 8007578:	2e10      	cmp	r6, #16
 800757a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800757c:	4635      	mov	r5, r6
 800757e:	9309      	str	r3, [sp, #36]	; 0x24
 8007580:	bfa8      	it	ge
 8007582:	2510      	movge	r5, #16
 8007584:	f7f8 ffe2 	bl	800054c <__aeabi_ui2d>
 8007588:	2e09      	cmp	r6, #9
 800758a:	4680      	mov	r8, r0
 800758c:	4689      	mov	r9, r1
 800758e:	dd13      	ble.n	80075b8 <_strtod_l+0x3d0>
 8007590:	4b76      	ldr	r3, [pc, #472]	; (800776c <_strtod_l+0x584>)
 8007592:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007596:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800759a:	f7f9 f851 	bl	8000640 <__aeabi_dmul>
 800759e:	4680      	mov	r8, r0
 80075a0:	4650      	mov	r0, sl
 80075a2:	4689      	mov	r9, r1
 80075a4:	f7f8 ffd2 	bl	800054c <__aeabi_ui2d>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4640      	mov	r0, r8
 80075ae:	4649      	mov	r1, r9
 80075b0:	f7f8 fe90 	bl	80002d4 <__adddf3>
 80075b4:	4680      	mov	r8, r0
 80075b6:	4689      	mov	r9, r1
 80075b8:	2e0f      	cmp	r6, #15
 80075ba:	dc36      	bgt.n	800762a <_strtod_l+0x442>
 80075bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f43f ae4b 	beq.w	800725a <_strtod_l+0x72>
 80075c4:	dd22      	ble.n	800760c <_strtod_l+0x424>
 80075c6:	2b16      	cmp	r3, #22
 80075c8:	dc09      	bgt.n	80075de <_strtod_l+0x3f6>
 80075ca:	4968      	ldr	r1, [pc, #416]	; (800776c <_strtod_l+0x584>)
 80075cc:	4642      	mov	r2, r8
 80075ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80075d2:	464b      	mov	r3, r9
 80075d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075d8:	f7f9 f832 	bl	8000640 <__aeabi_dmul>
 80075dc:	e7c3      	b.n	8007566 <_strtod_l+0x37e>
 80075de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075e0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80075e4:	4293      	cmp	r3, r2
 80075e6:	db20      	blt.n	800762a <_strtod_l+0x442>
 80075e8:	4c60      	ldr	r4, [pc, #384]	; (800776c <_strtod_l+0x584>)
 80075ea:	f1c6 060f 	rsb	r6, r6, #15
 80075ee:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80075f2:	4642      	mov	r2, r8
 80075f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075f8:	464b      	mov	r3, r9
 80075fa:	f7f9 f821 	bl	8000640 <__aeabi_dmul>
 80075fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007600:	1b9e      	subs	r6, r3, r6
 8007602:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007606:	e9d4 2300 	ldrd	r2, r3, [r4]
 800760a:	e7e5      	b.n	80075d8 <_strtod_l+0x3f0>
 800760c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800760e:	3316      	adds	r3, #22
 8007610:	db0b      	blt.n	800762a <_strtod_l+0x442>
 8007612:	9b08      	ldr	r3, [sp, #32]
 8007614:	4640      	mov	r0, r8
 8007616:	1bdf      	subs	r7, r3, r7
 8007618:	4b54      	ldr	r3, [pc, #336]	; (800776c <_strtod_l+0x584>)
 800761a:	4649      	mov	r1, r9
 800761c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007624:	f7f9 f936 	bl	8000894 <__aeabi_ddiv>
 8007628:	e79d      	b.n	8007566 <_strtod_l+0x37e>
 800762a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800762c:	1b75      	subs	r5, r6, r5
 800762e:	441d      	add	r5, r3
 8007630:	2d00      	cmp	r5, #0
 8007632:	dd70      	ble.n	8007716 <_strtod_l+0x52e>
 8007634:	f015 030f 	ands.w	r3, r5, #15
 8007638:	d00a      	beq.n	8007650 <_strtod_l+0x468>
 800763a:	494c      	ldr	r1, [pc, #304]	; (800776c <_strtod_l+0x584>)
 800763c:	4642      	mov	r2, r8
 800763e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007642:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007646:	464b      	mov	r3, r9
 8007648:	f7f8 fffa 	bl	8000640 <__aeabi_dmul>
 800764c:	4680      	mov	r8, r0
 800764e:	4689      	mov	r9, r1
 8007650:	f035 050f 	bics.w	r5, r5, #15
 8007654:	d04d      	beq.n	80076f2 <_strtod_l+0x50a>
 8007656:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800765a:	dd22      	ble.n	80076a2 <_strtod_l+0x4ba>
 800765c:	2600      	movs	r6, #0
 800765e:	46b3      	mov	fp, r6
 8007660:	960b      	str	r6, [sp, #44]	; 0x2c
 8007662:	9608      	str	r6, [sp, #32]
 8007664:	2322      	movs	r3, #34	; 0x22
 8007666:	f04f 0800 	mov.w	r8, #0
 800766a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007764 <_strtod_l+0x57c>
 800766e:	6023      	str	r3, [r4, #0]
 8007670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007672:	2b00      	cmp	r3, #0
 8007674:	f43f adf1 	beq.w	800725a <_strtod_l+0x72>
 8007678:	4620      	mov	r0, r4
 800767a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800767c:	f7ff f934 	bl	80068e8 <_Bfree>
 8007680:	4620      	mov	r0, r4
 8007682:	9908      	ldr	r1, [sp, #32]
 8007684:	f7ff f930 	bl	80068e8 <_Bfree>
 8007688:	4659      	mov	r1, fp
 800768a:	4620      	mov	r0, r4
 800768c:	f7ff f92c 	bl	80068e8 <_Bfree>
 8007690:	4620      	mov	r0, r4
 8007692:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007694:	f7ff f928 	bl	80068e8 <_Bfree>
 8007698:	4631      	mov	r1, r6
 800769a:	4620      	mov	r0, r4
 800769c:	f7ff f924 	bl	80068e8 <_Bfree>
 80076a0:	e5db      	b.n	800725a <_strtod_l+0x72>
 80076a2:	4b33      	ldr	r3, [pc, #204]	; (8007770 <_strtod_l+0x588>)
 80076a4:	4640      	mov	r0, r8
 80076a6:	9305      	str	r3, [sp, #20]
 80076a8:	2300      	movs	r3, #0
 80076aa:	4649      	mov	r1, r9
 80076ac:	469a      	mov	sl, r3
 80076ae:	112d      	asrs	r5, r5, #4
 80076b0:	2d01      	cmp	r5, #1
 80076b2:	dc21      	bgt.n	80076f8 <_strtod_l+0x510>
 80076b4:	b10b      	cbz	r3, 80076ba <_strtod_l+0x4d2>
 80076b6:	4680      	mov	r8, r0
 80076b8:	4689      	mov	r9, r1
 80076ba:	492d      	ldr	r1, [pc, #180]	; (8007770 <_strtod_l+0x588>)
 80076bc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80076c0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80076c4:	4642      	mov	r2, r8
 80076c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076ca:	464b      	mov	r3, r9
 80076cc:	f7f8 ffb8 	bl	8000640 <__aeabi_dmul>
 80076d0:	4b24      	ldr	r3, [pc, #144]	; (8007764 <_strtod_l+0x57c>)
 80076d2:	460a      	mov	r2, r1
 80076d4:	400b      	ands	r3, r1
 80076d6:	4927      	ldr	r1, [pc, #156]	; (8007774 <_strtod_l+0x58c>)
 80076d8:	4680      	mov	r8, r0
 80076da:	428b      	cmp	r3, r1
 80076dc:	d8be      	bhi.n	800765c <_strtod_l+0x474>
 80076de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80076e2:	428b      	cmp	r3, r1
 80076e4:	bf86      	itte	hi
 80076e6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80076ea:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007778 <_strtod_l+0x590>
 80076ee:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80076f2:	2300      	movs	r3, #0
 80076f4:	9305      	str	r3, [sp, #20]
 80076f6:	e07b      	b.n	80077f0 <_strtod_l+0x608>
 80076f8:	07ea      	lsls	r2, r5, #31
 80076fa:	d505      	bpl.n	8007708 <_strtod_l+0x520>
 80076fc:	9b05      	ldr	r3, [sp, #20]
 80076fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007702:	f7f8 ff9d 	bl	8000640 <__aeabi_dmul>
 8007706:	2301      	movs	r3, #1
 8007708:	9a05      	ldr	r2, [sp, #20]
 800770a:	f10a 0a01 	add.w	sl, sl, #1
 800770e:	3208      	adds	r2, #8
 8007710:	106d      	asrs	r5, r5, #1
 8007712:	9205      	str	r2, [sp, #20]
 8007714:	e7cc      	b.n	80076b0 <_strtod_l+0x4c8>
 8007716:	d0ec      	beq.n	80076f2 <_strtod_l+0x50a>
 8007718:	426d      	negs	r5, r5
 800771a:	f015 020f 	ands.w	r2, r5, #15
 800771e:	d00a      	beq.n	8007736 <_strtod_l+0x54e>
 8007720:	4b12      	ldr	r3, [pc, #72]	; (800776c <_strtod_l+0x584>)
 8007722:	4640      	mov	r0, r8
 8007724:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007728:	4649      	mov	r1, r9
 800772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772e:	f7f9 f8b1 	bl	8000894 <__aeabi_ddiv>
 8007732:	4680      	mov	r8, r0
 8007734:	4689      	mov	r9, r1
 8007736:	112d      	asrs	r5, r5, #4
 8007738:	d0db      	beq.n	80076f2 <_strtod_l+0x50a>
 800773a:	2d1f      	cmp	r5, #31
 800773c:	dd1e      	ble.n	800777c <_strtod_l+0x594>
 800773e:	2600      	movs	r6, #0
 8007740:	46b3      	mov	fp, r6
 8007742:	960b      	str	r6, [sp, #44]	; 0x2c
 8007744:	9608      	str	r6, [sp, #32]
 8007746:	2322      	movs	r3, #34	; 0x22
 8007748:	f04f 0800 	mov.w	r8, #0
 800774c:	f04f 0900 	mov.w	r9, #0
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	e78d      	b.n	8007670 <_strtod_l+0x488>
 8007754:	0800a5f7 	.word	0x0800a5f7
 8007758:	0800a824 	.word	0x0800a824
 800775c:	0800a5ef 	.word	0x0800a5ef
 8007760:	0800a626 	.word	0x0800a626
 8007764:	7ff00000 	.word	0x7ff00000
 8007768:	0800a9b5 	.word	0x0800a9b5
 800776c:	0800a738 	.word	0x0800a738
 8007770:	0800a710 	.word	0x0800a710
 8007774:	7ca00000 	.word	0x7ca00000
 8007778:	7fefffff 	.word	0x7fefffff
 800777c:	f015 0310 	ands.w	r3, r5, #16
 8007780:	bf18      	it	ne
 8007782:	236a      	movne	r3, #106	; 0x6a
 8007784:	4640      	mov	r0, r8
 8007786:	9305      	str	r3, [sp, #20]
 8007788:	4649      	mov	r1, r9
 800778a:	2300      	movs	r3, #0
 800778c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007a58 <_strtod_l+0x870>
 8007790:	07ea      	lsls	r2, r5, #31
 8007792:	d504      	bpl.n	800779e <_strtod_l+0x5b6>
 8007794:	e9da 2300 	ldrd	r2, r3, [sl]
 8007798:	f7f8 ff52 	bl	8000640 <__aeabi_dmul>
 800779c:	2301      	movs	r3, #1
 800779e:	106d      	asrs	r5, r5, #1
 80077a0:	f10a 0a08 	add.w	sl, sl, #8
 80077a4:	d1f4      	bne.n	8007790 <_strtod_l+0x5a8>
 80077a6:	b10b      	cbz	r3, 80077ac <_strtod_l+0x5c4>
 80077a8:	4680      	mov	r8, r0
 80077aa:	4689      	mov	r9, r1
 80077ac:	9b05      	ldr	r3, [sp, #20]
 80077ae:	b1bb      	cbz	r3, 80077e0 <_strtod_l+0x5f8>
 80077b0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80077b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	4649      	mov	r1, r9
 80077bc:	dd10      	ble.n	80077e0 <_strtod_l+0x5f8>
 80077be:	2b1f      	cmp	r3, #31
 80077c0:	f340 8128 	ble.w	8007a14 <_strtod_l+0x82c>
 80077c4:	2b34      	cmp	r3, #52	; 0x34
 80077c6:	bfd8      	it	le
 80077c8:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80077cc:	f04f 0800 	mov.w	r8, #0
 80077d0:	bfcf      	iteee	gt
 80077d2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80077d6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80077da:	4093      	lslle	r3, r2
 80077dc:	ea03 0901 	andle.w	r9, r3, r1
 80077e0:	2200      	movs	r2, #0
 80077e2:	2300      	movs	r3, #0
 80077e4:	4640      	mov	r0, r8
 80077e6:	4649      	mov	r1, r9
 80077e8:	f7f9 f992 	bl	8000b10 <__aeabi_dcmpeq>
 80077ec:	2800      	cmp	r0, #0
 80077ee:	d1a6      	bne.n	800773e <_strtod_l+0x556>
 80077f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f2:	465a      	mov	r2, fp
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	4620      	mov	r0, r4
 80077f8:	4633      	mov	r3, r6
 80077fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077fc:	f7ff f8dc 	bl	80069b8 <__s2b>
 8007800:	900b      	str	r0, [sp, #44]	; 0x2c
 8007802:	2800      	cmp	r0, #0
 8007804:	f43f af2a 	beq.w	800765c <_strtod_l+0x474>
 8007808:	2600      	movs	r6, #0
 800780a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800780c:	9b08      	ldr	r3, [sp, #32]
 800780e:	2a00      	cmp	r2, #0
 8007810:	eba3 0307 	sub.w	r3, r3, r7
 8007814:	bfa8      	it	ge
 8007816:	2300      	movge	r3, #0
 8007818:	46b3      	mov	fp, r6
 800781a:	9312      	str	r3, [sp, #72]	; 0x48
 800781c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007820:	9316      	str	r3, [sp, #88]	; 0x58
 8007822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007824:	4620      	mov	r0, r4
 8007826:	6859      	ldr	r1, [r3, #4]
 8007828:	f7ff f81e 	bl	8006868 <_Balloc>
 800782c:	9008      	str	r0, [sp, #32]
 800782e:	2800      	cmp	r0, #0
 8007830:	f43f af18 	beq.w	8007664 <_strtod_l+0x47c>
 8007834:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007836:	300c      	adds	r0, #12
 8007838:	691a      	ldr	r2, [r3, #16]
 800783a:	f103 010c 	add.w	r1, r3, #12
 800783e:	3202      	adds	r2, #2
 8007840:	0092      	lsls	r2, r2, #2
 8007842:	f000 fd89 	bl	8008358 <memcpy>
 8007846:	ab1c      	add	r3, sp, #112	; 0x70
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	ab1b      	add	r3, sp, #108	; 0x6c
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	4642      	mov	r2, r8
 8007850:	464b      	mov	r3, r9
 8007852:	4620      	mov	r0, r4
 8007854:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007858:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800785c:	f7ff fbd8 	bl	8007010 <__d2b>
 8007860:	901a      	str	r0, [sp, #104]	; 0x68
 8007862:	2800      	cmp	r0, #0
 8007864:	f43f aefe 	beq.w	8007664 <_strtod_l+0x47c>
 8007868:	2101      	movs	r1, #1
 800786a:	4620      	mov	r0, r4
 800786c:	f7ff f93c 	bl	8006ae8 <__i2b>
 8007870:	4683      	mov	fp, r0
 8007872:	2800      	cmp	r0, #0
 8007874:	f43f aef6 	beq.w	8007664 <_strtod_l+0x47c>
 8007878:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800787a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800787c:	2f00      	cmp	r7, #0
 800787e:	bfab      	itete	ge
 8007880:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007882:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007884:	eb07 0a03 	addge.w	sl, r7, r3
 8007888:	1bdd      	sublt	r5, r3, r7
 800788a:	9b05      	ldr	r3, [sp, #20]
 800788c:	bfa8      	it	ge
 800788e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007890:	eba7 0703 	sub.w	r7, r7, r3
 8007894:	4417      	add	r7, r2
 8007896:	4b71      	ldr	r3, [pc, #452]	; (8007a5c <_strtod_l+0x874>)
 8007898:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 800789c:	bfb8      	it	lt
 800789e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80078a2:	429f      	cmp	r7, r3
 80078a4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80078a8:	f280 80c7 	bge.w	8007a3a <_strtod_l+0x852>
 80078ac:	1bdb      	subs	r3, r3, r7
 80078ae:	2b1f      	cmp	r3, #31
 80078b0:	f04f 0101 	mov.w	r1, #1
 80078b4:	eba2 0203 	sub.w	r2, r2, r3
 80078b8:	f300 80b3 	bgt.w	8007a22 <_strtod_l+0x83a>
 80078bc:	fa01 f303 	lsl.w	r3, r1, r3
 80078c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80078c2:	2300      	movs	r3, #0
 80078c4:	9310      	str	r3, [sp, #64]	; 0x40
 80078c6:	eb0a 0702 	add.w	r7, sl, r2
 80078ca:	9b05      	ldr	r3, [sp, #20]
 80078cc:	45ba      	cmp	sl, r7
 80078ce:	4415      	add	r5, r2
 80078d0:	441d      	add	r5, r3
 80078d2:	4653      	mov	r3, sl
 80078d4:	bfa8      	it	ge
 80078d6:	463b      	movge	r3, r7
 80078d8:	42ab      	cmp	r3, r5
 80078da:	bfa8      	it	ge
 80078dc:	462b      	movge	r3, r5
 80078de:	2b00      	cmp	r3, #0
 80078e0:	bfc2      	ittt	gt
 80078e2:	1aff      	subgt	r7, r7, r3
 80078e4:	1aed      	subgt	r5, r5, r3
 80078e6:	ebaa 0a03 	subgt.w	sl, sl, r3
 80078ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	dd17      	ble.n	8007920 <_strtod_l+0x738>
 80078f0:	4659      	mov	r1, fp
 80078f2:	461a      	mov	r2, r3
 80078f4:	4620      	mov	r0, r4
 80078f6:	f7ff f9b5 	bl	8006c64 <__pow5mult>
 80078fa:	4683      	mov	fp, r0
 80078fc:	2800      	cmp	r0, #0
 80078fe:	f43f aeb1 	beq.w	8007664 <_strtod_l+0x47c>
 8007902:	4601      	mov	r1, r0
 8007904:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007906:	4620      	mov	r0, r4
 8007908:	f7ff f904 	bl	8006b14 <__multiply>
 800790c:	900a      	str	r0, [sp, #40]	; 0x28
 800790e:	2800      	cmp	r0, #0
 8007910:	f43f aea8 	beq.w	8007664 <_strtod_l+0x47c>
 8007914:	4620      	mov	r0, r4
 8007916:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007918:	f7fe ffe6 	bl	80068e8 <_Bfree>
 800791c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800791e:	931a      	str	r3, [sp, #104]	; 0x68
 8007920:	2f00      	cmp	r7, #0
 8007922:	f300 808f 	bgt.w	8007a44 <_strtod_l+0x85c>
 8007926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007928:	2b00      	cmp	r3, #0
 800792a:	dd08      	ble.n	800793e <_strtod_l+0x756>
 800792c:	4620      	mov	r0, r4
 800792e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007930:	9908      	ldr	r1, [sp, #32]
 8007932:	f7ff f997 	bl	8006c64 <__pow5mult>
 8007936:	9008      	str	r0, [sp, #32]
 8007938:	2800      	cmp	r0, #0
 800793a:	f43f ae93 	beq.w	8007664 <_strtod_l+0x47c>
 800793e:	2d00      	cmp	r5, #0
 8007940:	dd08      	ble.n	8007954 <_strtod_l+0x76c>
 8007942:	462a      	mov	r2, r5
 8007944:	4620      	mov	r0, r4
 8007946:	9908      	ldr	r1, [sp, #32]
 8007948:	f7ff f9e6 	bl	8006d18 <__lshift>
 800794c:	9008      	str	r0, [sp, #32]
 800794e:	2800      	cmp	r0, #0
 8007950:	f43f ae88 	beq.w	8007664 <_strtod_l+0x47c>
 8007954:	f1ba 0f00 	cmp.w	sl, #0
 8007958:	dd08      	ble.n	800796c <_strtod_l+0x784>
 800795a:	4659      	mov	r1, fp
 800795c:	4652      	mov	r2, sl
 800795e:	4620      	mov	r0, r4
 8007960:	f7ff f9da 	bl	8006d18 <__lshift>
 8007964:	4683      	mov	fp, r0
 8007966:	2800      	cmp	r0, #0
 8007968:	f43f ae7c 	beq.w	8007664 <_strtod_l+0x47c>
 800796c:	4620      	mov	r0, r4
 800796e:	9a08      	ldr	r2, [sp, #32]
 8007970:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007972:	f7ff fa59 	bl	8006e28 <__mdiff>
 8007976:	4606      	mov	r6, r0
 8007978:	2800      	cmp	r0, #0
 800797a:	f43f ae73 	beq.w	8007664 <_strtod_l+0x47c>
 800797e:	2500      	movs	r5, #0
 8007980:	68c3      	ldr	r3, [r0, #12]
 8007982:	4659      	mov	r1, fp
 8007984:	60c5      	str	r5, [r0, #12]
 8007986:	930a      	str	r3, [sp, #40]	; 0x28
 8007988:	f7ff fa32 	bl	8006df0 <__mcmp>
 800798c:	42a8      	cmp	r0, r5
 800798e:	da6b      	bge.n	8007a68 <_strtod_l+0x880>
 8007990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007992:	ea53 0308 	orrs.w	r3, r3, r8
 8007996:	f040 808f 	bne.w	8007ab8 <_strtod_l+0x8d0>
 800799a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f040 808a 	bne.w	8007ab8 <_strtod_l+0x8d0>
 80079a4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80079a8:	0d1b      	lsrs	r3, r3, #20
 80079aa:	051b      	lsls	r3, r3, #20
 80079ac:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80079b0:	f240 8082 	bls.w	8007ab8 <_strtod_l+0x8d0>
 80079b4:	6973      	ldr	r3, [r6, #20]
 80079b6:	b913      	cbnz	r3, 80079be <_strtod_l+0x7d6>
 80079b8:	6933      	ldr	r3, [r6, #16]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	dd7c      	ble.n	8007ab8 <_strtod_l+0x8d0>
 80079be:	4631      	mov	r1, r6
 80079c0:	2201      	movs	r2, #1
 80079c2:	4620      	mov	r0, r4
 80079c4:	f7ff f9a8 	bl	8006d18 <__lshift>
 80079c8:	4659      	mov	r1, fp
 80079ca:	4606      	mov	r6, r0
 80079cc:	f7ff fa10 	bl	8006df0 <__mcmp>
 80079d0:	2800      	cmp	r0, #0
 80079d2:	dd71      	ble.n	8007ab8 <_strtod_l+0x8d0>
 80079d4:	9905      	ldr	r1, [sp, #20]
 80079d6:	464b      	mov	r3, r9
 80079d8:	4a21      	ldr	r2, [pc, #132]	; (8007a60 <_strtod_l+0x878>)
 80079da:	2900      	cmp	r1, #0
 80079dc:	f000 808d 	beq.w	8007afa <_strtod_l+0x912>
 80079e0:	ea02 0109 	and.w	r1, r2, r9
 80079e4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80079e8:	f300 8087 	bgt.w	8007afa <_strtod_l+0x912>
 80079ec:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80079f0:	f77f aea9 	ble.w	8007746 <_strtod_l+0x55e>
 80079f4:	4640      	mov	r0, r8
 80079f6:	4649      	mov	r1, r9
 80079f8:	4b1a      	ldr	r3, [pc, #104]	; (8007a64 <_strtod_l+0x87c>)
 80079fa:	2200      	movs	r2, #0
 80079fc:	f7f8 fe20 	bl	8000640 <__aeabi_dmul>
 8007a00:	4b17      	ldr	r3, [pc, #92]	; (8007a60 <_strtod_l+0x878>)
 8007a02:	4680      	mov	r8, r0
 8007a04:	400b      	ands	r3, r1
 8007a06:	4689      	mov	r9, r1
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f47f ae35 	bne.w	8007678 <_strtod_l+0x490>
 8007a0e:	2322      	movs	r3, #34	; 0x22
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	e631      	b.n	8007678 <_strtod_l+0x490>
 8007a14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a18:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1c:	ea03 0808 	and.w	r8, r3, r8
 8007a20:	e6de      	b.n	80077e0 <_strtod_l+0x5f8>
 8007a22:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8007a26:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8007a2a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8007a2e:	37e2      	adds	r7, #226	; 0xe2
 8007a30:	fa01 f307 	lsl.w	r3, r1, r7
 8007a34:	9310      	str	r3, [sp, #64]	; 0x40
 8007a36:	9113      	str	r1, [sp, #76]	; 0x4c
 8007a38:	e745      	b.n	80078c6 <_strtod_l+0x6de>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	9310      	str	r3, [sp, #64]	; 0x40
 8007a3e:	2301      	movs	r3, #1
 8007a40:	9313      	str	r3, [sp, #76]	; 0x4c
 8007a42:	e740      	b.n	80078c6 <_strtod_l+0x6de>
 8007a44:	463a      	mov	r2, r7
 8007a46:	4620      	mov	r0, r4
 8007a48:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007a4a:	f7ff f965 	bl	8006d18 <__lshift>
 8007a4e:	901a      	str	r0, [sp, #104]	; 0x68
 8007a50:	2800      	cmp	r0, #0
 8007a52:	f47f af68 	bne.w	8007926 <_strtod_l+0x73e>
 8007a56:	e605      	b.n	8007664 <_strtod_l+0x47c>
 8007a58:	0800a838 	.word	0x0800a838
 8007a5c:	fffffc02 	.word	0xfffffc02
 8007a60:	7ff00000 	.word	0x7ff00000
 8007a64:	39500000 	.word	0x39500000
 8007a68:	46ca      	mov	sl, r9
 8007a6a:	d165      	bne.n	8007b38 <_strtod_l+0x950>
 8007a6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a72:	b352      	cbz	r2, 8007aca <_strtod_l+0x8e2>
 8007a74:	4a9e      	ldr	r2, [pc, #632]	; (8007cf0 <_strtod_l+0xb08>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d12a      	bne.n	8007ad0 <_strtod_l+0x8e8>
 8007a7a:	9b05      	ldr	r3, [sp, #20]
 8007a7c:	4641      	mov	r1, r8
 8007a7e:	b1fb      	cbz	r3, 8007ac0 <_strtod_l+0x8d8>
 8007a80:	4b9c      	ldr	r3, [pc, #624]	; (8007cf4 <_strtod_l+0xb0c>)
 8007a82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a86:	ea09 0303 	and.w	r3, r9, r3
 8007a8a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007a8e:	d81a      	bhi.n	8007ac6 <_strtod_l+0x8de>
 8007a90:	0d1b      	lsrs	r3, r3, #20
 8007a92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a96:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9a:	4299      	cmp	r1, r3
 8007a9c:	d118      	bne.n	8007ad0 <_strtod_l+0x8e8>
 8007a9e:	4b96      	ldr	r3, [pc, #600]	; (8007cf8 <_strtod_l+0xb10>)
 8007aa0:	459a      	cmp	sl, r3
 8007aa2:	d102      	bne.n	8007aaa <_strtod_l+0x8c2>
 8007aa4:	3101      	adds	r1, #1
 8007aa6:	f43f addd 	beq.w	8007664 <_strtod_l+0x47c>
 8007aaa:	f04f 0800 	mov.w	r8, #0
 8007aae:	4b91      	ldr	r3, [pc, #580]	; (8007cf4 <_strtod_l+0xb0c>)
 8007ab0:	ea0a 0303 	and.w	r3, sl, r3
 8007ab4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007ab8:	9b05      	ldr	r3, [sp, #20]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d19a      	bne.n	80079f4 <_strtod_l+0x80c>
 8007abe:	e5db      	b.n	8007678 <_strtod_l+0x490>
 8007ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ac4:	e7e9      	b.n	8007a9a <_strtod_l+0x8b2>
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	e7e7      	b.n	8007a9a <_strtod_l+0x8b2>
 8007aca:	ea53 0308 	orrs.w	r3, r3, r8
 8007ace:	d081      	beq.n	80079d4 <_strtod_l+0x7ec>
 8007ad0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ad2:	b1e3      	cbz	r3, 8007b0e <_strtod_l+0x926>
 8007ad4:	ea13 0f0a 	tst.w	r3, sl
 8007ad8:	d0ee      	beq.n	8007ab8 <_strtod_l+0x8d0>
 8007ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007adc:	4640      	mov	r0, r8
 8007ade:	4649      	mov	r1, r9
 8007ae0:	9a05      	ldr	r2, [sp, #20]
 8007ae2:	b1c3      	cbz	r3, 8007b16 <_strtod_l+0x92e>
 8007ae4:	f7ff fb5c 	bl	80071a0 <sulp>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007aee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007af0:	f7f8 fbf0 	bl	80002d4 <__adddf3>
 8007af4:	4680      	mov	r8, r0
 8007af6:	4689      	mov	r9, r1
 8007af8:	e7de      	b.n	8007ab8 <_strtod_l+0x8d0>
 8007afa:	4013      	ands	r3, r2
 8007afc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007b00:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007b04:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007b08:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007b0c:	e7d4      	b.n	8007ab8 <_strtod_l+0x8d0>
 8007b0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b10:	ea13 0f08 	tst.w	r3, r8
 8007b14:	e7e0      	b.n	8007ad8 <_strtod_l+0x8f0>
 8007b16:	f7ff fb43 	bl	80071a0 <sulp>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007b20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007b22:	f7f8 fbd5 	bl	80002d0 <__aeabi_dsub>
 8007b26:	2200      	movs	r2, #0
 8007b28:	2300      	movs	r3, #0
 8007b2a:	4680      	mov	r8, r0
 8007b2c:	4689      	mov	r9, r1
 8007b2e:	f7f8 ffef 	bl	8000b10 <__aeabi_dcmpeq>
 8007b32:	2800      	cmp	r0, #0
 8007b34:	d0c0      	beq.n	8007ab8 <_strtod_l+0x8d0>
 8007b36:	e606      	b.n	8007746 <_strtod_l+0x55e>
 8007b38:	4659      	mov	r1, fp
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	f7ff fabe 	bl	80070bc <__ratio>
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
 8007b44:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b4e:	f7f8 fff3 	bl	8000b38 <__aeabi_dcmple>
 8007b52:	2800      	cmp	r0, #0
 8007b54:	d06f      	beq.n	8007c36 <_strtod_l+0xa4e>
 8007b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d17c      	bne.n	8007c56 <_strtod_l+0xa6e>
 8007b5c:	f1b8 0f00 	cmp.w	r8, #0
 8007b60:	d159      	bne.n	8007c16 <_strtod_l+0xa2e>
 8007b62:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d17b      	bne.n	8007c62 <_strtod_l+0xa7a>
 8007b6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b6e:	2200      	movs	r2, #0
 8007b70:	4b62      	ldr	r3, [pc, #392]	; (8007cfc <_strtod_l+0xb14>)
 8007b72:	f7f8 ffd7 	bl	8000b24 <__aeabi_dcmplt>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	d15a      	bne.n	8007c30 <_strtod_l+0xa48>
 8007b7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b7e:	2200      	movs	r2, #0
 8007b80:	4b5f      	ldr	r3, [pc, #380]	; (8007d00 <_strtod_l+0xb18>)
 8007b82:	f7f8 fd5d 	bl	8000640 <__aeabi_dmul>
 8007b86:	4605      	mov	r5, r0
 8007b88:	460f      	mov	r7, r1
 8007b8a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007b8e:	9506      	str	r5, [sp, #24]
 8007b90:	9307      	str	r3, [sp, #28]
 8007b92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b96:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007b9a:	4b56      	ldr	r3, [pc, #344]	; (8007cf4 <_strtod_l+0xb0c>)
 8007b9c:	4a55      	ldr	r2, [pc, #340]	; (8007cf4 <_strtod_l+0xb0c>)
 8007b9e:	ea0a 0303 	and.w	r3, sl, r3
 8007ba2:	9313      	str	r3, [sp, #76]	; 0x4c
 8007ba4:	4b57      	ldr	r3, [pc, #348]	; (8007d04 <_strtod_l+0xb1c>)
 8007ba6:	ea0a 0202 	and.w	r2, sl, r2
 8007baa:	429a      	cmp	r2, r3
 8007bac:	f040 80b0 	bne.w	8007d10 <_strtod_l+0xb28>
 8007bb0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007bb4:	4640      	mov	r0, r8
 8007bb6:	4649      	mov	r1, r9
 8007bb8:	f7ff f9c2 	bl	8006f40 <__ulp>
 8007bbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007bc0:	f7f8 fd3e 	bl	8000640 <__aeabi_dmul>
 8007bc4:	4642      	mov	r2, r8
 8007bc6:	464b      	mov	r3, r9
 8007bc8:	f7f8 fb84 	bl	80002d4 <__adddf3>
 8007bcc:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007cf4 <_strtod_l+0xb0c>
 8007bd0:	4a4d      	ldr	r2, [pc, #308]	; (8007d08 <_strtod_l+0xb20>)
 8007bd2:	ea01 0a0a 	and.w	sl, r1, sl
 8007bd6:	4592      	cmp	sl, r2
 8007bd8:	4680      	mov	r8, r0
 8007bda:	d948      	bls.n	8007c6e <_strtod_l+0xa86>
 8007bdc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bde:	4b46      	ldr	r3, [pc, #280]	; (8007cf8 <_strtod_l+0xb10>)
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d103      	bne.n	8007bec <_strtod_l+0xa04>
 8007be4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007be6:	3301      	adds	r3, #1
 8007be8:	f43f ad3c 	beq.w	8007664 <_strtod_l+0x47c>
 8007bec:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007bf0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007cf8 <_strtod_l+0xb10>
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007bf8:	f7fe fe76 	bl	80068e8 <_Bfree>
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	9908      	ldr	r1, [sp, #32]
 8007c00:	f7fe fe72 	bl	80068e8 <_Bfree>
 8007c04:	4659      	mov	r1, fp
 8007c06:	4620      	mov	r0, r4
 8007c08:	f7fe fe6e 	bl	80068e8 <_Bfree>
 8007c0c:	4631      	mov	r1, r6
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f7fe fe6a 	bl	80068e8 <_Bfree>
 8007c14:	e605      	b.n	8007822 <_strtod_l+0x63a>
 8007c16:	f1b8 0f01 	cmp.w	r8, #1
 8007c1a:	d103      	bne.n	8007c24 <_strtod_l+0xa3c>
 8007c1c:	f1b9 0f00 	cmp.w	r9, #0
 8007c20:	f43f ad91 	beq.w	8007746 <_strtod_l+0x55e>
 8007c24:	2200      	movs	r2, #0
 8007c26:	4b39      	ldr	r3, [pc, #228]	; (8007d0c <_strtod_l+0xb24>)
 8007c28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007c2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c2e:	e016      	b.n	8007c5e <_strtod_l+0xa76>
 8007c30:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007c32:	4f33      	ldr	r7, [pc, #204]	; (8007d00 <_strtod_l+0xb18>)
 8007c34:	e7a9      	b.n	8007b8a <_strtod_l+0x9a2>
 8007c36:	4b32      	ldr	r3, [pc, #200]	; (8007d00 <_strtod_l+0xb18>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c3e:	f7f8 fcff 	bl	8000640 <__aeabi_dmul>
 8007c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c44:	4605      	mov	r5, r0
 8007c46:	460f      	mov	r7, r1
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d09e      	beq.n	8007b8a <_strtod_l+0x9a2>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c54:	e79d      	b.n	8007b92 <_strtod_l+0x9aa>
 8007c56:	2200      	movs	r2, #0
 8007c58:	4b28      	ldr	r3, [pc, #160]	; (8007cfc <_strtod_l+0xb14>)
 8007c5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c5e:	4f27      	ldr	r7, [pc, #156]	; (8007cfc <_strtod_l+0xb14>)
 8007c60:	e797      	b.n	8007b92 <_strtod_l+0x9aa>
 8007c62:	2200      	movs	r2, #0
 8007c64:	4b29      	ldr	r3, [pc, #164]	; (8007d0c <_strtod_l+0xb24>)
 8007c66:	4645      	mov	r5, r8
 8007c68:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c6c:	e7f7      	b.n	8007c5e <_strtod_l+0xa76>
 8007c6e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007c72:	9b05      	ldr	r3, [sp, #20]
 8007c74:	46ca      	mov	sl, r9
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1bc      	bne.n	8007bf4 <_strtod_l+0xa0c>
 8007c7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c7e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c80:	0d1b      	lsrs	r3, r3, #20
 8007c82:	051b      	lsls	r3, r3, #20
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d1b5      	bne.n	8007bf4 <_strtod_l+0xa0c>
 8007c88:	4628      	mov	r0, r5
 8007c8a:	4639      	mov	r1, r7
 8007c8c:	f7f9 f92e 	bl	8000eec <__aeabi_d2lz>
 8007c90:	f7f8 fca8 	bl	80005e4 <__aeabi_l2d>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	4628      	mov	r0, r5
 8007c9a:	4639      	mov	r1, r7
 8007c9c:	f7f8 fb18 	bl	80002d0 <__aeabi_dsub>
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007ca8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cae:	ea4a 0a08 	orr.w	sl, sl, r8
 8007cb2:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007cb6:	d06c      	beq.n	8007d92 <_strtod_l+0xbaa>
 8007cb8:	a309      	add	r3, pc, #36	; (adr r3, 8007ce0 <_strtod_l+0xaf8>)
 8007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbe:	f7f8 ff31 	bl	8000b24 <__aeabi_dcmplt>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	f47f acd8 	bne.w	8007678 <_strtod_l+0x490>
 8007cc8:	a307      	add	r3, pc, #28	; (adr r3, 8007ce8 <_strtod_l+0xb00>)
 8007cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007cd2:	f7f8 ff45 	bl	8000b60 <__aeabi_dcmpgt>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d08c      	beq.n	8007bf4 <_strtod_l+0xa0c>
 8007cda:	e4cd      	b.n	8007678 <_strtod_l+0x490>
 8007cdc:	f3af 8000 	nop.w
 8007ce0:	94a03595 	.word	0x94a03595
 8007ce4:	3fdfffff 	.word	0x3fdfffff
 8007ce8:	35afe535 	.word	0x35afe535
 8007cec:	3fe00000 	.word	0x3fe00000
 8007cf0:	000fffff 	.word	0x000fffff
 8007cf4:	7ff00000 	.word	0x7ff00000
 8007cf8:	7fefffff 	.word	0x7fefffff
 8007cfc:	3ff00000 	.word	0x3ff00000
 8007d00:	3fe00000 	.word	0x3fe00000
 8007d04:	7fe00000 	.word	0x7fe00000
 8007d08:	7c9fffff 	.word	0x7c9fffff
 8007d0c:	bff00000 	.word	0xbff00000
 8007d10:	9b05      	ldr	r3, [sp, #20]
 8007d12:	b333      	cbz	r3, 8007d62 <_strtod_l+0xb7a>
 8007d14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d1a:	d822      	bhi.n	8007d62 <_strtod_l+0xb7a>
 8007d1c:	a328      	add	r3, pc, #160	; (adr r3, 8007dc0 <_strtod_l+0xbd8>)
 8007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d22:	4628      	mov	r0, r5
 8007d24:	4639      	mov	r1, r7
 8007d26:	f7f8 ff07 	bl	8000b38 <__aeabi_dcmple>
 8007d2a:	b1a0      	cbz	r0, 8007d56 <_strtod_l+0xb6e>
 8007d2c:	4639      	mov	r1, r7
 8007d2e:	4628      	mov	r0, r5
 8007d30:	f7f8 ff5e 	bl	8000bf0 <__aeabi_d2uiz>
 8007d34:	2801      	cmp	r0, #1
 8007d36:	bf38      	it	cc
 8007d38:	2001      	movcc	r0, #1
 8007d3a:	f7f8 fc07 	bl	800054c <__aeabi_ui2d>
 8007d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d40:	4605      	mov	r5, r0
 8007d42:	460f      	mov	r7, r1
 8007d44:	bb03      	cbnz	r3, 8007d88 <_strtod_l+0xba0>
 8007d46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d4a:	9014      	str	r0, [sp, #80]	; 0x50
 8007d4c:	9315      	str	r3, [sp, #84]	; 0x54
 8007d4e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007d52:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007d56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d5a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007d5e:	1a9b      	subs	r3, r3, r2
 8007d60:	9311      	str	r3, [sp, #68]	; 0x44
 8007d62:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007d64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007d66:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007d6a:	f7ff f8e9 	bl	8006f40 <__ulp>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	4640      	mov	r0, r8
 8007d74:	4649      	mov	r1, r9
 8007d76:	f7f8 fc63 	bl	8000640 <__aeabi_dmul>
 8007d7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d7e:	f7f8 faa9 	bl	80002d4 <__adddf3>
 8007d82:	4680      	mov	r8, r0
 8007d84:	4689      	mov	r9, r1
 8007d86:	e774      	b.n	8007c72 <_strtod_l+0xa8a>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007d90:	e7dd      	b.n	8007d4e <_strtod_l+0xb66>
 8007d92:	a30d      	add	r3, pc, #52	; (adr r3, 8007dc8 <_strtod_l+0xbe0>)
 8007d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d98:	f7f8 fec4 	bl	8000b24 <__aeabi_dcmplt>
 8007d9c:	e79b      	b.n	8007cd6 <_strtod_l+0xaee>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	930e      	str	r3, [sp, #56]	; 0x38
 8007da2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007da4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007da6:	6013      	str	r3, [r2, #0]
 8007da8:	f7ff ba5b 	b.w	8007262 <_strtod_l+0x7a>
 8007dac:	2a65      	cmp	r2, #101	; 0x65
 8007dae:	f43f ab52 	beq.w	8007456 <_strtod_l+0x26e>
 8007db2:	2a45      	cmp	r2, #69	; 0x45
 8007db4:	f43f ab4f 	beq.w	8007456 <_strtod_l+0x26e>
 8007db8:	2301      	movs	r3, #1
 8007dba:	f7ff bb87 	b.w	80074cc <_strtod_l+0x2e4>
 8007dbe:	bf00      	nop
 8007dc0:	ffc00000 	.word	0xffc00000
 8007dc4:	41dfffff 	.word	0x41dfffff
 8007dc8:	94a03595 	.word	0x94a03595
 8007dcc:	3fcfffff 	.word	0x3fcfffff

08007dd0 <_strtod_r>:
 8007dd0:	4b01      	ldr	r3, [pc, #4]	; (8007dd8 <_strtod_r+0x8>)
 8007dd2:	f7ff ba09 	b.w	80071e8 <_strtod_l>
 8007dd6:	bf00      	nop
 8007dd8:	20000078 	.word	0x20000078

08007ddc <_strtol_l.constprop.0>:
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007de2:	4686      	mov	lr, r0
 8007de4:	4690      	mov	r8, r2
 8007de6:	d001      	beq.n	8007dec <_strtol_l.constprop.0+0x10>
 8007de8:	2b24      	cmp	r3, #36	; 0x24
 8007dea:	d906      	bls.n	8007dfa <_strtol_l.constprop.0+0x1e>
 8007dec:	f7fd fd94 	bl	8005918 <__errno>
 8007df0:	2316      	movs	r3, #22
 8007df2:	6003      	str	r3, [r0, #0]
 8007df4:	2000      	movs	r0, #0
 8007df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dfa:	460d      	mov	r5, r1
 8007dfc:	4835      	ldr	r0, [pc, #212]	; (8007ed4 <_strtol_l.constprop.0+0xf8>)
 8007dfe:	462a      	mov	r2, r5
 8007e00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e04:	5d06      	ldrb	r6, [r0, r4]
 8007e06:	f016 0608 	ands.w	r6, r6, #8
 8007e0a:	d1f8      	bne.n	8007dfe <_strtol_l.constprop.0+0x22>
 8007e0c:	2c2d      	cmp	r4, #45	; 0x2d
 8007e0e:	d12e      	bne.n	8007e6e <_strtol_l.constprop.0+0x92>
 8007e10:	2601      	movs	r6, #1
 8007e12:	782c      	ldrb	r4, [r5, #0]
 8007e14:	1c95      	adds	r5, r2, #2
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d057      	beq.n	8007eca <_strtol_l.constprop.0+0xee>
 8007e1a:	2b10      	cmp	r3, #16
 8007e1c:	d109      	bne.n	8007e32 <_strtol_l.constprop.0+0x56>
 8007e1e:	2c30      	cmp	r4, #48	; 0x30
 8007e20:	d107      	bne.n	8007e32 <_strtol_l.constprop.0+0x56>
 8007e22:	782a      	ldrb	r2, [r5, #0]
 8007e24:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007e28:	2a58      	cmp	r2, #88	; 0x58
 8007e2a:	d149      	bne.n	8007ec0 <_strtol_l.constprop.0+0xe4>
 8007e2c:	2310      	movs	r3, #16
 8007e2e:	786c      	ldrb	r4, [r5, #1]
 8007e30:	3502      	adds	r5, #2
 8007e32:	2200      	movs	r2, #0
 8007e34:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007e38:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8007e3c:	fbbc f9f3 	udiv	r9, ip, r3
 8007e40:	4610      	mov	r0, r2
 8007e42:	fb03 ca19 	mls	sl, r3, r9, ip
 8007e46:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007e4a:	2f09      	cmp	r7, #9
 8007e4c:	d814      	bhi.n	8007e78 <_strtol_l.constprop.0+0x9c>
 8007e4e:	463c      	mov	r4, r7
 8007e50:	42a3      	cmp	r3, r4
 8007e52:	dd20      	ble.n	8007e96 <_strtol_l.constprop.0+0xba>
 8007e54:	1c57      	adds	r7, r2, #1
 8007e56:	d007      	beq.n	8007e68 <_strtol_l.constprop.0+0x8c>
 8007e58:	4581      	cmp	r9, r0
 8007e5a:	d319      	bcc.n	8007e90 <_strtol_l.constprop.0+0xb4>
 8007e5c:	d101      	bne.n	8007e62 <_strtol_l.constprop.0+0x86>
 8007e5e:	45a2      	cmp	sl, r4
 8007e60:	db16      	blt.n	8007e90 <_strtol_l.constprop.0+0xb4>
 8007e62:	2201      	movs	r2, #1
 8007e64:	fb00 4003 	mla	r0, r0, r3, r4
 8007e68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e6c:	e7eb      	b.n	8007e46 <_strtol_l.constprop.0+0x6a>
 8007e6e:	2c2b      	cmp	r4, #43	; 0x2b
 8007e70:	bf04      	itt	eq
 8007e72:	782c      	ldrbeq	r4, [r5, #0]
 8007e74:	1c95      	addeq	r5, r2, #2
 8007e76:	e7ce      	b.n	8007e16 <_strtol_l.constprop.0+0x3a>
 8007e78:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007e7c:	2f19      	cmp	r7, #25
 8007e7e:	d801      	bhi.n	8007e84 <_strtol_l.constprop.0+0xa8>
 8007e80:	3c37      	subs	r4, #55	; 0x37
 8007e82:	e7e5      	b.n	8007e50 <_strtol_l.constprop.0+0x74>
 8007e84:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007e88:	2f19      	cmp	r7, #25
 8007e8a:	d804      	bhi.n	8007e96 <_strtol_l.constprop.0+0xba>
 8007e8c:	3c57      	subs	r4, #87	; 0x57
 8007e8e:	e7df      	b.n	8007e50 <_strtol_l.constprop.0+0x74>
 8007e90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e94:	e7e8      	b.n	8007e68 <_strtol_l.constprop.0+0x8c>
 8007e96:	1c53      	adds	r3, r2, #1
 8007e98:	d108      	bne.n	8007eac <_strtol_l.constprop.0+0xd0>
 8007e9a:	2322      	movs	r3, #34	; 0x22
 8007e9c:	4660      	mov	r0, ip
 8007e9e:	f8ce 3000 	str.w	r3, [lr]
 8007ea2:	f1b8 0f00 	cmp.w	r8, #0
 8007ea6:	d0a6      	beq.n	8007df6 <_strtol_l.constprop.0+0x1a>
 8007ea8:	1e69      	subs	r1, r5, #1
 8007eaa:	e006      	b.n	8007eba <_strtol_l.constprop.0+0xde>
 8007eac:	b106      	cbz	r6, 8007eb0 <_strtol_l.constprop.0+0xd4>
 8007eae:	4240      	negs	r0, r0
 8007eb0:	f1b8 0f00 	cmp.w	r8, #0
 8007eb4:	d09f      	beq.n	8007df6 <_strtol_l.constprop.0+0x1a>
 8007eb6:	2a00      	cmp	r2, #0
 8007eb8:	d1f6      	bne.n	8007ea8 <_strtol_l.constprop.0+0xcc>
 8007eba:	f8c8 1000 	str.w	r1, [r8]
 8007ebe:	e79a      	b.n	8007df6 <_strtol_l.constprop.0+0x1a>
 8007ec0:	2430      	movs	r4, #48	; 0x30
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1b5      	bne.n	8007e32 <_strtol_l.constprop.0+0x56>
 8007ec6:	2308      	movs	r3, #8
 8007ec8:	e7b3      	b.n	8007e32 <_strtol_l.constprop.0+0x56>
 8007eca:	2c30      	cmp	r4, #48	; 0x30
 8007ecc:	d0a9      	beq.n	8007e22 <_strtol_l.constprop.0+0x46>
 8007ece:	230a      	movs	r3, #10
 8007ed0:	e7af      	b.n	8007e32 <_strtol_l.constprop.0+0x56>
 8007ed2:	bf00      	nop
 8007ed4:	0800a861 	.word	0x0800a861

08007ed8 <_strtol_r>:
 8007ed8:	f7ff bf80 	b.w	8007ddc <_strtol_l.constprop.0>

08007edc <__ssputs_r>:
 8007edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee0:	461f      	mov	r7, r3
 8007ee2:	688e      	ldr	r6, [r1, #8]
 8007ee4:	4682      	mov	sl, r0
 8007ee6:	42be      	cmp	r6, r7
 8007ee8:	460c      	mov	r4, r1
 8007eea:	4690      	mov	r8, r2
 8007eec:	680b      	ldr	r3, [r1, #0]
 8007eee:	d82c      	bhi.n	8007f4a <__ssputs_r+0x6e>
 8007ef0:	898a      	ldrh	r2, [r1, #12]
 8007ef2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ef6:	d026      	beq.n	8007f46 <__ssputs_r+0x6a>
 8007ef8:	6965      	ldr	r5, [r4, #20]
 8007efa:	6909      	ldr	r1, [r1, #16]
 8007efc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f00:	eba3 0901 	sub.w	r9, r3, r1
 8007f04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f08:	1c7b      	adds	r3, r7, #1
 8007f0a:	444b      	add	r3, r9
 8007f0c:	106d      	asrs	r5, r5, #1
 8007f0e:	429d      	cmp	r5, r3
 8007f10:	bf38      	it	cc
 8007f12:	461d      	movcc	r5, r3
 8007f14:	0553      	lsls	r3, r2, #21
 8007f16:	d527      	bpl.n	8007f68 <__ssputs_r+0x8c>
 8007f18:	4629      	mov	r1, r5
 8007f1a:	f7fe fc19 	bl	8006750 <_malloc_r>
 8007f1e:	4606      	mov	r6, r0
 8007f20:	b360      	cbz	r0, 8007f7c <__ssputs_r+0xa0>
 8007f22:	464a      	mov	r2, r9
 8007f24:	6921      	ldr	r1, [r4, #16]
 8007f26:	f000 fa17 	bl	8008358 <memcpy>
 8007f2a:	89a3      	ldrh	r3, [r4, #12]
 8007f2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f34:	81a3      	strh	r3, [r4, #12]
 8007f36:	6126      	str	r6, [r4, #16]
 8007f38:	444e      	add	r6, r9
 8007f3a:	6026      	str	r6, [r4, #0]
 8007f3c:	463e      	mov	r6, r7
 8007f3e:	6165      	str	r5, [r4, #20]
 8007f40:	eba5 0509 	sub.w	r5, r5, r9
 8007f44:	60a5      	str	r5, [r4, #8]
 8007f46:	42be      	cmp	r6, r7
 8007f48:	d900      	bls.n	8007f4c <__ssputs_r+0x70>
 8007f4a:	463e      	mov	r6, r7
 8007f4c:	4632      	mov	r2, r6
 8007f4e:	4641      	mov	r1, r8
 8007f50:	6820      	ldr	r0, [r4, #0]
 8007f52:	f000 f9c5 	bl	80082e0 <memmove>
 8007f56:	2000      	movs	r0, #0
 8007f58:	68a3      	ldr	r3, [r4, #8]
 8007f5a:	1b9b      	subs	r3, r3, r6
 8007f5c:	60a3      	str	r3, [r4, #8]
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	4433      	add	r3, r6
 8007f62:	6023      	str	r3, [r4, #0]
 8007f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f68:	462a      	mov	r2, r5
 8007f6a:	f000 fda6 	bl	8008aba <_realloc_r>
 8007f6e:	4606      	mov	r6, r0
 8007f70:	2800      	cmp	r0, #0
 8007f72:	d1e0      	bne.n	8007f36 <__ssputs_r+0x5a>
 8007f74:	4650      	mov	r0, sl
 8007f76:	6921      	ldr	r1, [r4, #16]
 8007f78:	f7fe fb7a 	bl	8006670 <_free_r>
 8007f7c:	230c      	movs	r3, #12
 8007f7e:	f8ca 3000 	str.w	r3, [sl]
 8007f82:	89a3      	ldrh	r3, [r4, #12]
 8007f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f8c:	81a3      	strh	r3, [r4, #12]
 8007f8e:	e7e9      	b.n	8007f64 <__ssputs_r+0x88>

08007f90 <_svfiprintf_r>:
 8007f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f94:	4698      	mov	r8, r3
 8007f96:	898b      	ldrh	r3, [r1, #12]
 8007f98:	4607      	mov	r7, r0
 8007f9a:	061b      	lsls	r3, r3, #24
 8007f9c:	460d      	mov	r5, r1
 8007f9e:	4614      	mov	r4, r2
 8007fa0:	b09d      	sub	sp, #116	; 0x74
 8007fa2:	d50e      	bpl.n	8007fc2 <_svfiprintf_r+0x32>
 8007fa4:	690b      	ldr	r3, [r1, #16]
 8007fa6:	b963      	cbnz	r3, 8007fc2 <_svfiprintf_r+0x32>
 8007fa8:	2140      	movs	r1, #64	; 0x40
 8007faa:	f7fe fbd1 	bl	8006750 <_malloc_r>
 8007fae:	6028      	str	r0, [r5, #0]
 8007fb0:	6128      	str	r0, [r5, #16]
 8007fb2:	b920      	cbnz	r0, 8007fbe <_svfiprintf_r+0x2e>
 8007fb4:	230c      	movs	r3, #12
 8007fb6:	603b      	str	r3, [r7, #0]
 8007fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fbc:	e0d0      	b.n	8008160 <_svfiprintf_r+0x1d0>
 8007fbe:	2340      	movs	r3, #64	; 0x40
 8007fc0:	616b      	str	r3, [r5, #20]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fc6:	2320      	movs	r3, #32
 8007fc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fcc:	2330      	movs	r3, #48	; 0x30
 8007fce:	f04f 0901 	mov.w	r9, #1
 8007fd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fd6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008178 <_svfiprintf_r+0x1e8>
 8007fda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fde:	4623      	mov	r3, r4
 8007fe0:	469a      	mov	sl, r3
 8007fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fe6:	b10a      	cbz	r2, 8007fec <_svfiprintf_r+0x5c>
 8007fe8:	2a25      	cmp	r2, #37	; 0x25
 8007fea:	d1f9      	bne.n	8007fe0 <_svfiprintf_r+0x50>
 8007fec:	ebba 0b04 	subs.w	fp, sl, r4
 8007ff0:	d00b      	beq.n	800800a <_svfiprintf_r+0x7a>
 8007ff2:	465b      	mov	r3, fp
 8007ff4:	4622      	mov	r2, r4
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	4638      	mov	r0, r7
 8007ffa:	f7ff ff6f 	bl	8007edc <__ssputs_r>
 8007ffe:	3001      	adds	r0, #1
 8008000:	f000 80a9 	beq.w	8008156 <_svfiprintf_r+0x1c6>
 8008004:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008006:	445a      	add	r2, fp
 8008008:	9209      	str	r2, [sp, #36]	; 0x24
 800800a:	f89a 3000 	ldrb.w	r3, [sl]
 800800e:	2b00      	cmp	r3, #0
 8008010:	f000 80a1 	beq.w	8008156 <_svfiprintf_r+0x1c6>
 8008014:	2300      	movs	r3, #0
 8008016:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800801a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800801e:	f10a 0a01 	add.w	sl, sl, #1
 8008022:	9304      	str	r3, [sp, #16]
 8008024:	9307      	str	r3, [sp, #28]
 8008026:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800802a:	931a      	str	r3, [sp, #104]	; 0x68
 800802c:	4654      	mov	r4, sl
 800802e:	2205      	movs	r2, #5
 8008030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008034:	4850      	ldr	r0, [pc, #320]	; (8008178 <_svfiprintf_r+0x1e8>)
 8008036:	f7fd fc9b 	bl	8005970 <memchr>
 800803a:	9a04      	ldr	r2, [sp, #16]
 800803c:	b9d8      	cbnz	r0, 8008076 <_svfiprintf_r+0xe6>
 800803e:	06d0      	lsls	r0, r2, #27
 8008040:	bf44      	itt	mi
 8008042:	2320      	movmi	r3, #32
 8008044:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008048:	0711      	lsls	r1, r2, #28
 800804a:	bf44      	itt	mi
 800804c:	232b      	movmi	r3, #43	; 0x2b
 800804e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008052:	f89a 3000 	ldrb.w	r3, [sl]
 8008056:	2b2a      	cmp	r3, #42	; 0x2a
 8008058:	d015      	beq.n	8008086 <_svfiprintf_r+0xf6>
 800805a:	4654      	mov	r4, sl
 800805c:	2000      	movs	r0, #0
 800805e:	f04f 0c0a 	mov.w	ip, #10
 8008062:	9a07      	ldr	r2, [sp, #28]
 8008064:	4621      	mov	r1, r4
 8008066:	f811 3b01 	ldrb.w	r3, [r1], #1
 800806a:	3b30      	subs	r3, #48	; 0x30
 800806c:	2b09      	cmp	r3, #9
 800806e:	d94d      	bls.n	800810c <_svfiprintf_r+0x17c>
 8008070:	b1b0      	cbz	r0, 80080a0 <_svfiprintf_r+0x110>
 8008072:	9207      	str	r2, [sp, #28]
 8008074:	e014      	b.n	80080a0 <_svfiprintf_r+0x110>
 8008076:	eba0 0308 	sub.w	r3, r0, r8
 800807a:	fa09 f303 	lsl.w	r3, r9, r3
 800807e:	4313      	orrs	r3, r2
 8008080:	46a2      	mov	sl, r4
 8008082:	9304      	str	r3, [sp, #16]
 8008084:	e7d2      	b.n	800802c <_svfiprintf_r+0x9c>
 8008086:	9b03      	ldr	r3, [sp, #12]
 8008088:	1d19      	adds	r1, r3, #4
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	9103      	str	r1, [sp, #12]
 800808e:	2b00      	cmp	r3, #0
 8008090:	bfbb      	ittet	lt
 8008092:	425b      	neglt	r3, r3
 8008094:	f042 0202 	orrlt.w	r2, r2, #2
 8008098:	9307      	strge	r3, [sp, #28]
 800809a:	9307      	strlt	r3, [sp, #28]
 800809c:	bfb8      	it	lt
 800809e:	9204      	strlt	r2, [sp, #16]
 80080a0:	7823      	ldrb	r3, [r4, #0]
 80080a2:	2b2e      	cmp	r3, #46	; 0x2e
 80080a4:	d10c      	bne.n	80080c0 <_svfiprintf_r+0x130>
 80080a6:	7863      	ldrb	r3, [r4, #1]
 80080a8:	2b2a      	cmp	r3, #42	; 0x2a
 80080aa:	d134      	bne.n	8008116 <_svfiprintf_r+0x186>
 80080ac:	9b03      	ldr	r3, [sp, #12]
 80080ae:	3402      	adds	r4, #2
 80080b0:	1d1a      	adds	r2, r3, #4
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	9203      	str	r2, [sp, #12]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	bfb8      	it	lt
 80080ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80080be:	9305      	str	r3, [sp, #20]
 80080c0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800817c <_svfiprintf_r+0x1ec>
 80080c4:	2203      	movs	r2, #3
 80080c6:	4650      	mov	r0, sl
 80080c8:	7821      	ldrb	r1, [r4, #0]
 80080ca:	f7fd fc51 	bl	8005970 <memchr>
 80080ce:	b138      	cbz	r0, 80080e0 <_svfiprintf_r+0x150>
 80080d0:	2240      	movs	r2, #64	; 0x40
 80080d2:	9b04      	ldr	r3, [sp, #16]
 80080d4:	eba0 000a 	sub.w	r0, r0, sl
 80080d8:	4082      	lsls	r2, r0
 80080da:	4313      	orrs	r3, r2
 80080dc:	3401      	adds	r4, #1
 80080de:	9304      	str	r3, [sp, #16]
 80080e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e4:	2206      	movs	r2, #6
 80080e6:	4826      	ldr	r0, [pc, #152]	; (8008180 <_svfiprintf_r+0x1f0>)
 80080e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080ec:	f7fd fc40 	bl	8005970 <memchr>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d038      	beq.n	8008166 <_svfiprintf_r+0x1d6>
 80080f4:	4b23      	ldr	r3, [pc, #140]	; (8008184 <_svfiprintf_r+0x1f4>)
 80080f6:	bb1b      	cbnz	r3, 8008140 <_svfiprintf_r+0x1b0>
 80080f8:	9b03      	ldr	r3, [sp, #12]
 80080fa:	3307      	adds	r3, #7
 80080fc:	f023 0307 	bic.w	r3, r3, #7
 8008100:	3308      	adds	r3, #8
 8008102:	9303      	str	r3, [sp, #12]
 8008104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008106:	4433      	add	r3, r6
 8008108:	9309      	str	r3, [sp, #36]	; 0x24
 800810a:	e768      	b.n	8007fde <_svfiprintf_r+0x4e>
 800810c:	460c      	mov	r4, r1
 800810e:	2001      	movs	r0, #1
 8008110:	fb0c 3202 	mla	r2, ip, r2, r3
 8008114:	e7a6      	b.n	8008064 <_svfiprintf_r+0xd4>
 8008116:	2300      	movs	r3, #0
 8008118:	f04f 0c0a 	mov.w	ip, #10
 800811c:	4619      	mov	r1, r3
 800811e:	3401      	adds	r4, #1
 8008120:	9305      	str	r3, [sp, #20]
 8008122:	4620      	mov	r0, r4
 8008124:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008128:	3a30      	subs	r2, #48	; 0x30
 800812a:	2a09      	cmp	r2, #9
 800812c:	d903      	bls.n	8008136 <_svfiprintf_r+0x1a6>
 800812e:	2b00      	cmp	r3, #0
 8008130:	d0c6      	beq.n	80080c0 <_svfiprintf_r+0x130>
 8008132:	9105      	str	r1, [sp, #20]
 8008134:	e7c4      	b.n	80080c0 <_svfiprintf_r+0x130>
 8008136:	4604      	mov	r4, r0
 8008138:	2301      	movs	r3, #1
 800813a:	fb0c 2101 	mla	r1, ip, r1, r2
 800813e:	e7f0      	b.n	8008122 <_svfiprintf_r+0x192>
 8008140:	ab03      	add	r3, sp, #12
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	462a      	mov	r2, r5
 8008146:	4638      	mov	r0, r7
 8008148:	4b0f      	ldr	r3, [pc, #60]	; (8008188 <_svfiprintf_r+0x1f8>)
 800814a:	a904      	add	r1, sp, #16
 800814c:	f7fc fcae 	bl	8004aac <_printf_float>
 8008150:	1c42      	adds	r2, r0, #1
 8008152:	4606      	mov	r6, r0
 8008154:	d1d6      	bne.n	8008104 <_svfiprintf_r+0x174>
 8008156:	89ab      	ldrh	r3, [r5, #12]
 8008158:	065b      	lsls	r3, r3, #25
 800815a:	f53f af2d 	bmi.w	8007fb8 <_svfiprintf_r+0x28>
 800815e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008160:	b01d      	add	sp, #116	; 0x74
 8008162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008166:	ab03      	add	r3, sp, #12
 8008168:	9300      	str	r3, [sp, #0]
 800816a:	462a      	mov	r2, r5
 800816c:	4638      	mov	r0, r7
 800816e:	4b06      	ldr	r3, [pc, #24]	; (8008188 <_svfiprintf_r+0x1f8>)
 8008170:	a904      	add	r1, sp, #16
 8008172:	f7fc ff3b 	bl	8004fec <_printf_i>
 8008176:	e7eb      	b.n	8008150 <_svfiprintf_r+0x1c0>
 8008178:	0800a961 	.word	0x0800a961
 800817c:	0800a967 	.word	0x0800a967
 8008180:	0800a96b 	.word	0x0800a96b
 8008184:	08004aad 	.word	0x08004aad
 8008188:	08007edd 	.word	0x08007edd

0800818c <__sflush_r>:
 800818c:	898a      	ldrh	r2, [r1, #12]
 800818e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008190:	4605      	mov	r5, r0
 8008192:	0710      	lsls	r0, r2, #28
 8008194:	460c      	mov	r4, r1
 8008196:	d457      	bmi.n	8008248 <__sflush_r+0xbc>
 8008198:	684b      	ldr	r3, [r1, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	dc04      	bgt.n	80081a8 <__sflush_r+0x1c>
 800819e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	dc01      	bgt.n	80081a8 <__sflush_r+0x1c>
 80081a4:	2000      	movs	r0, #0
 80081a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081aa:	2e00      	cmp	r6, #0
 80081ac:	d0fa      	beq.n	80081a4 <__sflush_r+0x18>
 80081ae:	2300      	movs	r3, #0
 80081b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081b4:	682f      	ldr	r7, [r5, #0]
 80081b6:	6a21      	ldr	r1, [r4, #32]
 80081b8:	602b      	str	r3, [r5, #0]
 80081ba:	d032      	beq.n	8008222 <__sflush_r+0x96>
 80081bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081be:	89a3      	ldrh	r3, [r4, #12]
 80081c0:	075a      	lsls	r2, r3, #29
 80081c2:	d505      	bpl.n	80081d0 <__sflush_r+0x44>
 80081c4:	6863      	ldr	r3, [r4, #4]
 80081c6:	1ac0      	subs	r0, r0, r3
 80081c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081ca:	b10b      	cbz	r3, 80081d0 <__sflush_r+0x44>
 80081cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081ce:	1ac0      	subs	r0, r0, r3
 80081d0:	2300      	movs	r3, #0
 80081d2:	4602      	mov	r2, r0
 80081d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081d6:	4628      	mov	r0, r5
 80081d8:	6a21      	ldr	r1, [r4, #32]
 80081da:	47b0      	blx	r6
 80081dc:	1c43      	adds	r3, r0, #1
 80081de:	89a3      	ldrh	r3, [r4, #12]
 80081e0:	d106      	bne.n	80081f0 <__sflush_r+0x64>
 80081e2:	6829      	ldr	r1, [r5, #0]
 80081e4:	291d      	cmp	r1, #29
 80081e6:	d82b      	bhi.n	8008240 <__sflush_r+0xb4>
 80081e8:	4a28      	ldr	r2, [pc, #160]	; (800828c <__sflush_r+0x100>)
 80081ea:	410a      	asrs	r2, r1
 80081ec:	07d6      	lsls	r6, r2, #31
 80081ee:	d427      	bmi.n	8008240 <__sflush_r+0xb4>
 80081f0:	2200      	movs	r2, #0
 80081f2:	6062      	str	r2, [r4, #4]
 80081f4:	6922      	ldr	r2, [r4, #16]
 80081f6:	04d9      	lsls	r1, r3, #19
 80081f8:	6022      	str	r2, [r4, #0]
 80081fa:	d504      	bpl.n	8008206 <__sflush_r+0x7a>
 80081fc:	1c42      	adds	r2, r0, #1
 80081fe:	d101      	bne.n	8008204 <__sflush_r+0x78>
 8008200:	682b      	ldr	r3, [r5, #0]
 8008202:	b903      	cbnz	r3, 8008206 <__sflush_r+0x7a>
 8008204:	6560      	str	r0, [r4, #84]	; 0x54
 8008206:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008208:	602f      	str	r7, [r5, #0]
 800820a:	2900      	cmp	r1, #0
 800820c:	d0ca      	beq.n	80081a4 <__sflush_r+0x18>
 800820e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008212:	4299      	cmp	r1, r3
 8008214:	d002      	beq.n	800821c <__sflush_r+0x90>
 8008216:	4628      	mov	r0, r5
 8008218:	f7fe fa2a 	bl	8006670 <_free_r>
 800821c:	2000      	movs	r0, #0
 800821e:	6360      	str	r0, [r4, #52]	; 0x34
 8008220:	e7c1      	b.n	80081a6 <__sflush_r+0x1a>
 8008222:	2301      	movs	r3, #1
 8008224:	4628      	mov	r0, r5
 8008226:	47b0      	blx	r6
 8008228:	1c41      	adds	r1, r0, #1
 800822a:	d1c8      	bne.n	80081be <__sflush_r+0x32>
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d0c5      	beq.n	80081be <__sflush_r+0x32>
 8008232:	2b1d      	cmp	r3, #29
 8008234:	d001      	beq.n	800823a <__sflush_r+0xae>
 8008236:	2b16      	cmp	r3, #22
 8008238:	d101      	bne.n	800823e <__sflush_r+0xb2>
 800823a:	602f      	str	r7, [r5, #0]
 800823c:	e7b2      	b.n	80081a4 <__sflush_r+0x18>
 800823e:	89a3      	ldrh	r3, [r4, #12]
 8008240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008244:	81a3      	strh	r3, [r4, #12]
 8008246:	e7ae      	b.n	80081a6 <__sflush_r+0x1a>
 8008248:	690f      	ldr	r7, [r1, #16]
 800824a:	2f00      	cmp	r7, #0
 800824c:	d0aa      	beq.n	80081a4 <__sflush_r+0x18>
 800824e:	0793      	lsls	r3, r2, #30
 8008250:	bf18      	it	ne
 8008252:	2300      	movne	r3, #0
 8008254:	680e      	ldr	r6, [r1, #0]
 8008256:	bf08      	it	eq
 8008258:	694b      	ldreq	r3, [r1, #20]
 800825a:	1bf6      	subs	r6, r6, r7
 800825c:	600f      	str	r7, [r1, #0]
 800825e:	608b      	str	r3, [r1, #8]
 8008260:	2e00      	cmp	r6, #0
 8008262:	dd9f      	ble.n	80081a4 <__sflush_r+0x18>
 8008264:	4633      	mov	r3, r6
 8008266:	463a      	mov	r2, r7
 8008268:	4628      	mov	r0, r5
 800826a:	6a21      	ldr	r1, [r4, #32]
 800826c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008270:	47e0      	blx	ip
 8008272:	2800      	cmp	r0, #0
 8008274:	dc06      	bgt.n	8008284 <__sflush_r+0xf8>
 8008276:	89a3      	ldrh	r3, [r4, #12]
 8008278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800827c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008280:	81a3      	strh	r3, [r4, #12]
 8008282:	e790      	b.n	80081a6 <__sflush_r+0x1a>
 8008284:	4407      	add	r7, r0
 8008286:	1a36      	subs	r6, r6, r0
 8008288:	e7ea      	b.n	8008260 <__sflush_r+0xd4>
 800828a:	bf00      	nop
 800828c:	dfbffffe 	.word	0xdfbffffe

08008290 <_fflush_r>:
 8008290:	b538      	push	{r3, r4, r5, lr}
 8008292:	690b      	ldr	r3, [r1, #16]
 8008294:	4605      	mov	r5, r0
 8008296:	460c      	mov	r4, r1
 8008298:	b913      	cbnz	r3, 80082a0 <_fflush_r+0x10>
 800829a:	2500      	movs	r5, #0
 800829c:	4628      	mov	r0, r5
 800829e:	bd38      	pop	{r3, r4, r5, pc}
 80082a0:	b118      	cbz	r0, 80082aa <_fflush_r+0x1a>
 80082a2:	6a03      	ldr	r3, [r0, #32]
 80082a4:	b90b      	cbnz	r3, 80082aa <_fflush_r+0x1a>
 80082a6:	f7fd fa4b 	bl	8005740 <__sinit>
 80082aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d0f3      	beq.n	800829a <_fflush_r+0xa>
 80082b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082b4:	07d0      	lsls	r0, r2, #31
 80082b6:	d404      	bmi.n	80082c2 <_fflush_r+0x32>
 80082b8:	0599      	lsls	r1, r3, #22
 80082ba:	d402      	bmi.n	80082c2 <_fflush_r+0x32>
 80082bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082be:	f7fd fb55 	bl	800596c <__retarget_lock_acquire_recursive>
 80082c2:	4628      	mov	r0, r5
 80082c4:	4621      	mov	r1, r4
 80082c6:	f7ff ff61 	bl	800818c <__sflush_r>
 80082ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082cc:	4605      	mov	r5, r0
 80082ce:	07da      	lsls	r2, r3, #31
 80082d0:	d4e4      	bmi.n	800829c <_fflush_r+0xc>
 80082d2:	89a3      	ldrh	r3, [r4, #12]
 80082d4:	059b      	lsls	r3, r3, #22
 80082d6:	d4e1      	bmi.n	800829c <_fflush_r+0xc>
 80082d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082da:	f7fd fb48 	bl	800596e <__retarget_lock_release_recursive>
 80082de:	e7dd      	b.n	800829c <_fflush_r+0xc>

080082e0 <memmove>:
 80082e0:	4288      	cmp	r0, r1
 80082e2:	b510      	push	{r4, lr}
 80082e4:	eb01 0402 	add.w	r4, r1, r2
 80082e8:	d902      	bls.n	80082f0 <memmove+0x10>
 80082ea:	4284      	cmp	r4, r0
 80082ec:	4623      	mov	r3, r4
 80082ee:	d807      	bhi.n	8008300 <memmove+0x20>
 80082f0:	1e43      	subs	r3, r0, #1
 80082f2:	42a1      	cmp	r1, r4
 80082f4:	d008      	beq.n	8008308 <memmove+0x28>
 80082f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082fe:	e7f8      	b.n	80082f2 <memmove+0x12>
 8008300:	4601      	mov	r1, r0
 8008302:	4402      	add	r2, r0
 8008304:	428a      	cmp	r2, r1
 8008306:	d100      	bne.n	800830a <memmove+0x2a>
 8008308:	bd10      	pop	{r4, pc}
 800830a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800830e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008312:	e7f7      	b.n	8008304 <memmove+0x24>

08008314 <strncmp>:
 8008314:	b510      	push	{r4, lr}
 8008316:	b16a      	cbz	r2, 8008334 <strncmp+0x20>
 8008318:	3901      	subs	r1, #1
 800831a:	1884      	adds	r4, r0, r2
 800831c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008320:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008324:	429a      	cmp	r2, r3
 8008326:	d103      	bne.n	8008330 <strncmp+0x1c>
 8008328:	42a0      	cmp	r0, r4
 800832a:	d001      	beq.n	8008330 <strncmp+0x1c>
 800832c:	2a00      	cmp	r2, #0
 800832e:	d1f5      	bne.n	800831c <strncmp+0x8>
 8008330:	1ad0      	subs	r0, r2, r3
 8008332:	bd10      	pop	{r4, pc}
 8008334:	4610      	mov	r0, r2
 8008336:	e7fc      	b.n	8008332 <strncmp+0x1e>

08008338 <_sbrk_r>:
 8008338:	b538      	push	{r3, r4, r5, lr}
 800833a:	2300      	movs	r3, #0
 800833c:	4d05      	ldr	r5, [pc, #20]	; (8008354 <_sbrk_r+0x1c>)
 800833e:	4604      	mov	r4, r0
 8008340:	4608      	mov	r0, r1
 8008342:	602b      	str	r3, [r5, #0]
 8008344:	f7fa f8b0 	bl	80024a8 <_sbrk>
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	d102      	bne.n	8008352 <_sbrk_r+0x1a>
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	b103      	cbz	r3, 8008352 <_sbrk_r+0x1a>
 8008350:	6023      	str	r3, [r4, #0]
 8008352:	bd38      	pop	{r3, r4, r5, pc}
 8008354:	2000088c 	.word	0x2000088c

08008358 <memcpy>:
 8008358:	440a      	add	r2, r1
 800835a:	4291      	cmp	r1, r2
 800835c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008360:	d100      	bne.n	8008364 <memcpy+0xc>
 8008362:	4770      	bx	lr
 8008364:	b510      	push	{r4, lr}
 8008366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800836a:	4291      	cmp	r1, r2
 800836c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008370:	d1f9      	bne.n	8008366 <memcpy+0xe>
 8008372:	bd10      	pop	{r4, pc}

08008374 <nan>:
 8008374:	2000      	movs	r0, #0
 8008376:	4901      	ldr	r1, [pc, #4]	; (800837c <nan+0x8>)
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	7ff80000 	.word	0x7ff80000

08008380 <__assert_func>:
 8008380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008382:	4614      	mov	r4, r2
 8008384:	461a      	mov	r2, r3
 8008386:	4b09      	ldr	r3, [pc, #36]	; (80083ac <__assert_func+0x2c>)
 8008388:	4605      	mov	r5, r0
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68d8      	ldr	r0, [r3, #12]
 800838e:	b14c      	cbz	r4, 80083a4 <__assert_func+0x24>
 8008390:	4b07      	ldr	r3, [pc, #28]	; (80083b0 <__assert_func+0x30>)
 8008392:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008396:	9100      	str	r1, [sp, #0]
 8008398:	462b      	mov	r3, r5
 800839a:	4906      	ldr	r1, [pc, #24]	; (80083b4 <__assert_func+0x34>)
 800839c:	f000 fbca 	bl	8008b34 <fiprintf>
 80083a0:	f000 fbda 	bl	8008b58 <abort>
 80083a4:	4b04      	ldr	r3, [pc, #16]	; (80083b8 <__assert_func+0x38>)
 80083a6:	461c      	mov	r4, r3
 80083a8:	e7f3      	b.n	8008392 <__assert_func+0x12>
 80083aa:	bf00      	nop
 80083ac:	20000074 	.word	0x20000074
 80083b0:	0800a97a 	.word	0x0800a97a
 80083b4:	0800a987 	.word	0x0800a987
 80083b8:	0800a9b5 	.word	0x0800a9b5

080083bc <_calloc_r>:
 80083bc:	b570      	push	{r4, r5, r6, lr}
 80083be:	fba1 5402 	umull	r5, r4, r1, r2
 80083c2:	b934      	cbnz	r4, 80083d2 <_calloc_r+0x16>
 80083c4:	4629      	mov	r1, r5
 80083c6:	f7fe f9c3 	bl	8006750 <_malloc_r>
 80083ca:	4606      	mov	r6, r0
 80083cc:	b928      	cbnz	r0, 80083da <_calloc_r+0x1e>
 80083ce:	4630      	mov	r0, r6
 80083d0:	bd70      	pop	{r4, r5, r6, pc}
 80083d2:	220c      	movs	r2, #12
 80083d4:	2600      	movs	r6, #0
 80083d6:	6002      	str	r2, [r0, #0]
 80083d8:	e7f9      	b.n	80083ce <_calloc_r+0x12>
 80083da:	462a      	mov	r2, r5
 80083dc:	4621      	mov	r1, r4
 80083de:	f7fd fa48 	bl	8005872 <memset>
 80083e2:	e7f4      	b.n	80083ce <_calloc_r+0x12>

080083e4 <rshift>:
 80083e4:	6903      	ldr	r3, [r0, #16]
 80083e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80083ee:	f100 0414 	add.w	r4, r0, #20
 80083f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80083f6:	dd46      	ble.n	8008486 <rshift+0xa2>
 80083f8:	f011 011f 	ands.w	r1, r1, #31
 80083fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008400:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008404:	d10c      	bne.n	8008420 <rshift+0x3c>
 8008406:	4629      	mov	r1, r5
 8008408:	f100 0710 	add.w	r7, r0, #16
 800840c:	42b1      	cmp	r1, r6
 800840e:	d335      	bcc.n	800847c <rshift+0x98>
 8008410:	1a9b      	subs	r3, r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	1eea      	subs	r2, r5, #3
 8008416:	4296      	cmp	r6, r2
 8008418:	bf38      	it	cc
 800841a:	2300      	movcc	r3, #0
 800841c:	4423      	add	r3, r4
 800841e:	e015      	b.n	800844c <rshift+0x68>
 8008420:	46a1      	mov	r9, r4
 8008422:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008426:	f1c1 0820 	rsb	r8, r1, #32
 800842a:	40cf      	lsrs	r7, r1
 800842c:	f105 0e04 	add.w	lr, r5, #4
 8008430:	4576      	cmp	r6, lr
 8008432:	46f4      	mov	ip, lr
 8008434:	d816      	bhi.n	8008464 <rshift+0x80>
 8008436:	1a9a      	subs	r2, r3, r2
 8008438:	0092      	lsls	r2, r2, #2
 800843a:	3a04      	subs	r2, #4
 800843c:	3501      	adds	r5, #1
 800843e:	42ae      	cmp	r6, r5
 8008440:	bf38      	it	cc
 8008442:	2200      	movcc	r2, #0
 8008444:	18a3      	adds	r3, r4, r2
 8008446:	50a7      	str	r7, [r4, r2]
 8008448:	b107      	cbz	r7, 800844c <rshift+0x68>
 800844a:	3304      	adds	r3, #4
 800844c:	42a3      	cmp	r3, r4
 800844e:	eba3 0204 	sub.w	r2, r3, r4
 8008452:	bf08      	it	eq
 8008454:	2300      	moveq	r3, #0
 8008456:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800845a:	6102      	str	r2, [r0, #16]
 800845c:	bf08      	it	eq
 800845e:	6143      	streq	r3, [r0, #20]
 8008460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008464:	f8dc c000 	ldr.w	ip, [ip]
 8008468:	fa0c fc08 	lsl.w	ip, ip, r8
 800846c:	ea4c 0707 	orr.w	r7, ip, r7
 8008470:	f849 7b04 	str.w	r7, [r9], #4
 8008474:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008478:	40cf      	lsrs	r7, r1
 800847a:	e7d9      	b.n	8008430 <rshift+0x4c>
 800847c:	f851 cb04 	ldr.w	ip, [r1], #4
 8008480:	f847 cf04 	str.w	ip, [r7, #4]!
 8008484:	e7c2      	b.n	800840c <rshift+0x28>
 8008486:	4623      	mov	r3, r4
 8008488:	e7e0      	b.n	800844c <rshift+0x68>

0800848a <__hexdig_fun>:
 800848a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800848e:	2b09      	cmp	r3, #9
 8008490:	d802      	bhi.n	8008498 <__hexdig_fun+0xe>
 8008492:	3820      	subs	r0, #32
 8008494:	b2c0      	uxtb	r0, r0
 8008496:	4770      	bx	lr
 8008498:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800849c:	2b05      	cmp	r3, #5
 800849e:	d801      	bhi.n	80084a4 <__hexdig_fun+0x1a>
 80084a0:	3847      	subs	r0, #71	; 0x47
 80084a2:	e7f7      	b.n	8008494 <__hexdig_fun+0xa>
 80084a4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80084a8:	2b05      	cmp	r3, #5
 80084aa:	d801      	bhi.n	80084b0 <__hexdig_fun+0x26>
 80084ac:	3827      	subs	r0, #39	; 0x27
 80084ae:	e7f1      	b.n	8008494 <__hexdig_fun+0xa>
 80084b0:	2000      	movs	r0, #0
 80084b2:	4770      	bx	lr

080084b4 <__gethex>:
 80084b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b8:	4681      	mov	r9, r0
 80084ba:	468a      	mov	sl, r1
 80084bc:	4617      	mov	r7, r2
 80084be:	680a      	ldr	r2, [r1, #0]
 80084c0:	b085      	sub	sp, #20
 80084c2:	f102 0b02 	add.w	fp, r2, #2
 80084c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80084ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80084ce:	9302      	str	r3, [sp, #8]
 80084d0:	32fe      	adds	r2, #254	; 0xfe
 80084d2:	eb02 030b 	add.w	r3, r2, fp
 80084d6:	46d8      	mov	r8, fp
 80084d8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80084dc:	9301      	str	r3, [sp, #4]
 80084de:	2830      	cmp	r0, #48	; 0x30
 80084e0:	d0f7      	beq.n	80084d2 <__gethex+0x1e>
 80084e2:	f7ff ffd2 	bl	800848a <__hexdig_fun>
 80084e6:	4604      	mov	r4, r0
 80084e8:	2800      	cmp	r0, #0
 80084ea:	d138      	bne.n	800855e <__gethex+0xaa>
 80084ec:	2201      	movs	r2, #1
 80084ee:	4640      	mov	r0, r8
 80084f0:	49a7      	ldr	r1, [pc, #668]	; (8008790 <__gethex+0x2dc>)
 80084f2:	f7ff ff0f 	bl	8008314 <strncmp>
 80084f6:	4606      	mov	r6, r0
 80084f8:	2800      	cmp	r0, #0
 80084fa:	d169      	bne.n	80085d0 <__gethex+0x11c>
 80084fc:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008500:	465d      	mov	r5, fp
 8008502:	f7ff ffc2 	bl	800848a <__hexdig_fun>
 8008506:	2800      	cmp	r0, #0
 8008508:	d064      	beq.n	80085d4 <__gethex+0x120>
 800850a:	465a      	mov	r2, fp
 800850c:	7810      	ldrb	r0, [r2, #0]
 800850e:	4690      	mov	r8, r2
 8008510:	2830      	cmp	r0, #48	; 0x30
 8008512:	f102 0201 	add.w	r2, r2, #1
 8008516:	d0f9      	beq.n	800850c <__gethex+0x58>
 8008518:	f7ff ffb7 	bl	800848a <__hexdig_fun>
 800851c:	2301      	movs	r3, #1
 800851e:	fab0 f480 	clz	r4, r0
 8008522:	465e      	mov	r6, fp
 8008524:	0964      	lsrs	r4, r4, #5
 8008526:	9301      	str	r3, [sp, #4]
 8008528:	4642      	mov	r2, r8
 800852a:	4615      	mov	r5, r2
 800852c:	7828      	ldrb	r0, [r5, #0]
 800852e:	3201      	adds	r2, #1
 8008530:	f7ff ffab 	bl	800848a <__hexdig_fun>
 8008534:	2800      	cmp	r0, #0
 8008536:	d1f8      	bne.n	800852a <__gethex+0x76>
 8008538:	2201      	movs	r2, #1
 800853a:	4628      	mov	r0, r5
 800853c:	4994      	ldr	r1, [pc, #592]	; (8008790 <__gethex+0x2dc>)
 800853e:	f7ff fee9 	bl	8008314 <strncmp>
 8008542:	b978      	cbnz	r0, 8008564 <__gethex+0xb0>
 8008544:	b946      	cbnz	r6, 8008558 <__gethex+0xa4>
 8008546:	1c6e      	adds	r6, r5, #1
 8008548:	4632      	mov	r2, r6
 800854a:	4615      	mov	r5, r2
 800854c:	7828      	ldrb	r0, [r5, #0]
 800854e:	3201      	adds	r2, #1
 8008550:	f7ff ff9b 	bl	800848a <__hexdig_fun>
 8008554:	2800      	cmp	r0, #0
 8008556:	d1f8      	bne.n	800854a <__gethex+0x96>
 8008558:	1b73      	subs	r3, r6, r5
 800855a:	009e      	lsls	r6, r3, #2
 800855c:	e004      	b.n	8008568 <__gethex+0xb4>
 800855e:	2400      	movs	r4, #0
 8008560:	4626      	mov	r6, r4
 8008562:	e7e1      	b.n	8008528 <__gethex+0x74>
 8008564:	2e00      	cmp	r6, #0
 8008566:	d1f7      	bne.n	8008558 <__gethex+0xa4>
 8008568:	782b      	ldrb	r3, [r5, #0]
 800856a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800856e:	2b50      	cmp	r3, #80	; 0x50
 8008570:	d13d      	bne.n	80085ee <__gethex+0x13a>
 8008572:	786b      	ldrb	r3, [r5, #1]
 8008574:	2b2b      	cmp	r3, #43	; 0x2b
 8008576:	d02f      	beq.n	80085d8 <__gethex+0x124>
 8008578:	2b2d      	cmp	r3, #45	; 0x2d
 800857a:	d031      	beq.n	80085e0 <__gethex+0x12c>
 800857c:	f04f 0b00 	mov.w	fp, #0
 8008580:	1c69      	adds	r1, r5, #1
 8008582:	7808      	ldrb	r0, [r1, #0]
 8008584:	f7ff ff81 	bl	800848a <__hexdig_fun>
 8008588:	1e42      	subs	r2, r0, #1
 800858a:	b2d2      	uxtb	r2, r2
 800858c:	2a18      	cmp	r2, #24
 800858e:	d82e      	bhi.n	80085ee <__gethex+0x13a>
 8008590:	f1a0 0210 	sub.w	r2, r0, #16
 8008594:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008598:	f7ff ff77 	bl	800848a <__hexdig_fun>
 800859c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80085a0:	fa5f fc8c 	uxtb.w	ip, ip
 80085a4:	f1bc 0f18 	cmp.w	ip, #24
 80085a8:	d91d      	bls.n	80085e6 <__gethex+0x132>
 80085aa:	f1bb 0f00 	cmp.w	fp, #0
 80085ae:	d000      	beq.n	80085b2 <__gethex+0xfe>
 80085b0:	4252      	negs	r2, r2
 80085b2:	4416      	add	r6, r2
 80085b4:	f8ca 1000 	str.w	r1, [sl]
 80085b8:	b1dc      	cbz	r4, 80085f2 <__gethex+0x13e>
 80085ba:	9b01      	ldr	r3, [sp, #4]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	bf14      	ite	ne
 80085c0:	f04f 0800 	movne.w	r8, #0
 80085c4:	f04f 0806 	moveq.w	r8, #6
 80085c8:	4640      	mov	r0, r8
 80085ca:	b005      	add	sp, #20
 80085cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d0:	4645      	mov	r5, r8
 80085d2:	4626      	mov	r6, r4
 80085d4:	2401      	movs	r4, #1
 80085d6:	e7c7      	b.n	8008568 <__gethex+0xb4>
 80085d8:	f04f 0b00 	mov.w	fp, #0
 80085dc:	1ca9      	adds	r1, r5, #2
 80085de:	e7d0      	b.n	8008582 <__gethex+0xce>
 80085e0:	f04f 0b01 	mov.w	fp, #1
 80085e4:	e7fa      	b.n	80085dc <__gethex+0x128>
 80085e6:	230a      	movs	r3, #10
 80085e8:	fb03 0002 	mla	r0, r3, r2, r0
 80085ec:	e7d0      	b.n	8008590 <__gethex+0xdc>
 80085ee:	4629      	mov	r1, r5
 80085f0:	e7e0      	b.n	80085b4 <__gethex+0x100>
 80085f2:	4621      	mov	r1, r4
 80085f4:	eba5 0308 	sub.w	r3, r5, r8
 80085f8:	3b01      	subs	r3, #1
 80085fa:	2b07      	cmp	r3, #7
 80085fc:	dc0a      	bgt.n	8008614 <__gethex+0x160>
 80085fe:	4648      	mov	r0, r9
 8008600:	f7fe f932 	bl	8006868 <_Balloc>
 8008604:	4604      	mov	r4, r0
 8008606:	b940      	cbnz	r0, 800861a <__gethex+0x166>
 8008608:	4602      	mov	r2, r0
 800860a:	21e4      	movs	r1, #228	; 0xe4
 800860c:	4b61      	ldr	r3, [pc, #388]	; (8008794 <__gethex+0x2e0>)
 800860e:	4862      	ldr	r0, [pc, #392]	; (8008798 <__gethex+0x2e4>)
 8008610:	f7ff feb6 	bl	8008380 <__assert_func>
 8008614:	3101      	adds	r1, #1
 8008616:	105b      	asrs	r3, r3, #1
 8008618:	e7ef      	b.n	80085fa <__gethex+0x146>
 800861a:	2300      	movs	r3, #0
 800861c:	469b      	mov	fp, r3
 800861e:	f100 0a14 	add.w	sl, r0, #20
 8008622:	f8cd a004 	str.w	sl, [sp, #4]
 8008626:	45a8      	cmp	r8, r5
 8008628:	d344      	bcc.n	80086b4 <__gethex+0x200>
 800862a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800862e:	4658      	mov	r0, fp
 8008630:	f848 bb04 	str.w	fp, [r8], #4
 8008634:	eba8 080a 	sub.w	r8, r8, sl
 8008638:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800863c:	6122      	str	r2, [r4, #16]
 800863e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8008642:	f7fe fa03 	bl	8006a4c <__hi0bits>
 8008646:	683d      	ldr	r5, [r7, #0]
 8008648:	eba8 0800 	sub.w	r8, r8, r0
 800864c:	45a8      	cmp	r8, r5
 800864e:	dd59      	ble.n	8008704 <__gethex+0x250>
 8008650:	eba8 0805 	sub.w	r8, r8, r5
 8008654:	4641      	mov	r1, r8
 8008656:	4620      	mov	r0, r4
 8008658:	f7fe fd81 	bl	800715e <__any_on>
 800865c:	4683      	mov	fp, r0
 800865e:	b1b8      	cbz	r0, 8008690 <__gethex+0x1dc>
 8008660:	f04f 0b01 	mov.w	fp, #1
 8008664:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8008668:	1159      	asrs	r1, r3, #5
 800866a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800866e:	f003 021f 	and.w	r2, r3, #31
 8008672:	fa0b f202 	lsl.w	r2, fp, r2
 8008676:	420a      	tst	r2, r1
 8008678:	d00a      	beq.n	8008690 <__gethex+0x1dc>
 800867a:	455b      	cmp	r3, fp
 800867c:	dd06      	ble.n	800868c <__gethex+0x1d8>
 800867e:	4620      	mov	r0, r4
 8008680:	f1a8 0102 	sub.w	r1, r8, #2
 8008684:	f7fe fd6b 	bl	800715e <__any_on>
 8008688:	2800      	cmp	r0, #0
 800868a:	d138      	bne.n	80086fe <__gethex+0x24a>
 800868c:	f04f 0b02 	mov.w	fp, #2
 8008690:	4641      	mov	r1, r8
 8008692:	4620      	mov	r0, r4
 8008694:	f7ff fea6 	bl	80083e4 <rshift>
 8008698:	4446      	add	r6, r8
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	42b3      	cmp	r3, r6
 800869e:	da41      	bge.n	8008724 <__gethex+0x270>
 80086a0:	4621      	mov	r1, r4
 80086a2:	4648      	mov	r0, r9
 80086a4:	f7fe f920 	bl	80068e8 <_Bfree>
 80086a8:	2300      	movs	r3, #0
 80086aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086ac:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80086b0:	6013      	str	r3, [r2, #0]
 80086b2:	e789      	b.n	80085c8 <__gethex+0x114>
 80086b4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80086b8:	2a2e      	cmp	r2, #46	; 0x2e
 80086ba:	d014      	beq.n	80086e6 <__gethex+0x232>
 80086bc:	2b20      	cmp	r3, #32
 80086be:	d106      	bne.n	80086ce <__gethex+0x21a>
 80086c0:	9b01      	ldr	r3, [sp, #4]
 80086c2:	f843 bb04 	str.w	fp, [r3], #4
 80086c6:	f04f 0b00 	mov.w	fp, #0
 80086ca:	9301      	str	r3, [sp, #4]
 80086cc:	465b      	mov	r3, fp
 80086ce:	7828      	ldrb	r0, [r5, #0]
 80086d0:	9303      	str	r3, [sp, #12]
 80086d2:	f7ff feda 	bl	800848a <__hexdig_fun>
 80086d6:	9b03      	ldr	r3, [sp, #12]
 80086d8:	f000 000f 	and.w	r0, r0, #15
 80086dc:	4098      	lsls	r0, r3
 80086de:	ea4b 0b00 	orr.w	fp, fp, r0
 80086e2:	3304      	adds	r3, #4
 80086e4:	e79f      	b.n	8008626 <__gethex+0x172>
 80086e6:	45a8      	cmp	r8, r5
 80086e8:	d8e8      	bhi.n	80086bc <__gethex+0x208>
 80086ea:	2201      	movs	r2, #1
 80086ec:	4628      	mov	r0, r5
 80086ee:	4928      	ldr	r1, [pc, #160]	; (8008790 <__gethex+0x2dc>)
 80086f0:	9303      	str	r3, [sp, #12]
 80086f2:	f7ff fe0f 	bl	8008314 <strncmp>
 80086f6:	9b03      	ldr	r3, [sp, #12]
 80086f8:	2800      	cmp	r0, #0
 80086fa:	d1df      	bne.n	80086bc <__gethex+0x208>
 80086fc:	e793      	b.n	8008626 <__gethex+0x172>
 80086fe:	f04f 0b03 	mov.w	fp, #3
 8008702:	e7c5      	b.n	8008690 <__gethex+0x1dc>
 8008704:	da0b      	bge.n	800871e <__gethex+0x26a>
 8008706:	eba5 0808 	sub.w	r8, r5, r8
 800870a:	4621      	mov	r1, r4
 800870c:	4642      	mov	r2, r8
 800870e:	4648      	mov	r0, r9
 8008710:	f7fe fb02 	bl	8006d18 <__lshift>
 8008714:	4604      	mov	r4, r0
 8008716:	eba6 0608 	sub.w	r6, r6, r8
 800871a:	f100 0a14 	add.w	sl, r0, #20
 800871e:	f04f 0b00 	mov.w	fp, #0
 8008722:	e7ba      	b.n	800869a <__gethex+0x1e6>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	42b3      	cmp	r3, r6
 8008728:	dd74      	ble.n	8008814 <__gethex+0x360>
 800872a:	1b9e      	subs	r6, r3, r6
 800872c:	42b5      	cmp	r5, r6
 800872e:	dc35      	bgt.n	800879c <__gethex+0x2e8>
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2b02      	cmp	r3, #2
 8008734:	d023      	beq.n	800877e <__gethex+0x2ca>
 8008736:	2b03      	cmp	r3, #3
 8008738:	d025      	beq.n	8008786 <__gethex+0x2d2>
 800873a:	2b01      	cmp	r3, #1
 800873c:	d115      	bne.n	800876a <__gethex+0x2b6>
 800873e:	42b5      	cmp	r5, r6
 8008740:	d113      	bne.n	800876a <__gethex+0x2b6>
 8008742:	2d01      	cmp	r5, #1
 8008744:	d10b      	bne.n	800875e <__gethex+0x2aa>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	9a02      	ldr	r2, [sp, #8]
 800874a:	f04f 0862 	mov.w	r8, #98	; 0x62
 800874e:	6013      	str	r3, [r2, #0]
 8008750:	2301      	movs	r3, #1
 8008752:	6123      	str	r3, [r4, #16]
 8008754:	f8ca 3000 	str.w	r3, [sl]
 8008758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800875a:	601c      	str	r4, [r3, #0]
 800875c:	e734      	b.n	80085c8 <__gethex+0x114>
 800875e:	4620      	mov	r0, r4
 8008760:	1e69      	subs	r1, r5, #1
 8008762:	f7fe fcfc 	bl	800715e <__any_on>
 8008766:	2800      	cmp	r0, #0
 8008768:	d1ed      	bne.n	8008746 <__gethex+0x292>
 800876a:	4621      	mov	r1, r4
 800876c:	4648      	mov	r0, r9
 800876e:	f7fe f8bb 	bl	80068e8 <_Bfree>
 8008772:	2300      	movs	r3, #0
 8008774:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008776:	f04f 0850 	mov.w	r8, #80	; 0x50
 800877a:	6013      	str	r3, [r2, #0]
 800877c:	e724      	b.n	80085c8 <__gethex+0x114>
 800877e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1f2      	bne.n	800876a <__gethex+0x2b6>
 8008784:	e7df      	b.n	8008746 <__gethex+0x292>
 8008786:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1dc      	bne.n	8008746 <__gethex+0x292>
 800878c:	e7ed      	b.n	800876a <__gethex+0x2b6>
 800878e:	bf00      	nop
 8008790:	0800a80c 	.word	0x0800a80c
 8008794:	0800a69f 	.word	0x0800a69f
 8008798:	0800a9b6 	.word	0x0800a9b6
 800879c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80087a0:	f1bb 0f00 	cmp.w	fp, #0
 80087a4:	d133      	bne.n	800880e <__gethex+0x35a>
 80087a6:	f1b8 0f00 	cmp.w	r8, #0
 80087aa:	d004      	beq.n	80087b6 <__gethex+0x302>
 80087ac:	4641      	mov	r1, r8
 80087ae:	4620      	mov	r0, r4
 80087b0:	f7fe fcd5 	bl	800715e <__any_on>
 80087b4:	4683      	mov	fp, r0
 80087b6:	2301      	movs	r3, #1
 80087b8:	ea4f 1268 	mov.w	r2, r8, asr #5
 80087bc:	f008 081f 	and.w	r8, r8, #31
 80087c0:	fa03 f308 	lsl.w	r3, r3, r8
 80087c4:	f04f 0802 	mov.w	r8, #2
 80087c8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80087cc:	4631      	mov	r1, r6
 80087ce:	4213      	tst	r3, r2
 80087d0:	4620      	mov	r0, r4
 80087d2:	bf18      	it	ne
 80087d4:	f04b 0b02 	orrne.w	fp, fp, #2
 80087d8:	1bad      	subs	r5, r5, r6
 80087da:	f7ff fe03 	bl	80083e4 <rshift>
 80087de:	687e      	ldr	r6, [r7, #4]
 80087e0:	f1bb 0f00 	cmp.w	fp, #0
 80087e4:	d04a      	beq.n	800887c <__gethex+0x3c8>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d016      	beq.n	800881a <__gethex+0x366>
 80087ec:	2b03      	cmp	r3, #3
 80087ee:	d018      	beq.n	8008822 <__gethex+0x36e>
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d109      	bne.n	8008808 <__gethex+0x354>
 80087f4:	f01b 0f02 	tst.w	fp, #2
 80087f8:	d006      	beq.n	8008808 <__gethex+0x354>
 80087fa:	f8da 3000 	ldr.w	r3, [sl]
 80087fe:	ea4b 0b03 	orr.w	fp, fp, r3
 8008802:	f01b 0f01 	tst.w	fp, #1
 8008806:	d10f      	bne.n	8008828 <__gethex+0x374>
 8008808:	f048 0810 	orr.w	r8, r8, #16
 800880c:	e036      	b.n	800887c <__gethex+0x3c8>
 800880e:	f04f 0b01 	mov.w	fp, #1
 8008812:	e7d0      	b.n	80087b6 <__gethex+0x302>
 8008814:	f04f 0801 	mov.w	r8, #1
 8008818:	e7e2      	b.n	80087e0 <__gethex+0x32c>
 800881a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800881c:	f1c3 0301 	rsb	r3, r3, #1
 8008820:	930f      	str	r3, [sp, #60]	; 0x3c
 8008822:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008824:	2b00      	cmp	r3, #0
 8008826:	d0ef      	beq.n	8008808 <__gethex+0x354>
 8008828:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800882c:	f104 0214 	add.w	r2, r4, #20
 8008830:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	2300      	movs	r3, #0
 8008838:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800883c:	4694      	mov	ip, r2
 800883e:	f852 1b04 	ldr.w	r1, [r2], #4
 8008842:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8008846:	d01e      	beq.n	8008886 <__gethex+0x3d2>
 8008848:	3101      	adds	r1, #1
 800884a:	f8cc 1000 	str.w	r1, [ip]
 800884e:	f1b8 0f02 	cmp.w	r8, #2
 8008852:	f104 0214 	add.w	r2, r4, #20
 8008856:	d13d      	bne.n	80088d4 <__gethex+0x420>
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	3b01      	subs	r3, #1
 800885c:	42ab      	cmp	r3, r5
 800885e:	d10b      	bne.n	8008878 <__gethex+0x3c4>
 8008860:	2301      	movs	r3, #1
 8008862:	1169      	asrs	r1, r5, #5
 8008864:	f005 051f 	and.w	r5, r5, #31
 8008868:	fa03 f505 	lsl.w	r5, r3, r5
 800886c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008870:	421d      	tst	r5, r3
 8008872:	bf18      	it	ne
 8008874:	f04f 0801 	movne.w	r8, #1
 8008878:	f048 0820 	orr.w	r8, r8, #32
 800887c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800887e:	601c      	str	r4, [r3, #0]
 8008880:	9b02      	ldr	r3, [sp, #8]
 8008882:	601e      	str	r6, [r3, #0]
 8008884:	e6a0      	b.n	80085c8 <__gethex+0x114>
 8008886:	4290      	cmp	r0, r2
 8008888:	f842 3c04 	str.w	r3, [r2, #-4]
 800888c:	d8d6      	bhi.n	800883c <__gethex+0x388>
 800888e:	68a2      	ldr	r2, [r4, #8]
 8008890:	4593      	cmp	fp, r2
 8008892:	db17      	blt.n	80088c4 <__gethex+0x410>
 8008894:	6861      	ldr	r1, [r4, #4]
 8008896:	4648      	mov	r0, r9
 8008898:	3101      	adds	r1, #1
 800889a:	f7fd ffe5 	bl	8006868 <_Balloc>
 800889e:	4682      	mov	sl, r0
 80088a0:	b918      	cbnz	r0, 80088aa <__gethex+0x3f6>
 80088a2:	4602      	mov	r2, r0
 80088a4:	2184      	movs	r1, #132	; 0x84
 80088a6:	4b1a      	ldr	r3, [pc, #104]	; (8008910 <__gethex+0x45c>)
 80088a8:	e6b1      	b.n	800860e <__gethex+0x15a>
 80088aa:	6922      	ldr	r2, [r4, #16]
 80088ac:	f104 010c 	add.w	r1, r4, #12
 80088b0:	3202      	adds	r2, #2
 80088b2:	0092      	lsls	r2, r2, #2
 80088b4:	300c      	adds	r0, #12
 80088b6:	f7ff fd4f 	bl	8008358 <memcpy>
 80088ba:	4621      	mov	r1, r4
 80088bc:	4648      	mov	r0, r9
 80088be:	f7fe f813 	bl	80068e8 <_Bfree>
 80088c2:	4654      	mov	r4, sl
 80088c4:	6922      	ldr	r2, [r4, #16]
 80088c6:	1c51      	adds	r1, r2, #1
 80088c8:	6121      	str	r1, [r4, #16]
 80088ca:	2101      	movs	r1, #1
 80088cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80088d0:	6151      	str	r1, [r2, #20]
 80088d2:	e7bc      	b.n	800884e <__gethex+0x39a>
 80088d4:	6921      	ldr	r1, [r4, #16]
 80088d6:	4559      	cmp	r1, fp
 80088d8:	dd0b      	ble.n	80088f2 <__gethex+0x43e>
 80088da:	2101      	movs	r1, #1
 80088dc:	4620      	mov	r0, r4
 80088de:	f7ff fd81 	bl	80083e4 <rshift>
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	3601      	adds	r6, #1
 80088e6:	42b3      	cmp	r3, r6
 80088e8:	f6ff aeda 	blt.w	80086a0 <__gethex+0x1ec>
 80088ec:	f04f 0801 	mov.w	r8, #1
 80088f0:	e7c2      	b.n	8008878 <__gethex+0x3c4>
 80088f2:	f015 051f 	ands.w	r5, r5, #31
 80088f6:	d0f9      	beq.n	80088ec <__gethex+0x438>
 80088f8:	9b01      	ldr	r3, [sp, #4]
 80088fa:	f1c5 0520 	rsb	r5, r5, #32
 80088fe:	441a      	add	r2, r3
 8008900:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008904:	f7fe f8a2 	bl	8006a4c <__hi0bits>
 8008908:	42a8      	cmp	r0, r5
 800890a:	dbe6      	blt.n	80088da <__gethex+0x426>
 800890c:	e7ee      	b.n	80088ec <__gethex+0x438>
 800890e:	bf00      	nop
 8008910:	0800a69f 	.word	0x0800a69f

08008914 <L_shift>:
 8008914:	f1c2 0208 	rsb	r2, r2, #8
 8008918:	0092      	lsls	r2, r2, #2
 800891a:	b570      	push	{r4, r5, r6, lr}
 800891c:	f1c2 0620 	rsb	r6, r2, #32
 8008920:	6843      	ldr	r3, [r0, #4]
 8008922:	6804      	ldr	r4, [r0, #0]
 8008924:	fa03 f506 	lsl.w	r5, r3, r6
 8008928:	432c      	orrs	r4, r5
 800892a:	40d3      	lsrs	r3, r2
 800892c:	6004      	str	r4, [r0, #0]
 800892e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008932:	4288      	cmp	r0, r1
 8008934:	d3f4      	bcc.n	8008920 <L_shift+0xc>
 8008936:	bd70      	pop	{r4, r5, r6, pc}

08008938 <__match>:
 8008938:	b530      	push	{r4, r5, lr}
 800893a:	6803      	ldr	r3, [r0, #0]
 800893c:	3301      	adds	r3, #1
 800893e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008942:	b914      	cbnz	r4, 800894a <__match+0x12>
 8008944:	6003      	str	r3, [r0, #0]
 8008946:	2001      	movs	r0, #1
 8008948:	bd30      	pop	{r4, r5, pc}
 800894a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800894e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008952:	2d19      	cmp	r5, #25
 8008954:	bf98      	it	ls
 8008956:	3220      	addls	r2, #32
 8008958:	42a2      	cmp	r2, r4
 800895a:	d0f0      	beq.n	800893e <__match+0x6>
 800895c:	2000      	movs	r0, #0
 800895e:	e7f3      	b.n	8008948 <__match+0x10>

08008960 <__hexnan>:
 8008960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008964:	2500      	movs	r5, #0
 8008966:	680b      	ldr	r3, [r1, #0]
 8008968:	4682      	mov	sl, r0
 800896a:	115e      	asrs	r6, r3, #5
 800896c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008970:	f013 031f 	ands.w	r3, r3, #31
 8008974:	bf18      	it	ne
 8008976:	3604      	addne	r6, #4
 8008978:	1f37      	subs	r7, r6, #4
 800897a:	4690      	mov	r8, r2
 800897c:	46b9      	mov	r9, r7
 800897e:	463c      	mov	r4, r7
 8008980:	46ab      	mov	fp, r5
 8008982:	b087      	sub	sp, #28
 8008984:	6801      	ldr	r1, [r0, #0]
 8008986:	9301      	str	r3, [sp, #4]
 8008988:	f846 5c04 	str.w	r5, [r6, #-4]
 800898c:	9502      	str	r5, [sp, #8]
 800898e:	784a      	ldrb	r2, [r1, #1]
 8008990:	1c4b      	adds	r3, r1, #1
 8008992:	9303      	str	r3, [sp, #12]
 8008994:	b342      	cbz	r2, 80089e8 <__hexnan+0x88>
 8008996:	4610      	mov	r0, r2
 8008998:	9105      	str	r1, [sp, #20]
 800899a:	9204      	str	r2, [sp, #16]
 800899c:	f7ff fd75 	bl	800848a <__hexdig_fun>
 80089a0:	2800      	cmp	r0, #0
 80089a2:	d14f      	bne.n	8008a44 <__hexnan+0xe4>
 80089a4:	9a04      	ldr	r2, [sp, #16]
 80089a6:	9905      	ldr	r1, [sp, #20]
 80089a8:	2a20      	cmp	r2, #32
 80089aa:	d818      	bhi.n	80089de <__hexnan+0x7e>
 80089ac:	9b02      	ldr	r3, [sp, #8]
 80089ae:	459b      	cmp	fp, r3
 80089b0:	dd13      	ble.n	80089da <__hexnan+0x7a>
 80089b2:	454c      	cmp	r4, r9
 80089b4:	d206      	bcs.n	80089c4 <__hexnan+0x64>
 80089b6:	2d07      	cmp	r5, #7
 80089b8:	dc04      	bgt.n	80089c4 <__hexnan+0x64>
 80089ba:	462a      	mov	r2, r5
 80089bc:	4649      	mov	r1, r9
 80089be:	4620      	mov	r0, r4
 80089c0:	f7ff ffa8 	bl	8008914 <L_shift>
 80089c4:	4544      	cmp	r4, r8
 80089c6:	d950      	bls.n	8008a6a <__hexnan+0x10a>
 80089c8:	2300      	movs	r3, #0
 80089ca:	f1a4 0904 	sub.w	r9, r4, #4
 80089ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80089d2:	461d      	mov	r5, r3
 80089d4:	464c      	mov	r4, r9
 80089d6:	f8cd b008 	str.w	fp, [sp, #8]
 80089da:	9903      	ldr	r1, [sp, #12]
 80089dc:	e7d7      	b.n	800898e <__hexnan+0x2e>
 80089de:	2a29      	cmp	r2, #41	; 0x29
 80089e0:	d155      	bne.n	8008a8e <__hexnan+0x12e>
 80089e2:	3102      	adds	r1, #2
 80089e4:	f8ca 1000 	str.w	r1, [sl]
 80089e8:	f1bb 0f00 	cmp.w	fp, #0
 80089ec:	d04f      	beq.n	8008a8e <__hexnan+0x12e>
 80089ee:	454c      	cmp	r4, r9
 80089f0:	d206      	bcs.n	8008a00 <__hexnan+0xa0>
 80089f2:	2d07      	cmp	r5, #7
 80089f4:	dc04      	bgt.n	8008a00 <__hexnan+0xa0>
 80089f6:	462a      	mov	r2, r5
 80089f8:	4649      	mov	r1, r9
 80089fa:	4620      	mov	r0, r4
 80089fc:	f7ff ff8a 	bl	8008914 <L_shift>
 8008a00:	4544      	cmp	r4, r8
 8008a02:	d934      	bls.n	8008a6e <__hexnan+0x10e>
 8008a04:	4623      	mov	r3, r4
 8008a06:	f1a8 0204 	sub.w	r2, r8, #4
 8008a0a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008a0e:	429f      	cmp	r7, r3
 8008a10:	f842 1f04 	str.w	r1, [r2, #4]!
 8008a14:	d2f9      	bcs.n	8008a0a <__hexnan+0xaa>
 8008a16:	1b3b      	subs	r3, r7, r4
 8008a18:	f023 0303 	bic.w	r3, r3, #3
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	3e03      	subs	r6, #3
 8008a20:	3401      	adds	r4, #1
 8008a22:	42a6      	cmp	r6, r4
 8008a24:	bf38      	it	cc
 8008a26:	2304      	movcc	r3, #4
 8008a28:	2200      	movs	r2, #0
 8008a2a:	4443      	add	r3, r8
 8008a2c:	f843 2b04 	str.w	r2, [r3], #4
 8008a30:	429f      	cmp	r7, r3
 8008a32:	d2fb      	bcs.n	8008a2c <__hexnan+0xcc>
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	b91b      	cbnz	r3, 8008a40 <__hexnan+0xe0>
 8008a38:	4547      	cmp	r7, r8
 8008a3a:	d126      	bne.n	8008a8a <__hexnan+0x12a>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	603b      	str	r3, [r7, #0]
 8008a40:	2005      	movs	r0, #5
 8008a42:	e025      	b.n	8008a90 <__hexnan+0x130>
 8008a44:	3501      	adds	r5, #1
 8008a46:	2d08      	cmp	r5, #8
 8008a48:	f10b 0b01 	add.w	fp, fp, #1
 8008a4c:	dd06      	ble.n	8008a5c <__hexnan+0xfc>
 8008a4e:	4544      	cmp	r4, r8
 8008a50:	d9c3      	bls.n	80089da <__hexnan+0x7a>
 8008a52:	2300      	movs	r3, #0
 8008a54:	2501      	movs	r5, #1
 8008a56:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a5a:	3c04      	subs	r4, #4
 8008a5c:	6822      	ldr	r2, [r4, #0]
 8008a5e:	f000 000f 	and.w	r0, r0, #15
 8008a62:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008a66:	6020      	str	r0, [r4, #0]
 8008a68:	e7b7      	b.n	80089da <__hexnan+0x7a>
 8008a6a:	2508      	movs	r5, #8
 8008a6c:	e7b5      	b.n	80089da <__hexnan+0x7a>
 8008a6e:	9b01      	ldr	r3, [sp, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d0df      	beq.n	8008a34 <__hexnan+0xd4>
 8008a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a78:	f1c3 0320 	rsb	r3, r3, #32
 8008a7c:	40da      	lsrs	r2, r3
 8008a7e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008a82:	4013      	ands	r3, r2
 8008a84:	f846 3c04 	str.w	r3, [r6, #-4]
 8008a88:	e7d4      	b.n	8008a34 <__hexnan+0xd4>
 8008a8a:	3f04      	subs	r7, #4
 8008a8c:	e7d2      	b.n	8008a34 <__hexnan+0xd4>
 8008a8e:	2004      	movs	r0, #4
 8008a90:	b007      	add	sp, #28
 8008a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a96 <__ascii_mbtowc>:
 8008a96:	b082      	sub	sp, #8
 8008a98:	b901      	cbnz	r1, 8008a9c <__ascii_mbtowc+0x6>
 8008a9a:	a901      	add	r1, sp, #4
 8008a9c:	b142      	cbz	r2, 8008ab0 <__ascii_mbtowc+0x1a>
 8008a9e:	b14b      	cbz	r3, 8008ab4 <__ascii_mbtowc+0x1e>
 8008aa0:	7813      	ldrb	r3, [r2, #0]
 8008aa2:	600b      	str	r3, [r1, #0]
 8008aa4:	7812      	ldrb	r2, [r2, #0]
 8008aa6:	1e10      	subs	r0, r2, #0
 8008aa8:	bf18      	it	ne
 8008aaa:	2001      	movne	r0, #1
 8008aac:	b002      	add	sp, #8
 8008aae:	4770      	bx	lr
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	e7fb      	b.n	8008aac <__ascii_mbtowc+0x16>
 8008ab4:	f06f 0001 	mvn.w	r0, #1
 8008ab8:	e7f8      	b.n	8008aac <__ascii_mbtowc+0x16>

08008aba <_realloc_r>:
 8008aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008abe:	4680      	mov	r8, r0
 8008ac0:	4614      	mov	r4, r2
 8008ac2:	460e      	mov	r6, r1
 8008ac4:	b921      	cbnz	r1, 8008ad0 <_realloc_r+0x16>
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008acc:	f7fd be40 	b.w	8006750 <_malloc_r>
 8008ad0:	b92a      	cbnz	r2, 8008ade <_realloc_r+0x24>
 8008ad2:	f7fd fdcd 	bl	8006670 <_free_r>
 8008ad6:	4625      	mov	r5, r4
 8008ad8:	4628      	mov	r0, r5
 8008ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ade:	f000 f842 	bl	8008b66 <_malloc_usable_size_r>
 8008ae2:	4284      	cmp	r4, r0
 8008ae4:	4607      	mov	r7, r0
 8008ae6:	d802      	bhi.n	8008aee <_realloc_r+0x34>
 8008ae8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008aec:	d812      	bhi.n	8008b14 <_realloc_r+0x5a>
 8008aee:	4621      	mov	r1, r4
 8008af0:	4640      	mov	r0, r8
 8008af2:	f7fd fe2d 	bl	8006750 <_malloc_r>
 8008af6:	4605      	mov	r5, r0
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d0ed      	beq.n	8008ad8 <_realloc_r+0x1e>
 8008afc:	42bc      	cmp	r4, r7
 8008afe:	4622      	mov	r2, r4
 8008b00:	4631      	mov	r1, r6
 8008b02:	bf28      	it	cs
 8008b04:	463a      	movcs	r2, r7
 8008b06:	f7ff fc27 	bl	8008358 <memcpy>
 8008b0a:	4631      	mov	r1, r6
 8008b0c:	4640      	mov	r0, r8
 8008b0e:	f7fd fdaf 	bl	8006670 <_free_r>
 8008b12:	e7e1      	b.n	8008ad8 <_realloc_r+0x1e>
 8008b14:	4635      	mov	r5, r6
 8008b16:	e7df      	b.n	8008ad8 <_realloc_r+0x1e>

08008b18 <__ascii_wctomb>:
 8008b18:	4603      	mov	r3, r0
 8008b1a:	4608      	mov	r0, r1
 8008b1c:	b141      	cbz	r1, 8008b30 <__ascii_wctomb+0x18>
 8008b1e:	2aff      	cmp	r2, #255	; 0xff
 8008b20:	d904      	bls.n	8008b2c <__ascii_wctomb+0x14>
 8008b22:	228a      	movs	r2, #138	; 0x8a
 8008b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b28:	601a      	str	r2, [r3, #0]
 8008b2a:	4770      	bx	lr
 8008b2c:	2001      	movs	r0, #1
 8008b2e:	700a      	strb	r2, [r1, #0]
 8008b30:	4770      	bx	lr
	...

08008b34 <fiprintf>:
 8008b34:	b40e      	push	{r1, r2, r3}
 8008b36:	b503      	push	{r0, r1, lr}
 8008b38:	4601      	mov	r1, r0
 8008b3a:	ab03      	add	r3, sp, #12
 8008b3c:	4805      	ldr	r0, [pc, #20]	; (8008b54 <fiprintf+0x20>)
 8008b3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b42:	6800      	ldr	r0, [r0, #0]
 8008b44:	9301      	str	r3, [sp, #4]
 8008b46:	f000 f83d 	bl	8008bc4 <_vfiprintf_r>
 8008b4a:	b002      	add	sp, #8
 8008b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b50:	b003      	add	sp, #12
 8008b52:	4770      	bx	lr
 8008b54:	20000074 	.word	0x20000074

08008b58 <abort>:
 8008b58:	2006      	movs	r0, #6
 8008b5a:	b508      	push	{r3, lr}
 8008b5c:	f000 fa0a 	bl	8008f74 <raise>
 8008b60:	2001      	movs	r0, #1
 8008b62:	f7f9 fc2d 	bl	80023c0 <_exit>

08008b66 <_malloc_usable_size_r>:
 8008b66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b6a:	1f18      	subs	r0, r3, #4
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	bfbc      	itt	lt
 8008b70:	580b      	ldrlt	r3, [r1, r0]
 8008b72:	18c0      	addlt	r0, r0, r3
 8008b74:	4770      	bx	lr

08008b76 <__sfputc_r>:
 8008b76:	6893      	ldr	r3, [r2, #8]
 8008b78:	b410      	push	{r4}
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	6093      	str	r3, [r2, #8]
 8008b80:	da07      	bge.n	8008b92 <__sfputc_r+0x1c>
 8008b82:	6994      	ldr	r4, [r2, #24]
 8008b84:	42a3      	cmp	r3, r4
 8008b86:	db01      	blt.n	8008b8c <__sfputc_r+0x16>
 8008b88:	290a      	cmp	r1, #10
 8008b8a:	d102      	bne.n	8008b92 <__sfputc_r+0x1c>
 8008b8c:	bc10      	pop	{r4}
 8008b8e:	f000 b933 	b.w	8008df8 <__swbuf_r>
 8008b92:	6813      	ldr	r3, [r2, #0]
 8008b94:	1c58      	adds	r0, r3, #1
 8008b96:	6010      	str	r0, [r2, #0]
 8008b98:	7019      	strb	r1, [r3, #0]
 8008b9a:	4608      	mov	r0, r1
 8008b9c:	bc10      	pop	{r4}
 8008b9e:	4770      	bx	lr

08008ba0 <__sfputs_r>:
 8008ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba2:	4606      	mov	r6, r0
 8008ba4:	460f      	mov	r7, r1
 8008ba6:	4614      	mov	r4, r2
 8008ba8:	18d5      	adds	r5, r2, r3
 8008baa:	42ac      	cmp	r4, r5
 8008bac:	d101      	bne.n	8008bb2 <__sfputs_r+0x12>
 8008bae:	2000      	movs	r0, #0
 8008bb0:	e007      	b.n	8008bc2 <__sfputs_r+0x22>
 8008bb2:	463a      	mov	r2, r7
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bba:	f7ff ffdc 	bl	8008b76 <__sfputc_r>
 8008bbe:	1c43      	adds	r3, r0, #1
 8008bc0:	d1f3      	bne.n	8008baa <__sfputs_r+0xa>
 8008bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008bc4 <_vfiprintf_r>:
 8008bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc8:	460d      	mov	r5, r1
 8008bca:	4614      	mov	r4, r2
 8008bcc:	4698      	mov	r8, r3
 8008bce:	4606      	mov	r6, r0
 8008bd0:	b09d      	sub	sp, #116	; 0x74
 8008bd2:	b118      	cbz	r0, 8008bdc <_vfiprintf_r+0x18>
 8008bd4:	6a03      	ldr	r3, [r0, #32]
 8008bd6:	b90b      	cbnz	r3, 8008bdc <_vfiprintf_r+0x18>
 8008bd8:	f7fc fdb2 	bl	8005740 <__sinit>
 8008bdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bde:	07d9      	lsls	r1, r3, #31
 8008be0:	d405      	bmi.n	8008bee <_vfiprintf_r+0x2a>
 8008be2:	89ab      	ldrh	r3, [r5, #12]
 8008be4:	059a      	lsls	r2, r3, #22
 8008be6:	d402      	bmi.n	8008bee <_vfiprintf_r+0x2a>
 8008be8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bea:	f7fc febf 	bl	800596c <__retarget_lock_acquire_recursive>
 8008bee:	89ab      	ldrh	r3, [r5, #12]
 8008bf0:	071b      	lsls	r3, r3, #28
 8008bf2:	d501      	bpl.n	8008bf8 <_vfiprintf_r+0x34>
 8008bf4:	692b      	ldr	r3, [r5, #16]
 8008bf6:	b99b      	cbnz	r3, 8008c20 <_vfiprintf_r+0x5c>
 8008bf8:	4629      	mov	r1, r5
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	f000 f93a 	bl	8008e74 <__swsetup_r>
 8008c00:	b170      	cbz	r0, 8008c20 <_vfiprintf_r+0x5c>
 8008c02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c04:	07dc      	lsls	r4, r3, #31
 8008c06:	d504      	bpl.n	8008c12 <_vfiprintf_r+0x4e>
 8008c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c0c:	b01d      	add	sp, #116	; 0x74
 8008c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c12:	89ab      	ldrh	r3, [r5, #12]
 8008c14:	0598      	lsls	r0, r3, #22
 8008c16:	d4f7      	bmi.n	8008c08 <_vfiprintf_r+0x44>
 8008c18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c1a:	f7fc fea8 	bl	800596e <__retarget_lock_release_recursive>
 8008c1e:	e7f3      	b.n	8008c08 <_vfiprintf_r+0x44>
 8008c20:	2300      	movs	r3, #0
 8008c22:	9309      	str	r3, [sp, #36]	; 0x24
 8008c24:	2320      	movs	r3, #32
 8008c26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c2a:	2330      	movs	r3, #48	; 0x30
 8008c2c:	f04f 0901 	mov.w	r9, #1
 8008c30:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c34:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008de4 <_vfiprintf_r+0x220>
 8008c38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c3c:	4623      	mov	r3, r4
 8008c3e:	469a      	mov	sl, r3
 8008c40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c44:	b10a      	cbz	r2, 8008c4a <_vfiprintf_r+0x86>
 8008c46:	2a25      	cmp	r2, #37	; 0x25
 8008c48:	d1f9      	bne.n	8008c3e <_vfiprintf_r+0x7a>
 8008c4a:	ebba 0b04 	subs.w	fp, sl, r4
 8008c4e:	d00b      	beq.n	8008c68 <_vfiprintf_r+0xa4>
 8008c50:	465b      	mov	r3, fp
 8008c52:	4622      	mov	r2, r4
 8008c54:	4629      	mov	r1, r5
 8008c56:	4630      	mov	r0, r6
 8008c58:	f7ff ffa2 	bl	8008ba0 <__sfputs_r>
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	f000 80a9 	beq.w	8008db4 <_vfiprintf_r+0x1f0>
 8008c62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c64:	445a      	add	r2, fp
 8008c66:	9209      	str	r2, [sp, #36]	; 0x24
 8008c68:	f89a 3000 	ldrb.w	r3, [sl]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f000 80a1 	beq.w	8008db4 <_vfiprintf_r+0x1f0>
 8008c72:	2300      	movs	r3, #0
 8008c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c7c:	f10a 0a01 	add.w	sl, sl, #1
 8008c80:	9304      	str	r3, [sp, #16]
 8008c82:	9307      	str	r3, [sp, #28]
 8008c84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c88:	931a      	str	r3, [sp, #104]	; 0x68
 8008c8a:	4654      	mov	r4, sl
 8008c8c:	2205      	movs	r2, #5
 8008c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c92:	4854      	ldr	r0, [pc, #336]	; (8008de4 <_vfiprintf_r+0x220>)
 8008c94:	f7fc fe6c 	bl	8005970 <memchr>
 8008c98:	9a04      	ldr	r2, [sp, #16]
 8008c9a:	b9d8      	cbnz	r0, 8008cd4 <_vfiprintf_r+0x110>
 8008c9c:	06d1      	lsls	r1, r2, #27
 8008c9e:	bf44      	itt	mi
 8008ca0:	2320      	movmi	r3, #32
 8008ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ca6:	0713      	lsls	r3, r2, #28
 8008ca8:	bf44      	itt	mi
 8008caa:	232b      	movmi	r3, #43	; 0x2b
 8008cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8008cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8008cb6:	d015      	beq.n	8008ce4 <_vfiprintf_r+0x120>
 8008cb8:	4654      	mov	r4, sl
 8008cba:	2000      	movs	r0, #0
 8008cbc:	f04f 0c0a 	mov.w	ip, #10
 8008cc0:	9a07      	ldr	r2, [sp, #28]
 8008cc2:	4621      	mov	r1, r4
 8008cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cc8:	3b30      	subs	r3, #48	; 0x30
 8008cca:	2b09      	cmp	r3, #9
 8008ccc:	d94d      	bls.n	8008d6a <_vfiprintf_r+0x1a6>
 8008cce:	b1b0      	cbz	r0, 8008cfe <_vfiprintf_r+0x13a>
 8008cd0:	9207      	str	r2, [sp, #28]
 8008cd2:	e014      	b.n	8008cfe <_vfiprintf_r+0x13a>
 8008cd4:	eba0 0308 	sub.w	r3, r0, r8
 8008cd8:	fa09 f303 	lsl.w	r3, r9, r3
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	46a2      	mov	sl, r4
 8008ce0:	9304      	str	r3, [sp, #16]
 8008ce2:	e7d2      	b.n	8008c8a <_vfiprintf_r+0xc6>
 8008ce4:	9b03      	ldr	r3, [sp, #12]
 8008ce6:	1d19      	adds	r1, r3, #4
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	9103      	str	r1, [sp, #12]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	bfbb      	ittet	lt
 8008cf0:	425b      	neglt	r3, r3
 8008cf2:	f042 0202 	orrlt.w	r2, r2, #2
 8008cf6:	9307      	strge	r3, [sp, #28]
 8008cf8:	9307      	strlt	r3, [sp, #28]
 8008cfa:	bfb8      	it	lt
 8008cfc:	9204      	strlt	r2, [sp, #16]
 8008cfe:	7823      	ldrb	r3, [r4, #0]
 8008d00:	2b2e      	cmp	r3, #46	; 0x2e
 8008d02:	d10c      	bne.n	8008d1e <_vfiprintf_r+0x15a>
 8008d04:	7863      	ldrb	r3, [r4, #1]
 8008d06:	2b2a      	cmp	r3, #42	; 0x2a
 8008d08:	d134      	bne.n	8008d74 <_vfiprintf_r+0x1b0>
 8008d0a:	9b03      	ldr	r3, [sp, #12]
 8008d0c:	3402      	adds	r4, #2
 8008d0e:	1d1a      	adds	r2, r3, #4
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	9203      	str	r2, [sp, #12]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	bfb8      	it	lt
 8008d18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008d1c:	9305      	str	r3, [sp, #20]
 8008d1e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008de8 <_vfiprintf_r+0x224>
 8008d22:	2203      	movs	r2, #3
 8008d24:	4650      	mov	r0, sl
 8008d26:	7821      	ldrb	r1, [r4, #0]
 8008d28:	f7fc fe22 	bl	8005970 <memchr>
 8008d2c:	b138      	cbz	r0, 8008d3e <_vfiprintf_r+0x17a>
 8008d2e:	2240      	movs	r2, #64	; 0x40
 8008d30:	9b04      	ldr	r3, [sp, #16]
 8008d32:	eba0 000a 	sub.w	r0, r0, sl
 8008d36:	4082      	lsls	r2, r0
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	3401      	adds	r4, #1
 8008d3c:	9304      	str	r3, [sp, #16]
 8008d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d42:	2206      	movs	r2, #6
 8008d44:	4829      	ldr	r0, [pc, #164]	; (8008dec <_vfiprintf_r+0x228>)
 8008d46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d4a:	f7fc fe11 	bl	8005970 <memchr>
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d03f      	beq.n	8008dd2 <_vfiprintf_r+0x20e>
 8008d52:	4b27      	ldr	r3, [pc, #156]	; (8008df0 <_vfiprintf_r+0x22c>)
 8008d54:	bb1b      	cbnz	r3, 8008d9e <_vfiprintf_r+0x1da>
 8008d56:	9b03      	ldr	r3, [sp, #12]
 8008d58:	3307      	adds	r3, #7
 8008d5a:	f023 0307 	bic.w	r3, r3, #7
 8008d5e:	3308      	adds	r3, #8
 8008d60:	9303      	str	r3, [sp, #12]
 8008d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d64:	443b      	add	r3, r7
 8008d66:	9309      	str	r3, [sp, #36]	; 0x24
 8008d68:	e768      	b.n	8008c3c <_vfiprintf_r+0x78>
 8008d6a:	460c      	mov	r4, r1
 8008d6c:	2001      	movs	r0, #1
 8008d6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d72:	e7a6      	b.n	8008cc2 <_vfiprintf_r+0xfe>
 8008d74:	2300      	movs	r3, #0
 8008d76:	f04f 0c0a 	mov.w	ip, #10
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	3401      	adds	r4, #1
 8008d7e:	9305      	str	r3, [sp, #20]
 8008d80:	4620      	mov	r0, r4
 8008d82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d86:	3a30      	subs	r2, #48	; 0x30
 8008d88:	2a09      	cmp	r2, #9
 8008d8a:	d903      	bls.n	8008d94 <_vfiprintf_r+0x1d0>
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d0c6      	beq.n	8008d1e <_vfiprintf_r+0x15a>
 8008d90:	9105      	str	r1, [sp, #20]
 8008d92:	e7c4      	b.n	8008d1e <_vfiprintf_r+0x15a>
 8008d94:	4604      	mov	r4, r0
 8008d96:	2301      	movs	r3, #1
 8008d98:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d9c:	e7f0      	b.n	8008d80 <_vfiprintf_r+0x1bc>
 8008d9e:	ab03      	add	r3, sp, #12
 8008da0:	9300      	str	r3, [sp, #0]
 8008da2:	462a      	mov	r2, r5
 8008da4:	4630      	mov	r0, r6
 8008da6:	4b13      	ldr	r3, [pc, #76]	; (8008df4 <_vfiprintf_r+0x230>)
 8008da8:	a904      	add	r1, sp, #16
 8008daa:	f7fb fe7f 	bl	8004aac <_printf_float>
 8008dae:	4607      	mov	r7, r0
 8008db0:	1c78      	adds	r0, r7, #1
 8008db2:	d1d6      	bne.n	8008d62 <_vfiprintf_r+0x19e>
 8008db4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008db6:	07d9      	lsls	r1, r3, #31
 8008db8:	d405      	bmi.n	8008dc6 <_vfiprintf_r+0x202>
 8008dba:	89ab      	ldrh	r3, [r5, #12]
 8008dbc:	059a      	lsls	r2, r3, #22
 8008dbe:	d402      	bmi.n	8008dc6 <_vfiprintf_r+0x202>
 8008dc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dc2:	f7fc fdd4 	bl	800596e <__retarget_lock_release_recursive>
 8008dc6:	89ab      	ldrh	r3, [r5, #12]
 8008dc8:	065b      	lsls	r3, r3, #25
 8008dca:	f53f af1d 	bmi.w	8008c08 <_vfiprintf_r+0x44>
 8008dce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dd0:	e71c      	b.n	8008c0c <_vfiprintf_r+0x48>
 8008dd2:	ab03      	add	r3, sp, #12
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	462a      	mov	r2, r5
 8008dd8:	4630      	mov	r0, r6
 8008dda:	4b06      	ldr	r3, [pc, #24]	; (8008df4 <_vfiprintf_r+0x230>)
 8008ddc:	a904      	add	r1, sp, #16
 8008dde:	f7fc f905 	bl	8004fec <_printf_i>
 8008de2:	e7e4      	b.n	8008dae <_vfiprintf_r+0x1ea>
 8008de4:	0800a961 	.word	0x0800a961
 8008de8:	0800a967 	.word	0x0800a967
 8008dec:	0800a96b 	.word	0x0800a96b
 8008df0:	08004aad 	.word	0x08004aad
 8008df4:	08008ba1 	.word	0x08008ba1

08008df8 <__swbuf_r>:
 8008df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dfa:	460e      	mov	r6, r1
 8008dfc:	4614      	mov	r4, r2
 8008dfe:	4605      	mov	r5, r0
 8008e00:	b118      	cbz	r0, 8008e0a <__swbuf_r+0x12>
 8008e02:	6a03      	ldr	r3, [r0, #32]
 8008e04:	b90b      	cbnz	r3, 8008e0a <__swbuf_r+0x12>
 8008e06:	f7fc fc9b 	bl	8005740 <__sinit>
 8008e0a:	69a3      	ldr	r3, [r4, #24]
 8008e0c:	60a3      	str	r3, [r4, #8]
 8008e0e:	89a3      	ldrh	r3, [r4, #12]
 8008e10:	071a      	lsls	r2, r3, #28
 8008e12:	d525      	bpl.n	8008e60 <__swbuf_r+0x68>
 8008e14:	6923      	ldr	r3, [r4, #16]
 8008e16:	b31b      	cbz	r3, 8008e60 <__swbuf_r+0x68>
 8008e18:	6823      	ldr	r3, [r4, #0]
 8008e1a:	6922      	ldr	r2, [r4, #16]
 8008e1c:	b2f6      	uxtb	r6, r6
 8008e1e:	1a98      	subs	r0, r3, r2
 8008e20:	6963      	ldr	r3, [r4, #20]
 8008e22:	4637      	mov	r7, r6
 8008e24:	4283      	cmp	r3, r0
 8008e26:	dc04      	bgt.n	8008e32 <__swbuf_r+0x3a>
 8008e28:	4621      	mov	r1, r4
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	f7ff fa30 	bl	8008290 <_fflush_r>
 8008e30:	b9e0      	cbnz	r0, 8008e6c <__swbuf_r+0x74>
 8008e32:	68a3      	ldr	r3, [r4, #8]
 8008e34:	3b01      	subs	r3, #1
 8008e36:	60a3      	str	r3, [r4, #8]
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	1c5a      	adds	r2, r3, #1
 8008e3c:	6022      	str	r2, [r4, #0]
 8008e3e:	701e      	strb	r6, [r3, #0]
 8008e40:	6962      	ldr	r2, [r4, #20]
 8008e42:	1c43      	adds	r3, r0, #1
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d004      	beq.n	8008e52 <__swbuf_r+0x5a>
 8008e48:	89a3      	ldrh	r3, [r4, #12]
 8008e4a:	07db      	lsls	r3, r3, #31
 8008e4c:	d506      	bpl.n	8008e5c <__swbuf_r+0x64>
 8008e4e:	2e0a      	cmp	r6, #10
 8008e50:	d104      	bne.n	8008e5c <__swbuf_r+0x64>
 8008e52:	4621      	mov	r1, r4
 8008e54:	4628      	mov	r0, r5
 8008e56:	f7ff fa1b 	bl	8008290 <_fflush_r>
 8008e5a:	b938      	cbnz	r0, 8008e6c <__swbuf_r+0x74>
 8008e5c:	4638      	mov	r0, r7
 8008e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e60:	4621      	mov	r1, r4
 8008e62:	4628      	mov	r0, r5
 8008e64:	f000 f806 	bl	8008e74 <__swsetup_r>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d0d5      	beq.n	8008e18 <__swbuf_r+0x20>
 8008e6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008e70:	e7f4      	b.n	8008e5c <__swbuf_r+0x64>
	...

08008e74 <__swsetup_r>:
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	4b2a      	ldr	r3, [pc, #168]	; (8008f20 <__swsetup_r+0xac>)
 8008e78:	4605      	mov	r5, r0
 8008e7a:	6818      	ldr	r0, [r3, #0]
 8008e7c:	460c      	mov	r4, r1
 8008e7e:	b118      	cbz	r0, 8008e88 <__swsetup_r+0x14>
 8008e80:	6a03      	ldr	r3, [r0, #32]
 8008e82:	b90b      	cbnz	r3, 8008e88 <__swsetup_r+0x14>
 8008e84:	f7fc fc5c 	bl	8005740 <__sinit>
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e8e:	0718      	lsls	r0, r3, #28
 8008e90:	d422      	bmi.n	8008ed8 <__swsetup_r+0x64>
 8008e92:	06d9      	lsls	r1, r3, #27
 8008e94:	d407      	bmi.n	8008ea6 <__swsetup_r+0x32>
 8008e96:	2309      	movs	r3, #9
 8008e98:	602b      	str	r3, [r5, #0]
 8008e9a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ea2:	81a3      	strh	r3, [r4, #12]
 8008ea4:	e034      	b.n	8008f10 <__swsetup_r+0x9c>
 8008ea6:	0758      	lsls	r0, r3, #29
 8008ea8:	d512      	bpl.n	8008ed0 <__swsetup_r+0x5c>
 8008eaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008eac:	b141      	cbz	r1, 8008ec0 <__swsetup_r+0x4c>
 8008eae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008eb2:	4299      	cmp	r1, r3
 8008eb4:	d002      	beq.n	8008ebc <__swsetup_r+0x48>
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	f7fd fbda 	bl	8006670 <_free_r>
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	6363      	str	r3, [r4, #52]	; 0x34
 8008ec0:	89a3      	ldrh	r3, [r4, #12]
 8008ec2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ec6:	81a3      	strh	r3, [r4, #12]
 8008ec8:	2300      	movs	r3, #0
 8008eca:	6063      	str	r3, [r4, #4]
 8008ecc:	6923      	ldr	r3, [r4, #16]
 8008ece:	6023      	str	r3, [r4, #0]
 8008ed0:	89a3      	ldrh	r3, [r4, #12]
 8008ed2:	f043 0308 	orr.w	r3, r3, #8
 8008ed6:	81a3      	strh	r3, [r4, #12]
 8008ed8:	6923      	ldr	r3, [r4, #16]
 8008eda:	b94b      	cbnz	r3, 8008ef0 <__swsetup_r+0x7c>
 8008edc:	89a3      	ldrh	r3, [r4, #12]
 8008ede:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ee2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ee6:	d003      	beq.n	8008ef0 <__swsetup_r+0x7c>
 8008ee8:	4621      	mov	r1, r4
 8008eea:	4628      	mov	r0, r5
 8008eec:	f000 f883 	bl	8008ff6 <__smakebuf_r>
 8008ef0:	89a0      	ldrh	r0, [r4, #12]
 8008ef2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ef6:	f010 0301 	ands.w	r3, r0, #1
 8008efa:	d00a      	beq.n	8008f12 <__swsetup_r+0x9e>
 8008efc:	2300      	movs	r3, #0
 8008efe:	60a3      	str	r3, [r4, #8]
 8008f00:	6963      	ldr	r3, [r4, #20]
 8008f02:	425b      	negs	r3, r3
 8008f04:	61a3      	str	r3, [r4, #24]
 8008f06:	6923      	ldr	r3, [r4, #16]
 8008f08:	b943      	cbnz	r3, 8008f1c <__swsetup_r+0xa8>
 8008f0a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f0e:	d1c4      	bne.n	8008e9a <__swsetup_r+0x26>
 8008f10:	bd38      	pop	{r3, r4, r5, pc}
 8008f12:	0781      	lsls	r1, r0, #30
 8008f14:	bf58      	it	pl
 8008f16:	6963      	ldrpl	r3, [r4, #20]
 8008f18:	60a3      	str	r3, [r4, #8]
 8008f1a:	e7f4      	b.n	8008f06 <__swsetup_r+0x92>
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	e7f7      	b.n	8008f10 <__swsetup_r+0x9c>
 8008f20:	20000074 	.word	0x20000074

08008f24 <_raise_r>:
 8008f24:	291f      	cmp	r1, #31
 8008f26:	b538      	push	{r3, r4, r5, lr}
 8008f28:	4604      	mov	r4, r0
 8008f2a:	460d      	mov	r5, r1
 8008f2c:	d904      	bls.n	8008f38 <_raise_r+0x14>
 8008f2e:	2316      	movs	r3, #22
 8008f30:	6003      	str	r3, [r0, #0]
 8008f32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008f3a:	b112      	cbz	r2, 8008f42 <_raise_r+0x1e>
 8008f3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f40:	b94b      	cbnz	r3, 8008f56 <_raise_r+0x32>
 8008f42:	4620      	mov	r0, r4
 8008f44:	f000 f830 	bl	8008fa8 <_getpid_r>
 8008f48:	462a      	mov	r2, r5
 8008f4a:	4601      	mov	r1, r0
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f52:	f000 b817 	b.w	8008f84 <_kill_r>
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d00a      	beq.n	8008f70 <_raise_r+0x4c>
 8008f5a:	1c59      	adds	r1, r3, #1
 8008f5c:	d103      	bne.n	8008f66 <_raise_r+0x42>
 8008f5e:	2316      	movs	r3, #22
 8008f60:	6003      	str	r3, [r0, #0]
 8008f62:	2001      	movs	r0, #1
 8008f64:	e7e7      	b.n	8008f36 <_raise_r+0x12>
 8008f66:	2400      	movs	r4, #0
 8008f68:	4628      	mov	r0, r5
 8008f6a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f6e:	4798      	blx	r3
 8008f70:	2000      	movs	r0, #0
 8008f72:	e7e0      	b.n	8008f36 <_raise_r+0x12>

08008f74 <raise>:
 8008f74:	4b02      	ldr	r3, [pc, #8]	; (8008f80 <raise+0xc>)
 8008f76:	4601      	mov	r1, r0
 8008f78:	6818      	ldr	r0, [r3, #0]
 8008f7a:	f7ff bfd3 	b.w	8008f24 <_raise_r>
 8008f7e:	bf00      	nop
 8008f80:	20000074 	.word	0x20000074

08008f84 <_kill_r>:
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	2300      	movs	r3, #0
 8008f88:	4d06      	ldr	r5, [pc, #24]	; (8008fa4 <_kill_r+0x20>)
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	4608      	mov	r0, r1
 8008f8e:	4611      	mov	r1, r2
 8008f90:	602b      	str	r3, [r5, #0]
 8008f92:	f7f9 fa05 	bl	80023a0 <_kill>
 8008f96:	1c43      	adds	r3, r0, #1
 8008f98:	d102      	bne.n	8008fa0 <_kill_r+0x1c>
 8008f9a:	682b      	ldr	r3, [r5, #0]
 8008f9c:	b103      	cbz	r3, 8008fa0 <_kill_r+0x1c>
 8008f9e:	6023      	str	r3, [r4, #0]
 8008fa0:	bd38      	pop	{r3, r4, r5, pc}
 8008fa2:	bf00      	nop
 8008fa4:	2000088c 	.word	0x2000088c

08008fa8 <_getpid_r>:
 8008fa8:	f7f9 b9f3 	b.w	8002392 <_getpid>

08008fac <__swhatbuf_r>:
 8008fac:	b570      	push	{r4, r5, r6, lr}
 8008fae:	460c      	mov	r4, r1
 8008fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb4:	4615      	mov	r5, r2
 8008fb6:	2900      	cmp	r1, #0
 8008fb8:	461e      	mov	r6, r3
 8008fba:	b096      	sub	sp, #88	; 0x58
 8008fbc:	da0c      	bge.n	8008fd8 <__swhatbuf_r+0x2c>
 8008fbe:	89a3      	ldrh	r3, [r4, #12]
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008fc6:	bf0c      	ite	eq
 8008fc8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008fcc:	2340      	movne	r3, #64	; 0x40
 8008fce:	2000      	movs	r0, #0
 8008fd0:	6031      	str	r1, [r6, #0]
 8008fd2:	602b      	str	r3, [r5, #0]
 8008fd4:	b016      	add	sp, #88	; 0x58
 8008fd6:	bd70      	pop	{r4, r5, r6, pc}
 8008fd8:	466a      	mov	r2, sp
 8008fda:	f000 f849 	bl	8009070 <_fstat_r>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	dbed      	blt.n	8008fbe <__swhatbuf_r+0x12>
 8008fe2:	9901      	ldr	r1, [sp, #4]
 8008fe4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008fe8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008fec:	4259      	negs	r1, r3
 8008fee:	4159      	adcs	r1, r3
 8008ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ff4:	e7eb      	b.n	8008fce <__swhatbuf_r+0x22>

08008ff6 <__smakebuf_r>:
 8008ff6:	898b      	ldrh	r3, [r1, #12]
 8008ff8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ffa:	079d      	lsls	r5, r3, #30
 8008ffc:	4606      	mov	r6, r0
 8008ffe:	460c      	mov	r4, r1
 8009000:	d507      	bpl.n	8009012 <__smakebuf_r+0x1c>
 8009002:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009006:	6023      	str	r3, [r4, #0]
 8009008:	6123      	str	r3, [r4, #16]
 800900a:	2301      	movs	r3, #1
 800900c:	6163      	str	r3, [r4, #20]
 800900e:	b002      	add	sp, #8
 8009010:	bd70      	pop	{r4, r5, r6, pc}
 8009012:	466a      	mov	r2, sp
 8009014:	ab01      	add	r3, sp, #4
 8009016:	f7ff ffc9 	bl	8008fac <__swhatbuf_r>
 800901a:	9900      	ldr	r1, [sp, #0]
 800901c:	4605      	mov	r5, r0
 800901e:	4630      	mov	r0, r6
 8009020:	f7fd fb96 	bl	8006750 <_malloc_r>
 8009024:	b948      	cbnz	r0, 800903a <__smakebuf_r+0x44>
 8009026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800902a:	059a      	lsls	r2, r3, #22
 800902c:	d4ef      	bmi.n	800900e <__smakebuf_r+0x18>
 800902e:	f023 0303 	bic.w	r3, r3, #3
 8009032:	f043 0302 	orr.w	r3, r3, #2
 8009036:	81a3      	strh	r3, [r4, #12]
 8009038:	e7e3      	b.n	8009002 <__smakebuf_r+0xc>
 800903a:	89a3      	ldrh	r3, [r4, #12]
 800903c:	6020      	str	r0, [r4, #0]
 800903e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009042:	81a3      	strh	r3, [r4, #12]
 8009044:	9b00      	ldr	r3, [sp, #0]
 8009046:	6120      	str	r0, [r4, #16]
 8009048:	6163      	str	r3, [r4, #20]
 800904a:	9b01      	ldr	r3, [sp, #4]
 800904c:	b15b      	cbz	r3, 8009066 <__smakebuf_r+0x70>
 800904e:	4630      	mov	r0, r6
 8009050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009054:	f000 f81e 	bl	8009094 <_isatty_r>
 8009058:	b128      	cbz	r0, 8009066 <__smakebuf_r+0x70>
 800905a:	89a3      	ldrh	r3, [r4, #12]
 800905c:	f023 0303 	bic.w	r3, r3, #3
 8009060:	f043 0301 	orr.w	r3, r3, #1
 8009064:	81a3      	strh	r3, [r4, #12]
 8009066:	89a3      	ldrh	r3, [r4, #12]
 8009068:	431d      	orrs	r5, r3
 800906a:	81a5      	strh	r5, [r4, #12]
 800906c:	e7cf      	b.n	800900e <__smakebuf_r+0x18>
	...

08009070 <_fstat_r>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	2300      	movs	r3, #0
 8009074:	4d06      	ldr	r5, [pc, #24]	; (8009090 <_fstat_r+0x20>)
 8009076:	4604      	mov	r4, r0
 8009078:	4608      	mov	r0, r1
 800907a:	4611      	mov	r1, r2
 800907c:	602b      	str	r3, [r5, #0]
 800907e:	f7f9 f9ed 	bl	800245c <_fstat>
 8009082:	1c43      	adds	r3, r0, #1
 8009084:	d102      	bne.n	800908c <_fstat_r+0x1c>
 8009086:	682b      	ldr	r3, [r5, #0]
 8009088:	b103      	cbz	r3, 800908c <_fstat_r+0x1c>
 800908a:	6023      	str	r3, [r4, #0]
 800908c:	bd38      	pop	{r3, r4, r5, pc}
 800908e:	bf00      	nop
 8009090:	2000088c 	.word	0x2000088c

08009094 <_isatty_r>:
 8009094:	b538      	push	{r3, r4, r5, lr}
 8009096:	2300      	movs	r3, #0
 8009098:	4d05      	ldr	r5, [pc, #20]	; (80090b0 <_isatty_r+0x1c>)
 800909a:	4604      	mov	r4, r0
 800909c:	4608      	mov	r0, r1
 800909e:	602b      	str	r3, [r5, #0]
 80090a0:	f7f9 f9eb 	bl	800247a <_isatty>
 80090a4:	1c43      	adds	r3, r0, #1
 80090a6:	d102      	bne.n	80090ae <_isatty_r+0x1a>
 80090a8:	682b      	ldr	r3, [r5, #0]
 80090aa:	b103      	cbz	r3, 80090ae <_isatty_r+0x1a>
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	bd38      	pop	{r3, r4, r5, pc}
 80090b0:	2000088c 	.word	0x2000088c

080090b4 <_init>:
 80090b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b6:	bf00      	nop
 80090b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ba:	bc08      	pop	{r3}
 80090bc:	469e      	mov	lr, r3
 80090be:	4770      	bx	lr

080090c0 <_fini>:
 80090c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c2:	bf00      	nop
 80090c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090c6:	bc08      	pop	{r3}
 80090c8:	469e      	mov	lr, r3
 80090ca:	4770      	bx	lr
